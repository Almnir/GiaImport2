//---------------------------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated by T4Model template for T4 (https://github.com/linq2db/t4models).
//    Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using System;
using System.Linq.Expressions;
//using System.Reflection;

using LinqToDB;
using LinqToDB.DataProvider.SqlServer;
using LinqToDB.Mapping;
using System.Xml.Serialization;
using System.Globalization;
using LinqToDB.DataProvider;

namespace GiaImport2.DataModels
{
    /// <summary>
    /// Database       : ERBD_GIA_MAIN_17_etalon_
    /// Data Source    : 10.0.18.3
    /// Server Version : 10.50.1600
    /// </summary>
    public partial class GIA_DB : LinqToDB.Data.DataConnection
    {
        public ITable<ac_Appeal> ac_Appeals { get { return this.GetTable<ac_Appeal>(); } }
        public ITable<ac_AppealTask> ac_AppealTasks { get { return this.GetTable<ac_AppealTask>(); } }
        public ITable<ac_AppealDecision> ac_AppealDecisions { get { return this.GetTable<ac_AppealDecision>(); } }
        public ITable<ac_AppealExpert> ac_AppealExperts { get { return this.GetTable<ac_AppealExpert>(); } }
        public ITable<ac_Change> ac_Changes { get { return this.GetTable<ac_Change>(); } }
        public ITable<dats_Border> dats_Borders { get { return this.GetTable<dats_Border>(); } }
        public ITable<dats_Group> dats_Groups { get { return this.GetTable<dats_Group>(); } }
        public ITable<prnf_CertificatePrintMain> prnf_CertificatePrintMains { get { return this.GetTable<prnf_CertificatePrintMain>(); } }
        public ITable<rbd_Address> rbd_Addresses { get { return this.GetTable<rbd_Address>(); } }
        public ITable<rbd_Area> rbd_Areas { get { return this.GetTable<rbd_Area>(); } }
        public ITable<rbd_Auditorium> rbd_Auditoriums { get { return this.GetTable<rbd_Auditorium>(); } }
        public ITable<rbd_AuditoriumsSubject> rbd_AuditoriumsSubjects { get { return this.GetTable<rbd_AuditoriumsSubject>(); } }
        public ITable<rbd_CurrentRegion> rbd_CurrentRegions { get { return this.GetTable<rbd_CurrentRegion>(); } }
        public ITable<rbd_CurrentRegionAddress> rbd_CurrentRegionAddresses { get { return this.GetTable<rbd_CurrentRegionAddress>(); } }
        public ITable<rbd_Expert> rbd_Experts { get { return this.GetTable<rbd_Expert>(); } }
        public ITable<rbd_ExpertsExam> rbd_ExpertsExams { get { return this.GetTable<rbd_ExpertsExam>(); } }
        public ITable<rbd_ExpertsSubject> rbd_ExpertsSubjects { get { return this.GetTable<rbd_ExpertsSubject>(); } }
        public ITable<rbd_Government> rbd_Governments { get { return this.GetTable<rbd_Government>(); } }
        public ITable<rbd_Participant> rbd_Participants { get { return this.GetTable<rbd_Participant>(); } }
        public ITable<rbd_ParticipantProperty> rbd_ParticipantProperties { get { return this.GetTable<rbd_ParticipantProperty>(); } }
        public ITable<rbd_ParticipantsExam> rbd_ParticipantsExams { get { return this.GetTable<rbd_ParticipantsExam>(); } }
        public ITable<rbd_ParticipantsExamPStation> rbd_ParticipantsExamPStations { get { return this.GetTable<rbd_ParticipantsExamPStation>(); } }
        public ITable<rbd_ParticipantsExamsOnStation> rbd_ParticipantsExamsOnStations { get { return this.GetTable<rbd_ParticipantsExamsOnStation>(); } }
        public ITable<rbd_ParticipantsProfSubject> rbd_ParticipantsProfSubjects { get { return this.GetTable<rbd_ParticipantsProfSubject>(); } }
        public ITable<rbd_ParticipantsSubject> rbd_ParticipantsSubjects { get { return this.GetTable<rbd_ParticipantsSubject>(); } }
        public ITable<rbd_Place> rbd_Places { get { return this.GetTable<rbd_Place>(); } }
        public ITable<rbd_School> rbd_Schools { get { return this.GetTable<rbd_School>(); } }
        public ITable<rbd_SchoolAddress> rbd_SchoolAddresses { get { return this.GetTable<rbd_SchoolAddress>(); } }
        public ITable<rbd_SchoolClass> rbd_SchoolClasses { get { return this.GetTable<rbd_SchoolClass>(); } }
        public ITable<rbd_Station> rbd_Stations { get { return this.GetTable<rbd_Station>(); } }
        public ITable<rbd_StationExamAuditory> rbd_StationExamAuditories { get { return this.GetTable<rbd_StationExamAuditory>(); } }
        public ITable<rbd_StationExamAuditoryProps> rbd_StationExamAuditoryProps { get { return this.GetTable<rbd_StationExamAuditoryProps>(); } }
        public ITable<rbd_StationForm> rbd_StationForms { get { return this.GetTable<rbd_StationForm>(); } }
        public ITable<rbd_StationFormAct> rbd_StationFormActs { get { return this.GetTable<rbd_StationFormAct>(); } }
        public ITable<rbd_StationFormAuditoryField> rbd_StationFormAuditoryFields { get { return this.GetTable<rbd_StationFormAuditoryField>(); } }
        public ITable<rbd_StationFormField> rbd_StationFormFields { get { return this.GetTable<rbd_StationFormField>(); } }
        public ITable<rbd_StationsExam> rbd_StationsExams { get { return this.GetTable<rbd_StationsExam>(); } }
        public ITable<rbd_StationWorker> rbd_StationWorkers { get { return this.GetTable<rbd_StationWorker>(); } }
        public ITable<rbd_StationWorkerOnExam> rbd_StationWorkerOnExams { get { return this.GetTable<rbd_StationWorkerOnExam>(); } }
        public ITable<rbd_StationWorkerOnStation> rbd_StationWorkerOnStations { get { return this.GetTable<rbd_StationWorkerOnStation>(); } }
        public ITable<rbd_StationWorkersAccreditation> rbd_StationWorkersAccreditations { get { return this.GetTable<rbd_StationWorkersAccreditation>(); } }
        public ITable<rbd_StationWorkersSubject> rbd_StationWorkersSubjects { get { return this.GetTable<rbd_StationWorkersSubject>(); } }
        public ITable<rbd_StationWorkersPosition> rbd_StationWorkersPositions { get { return this.GetTable<rbd_StationWorkersPosition>(); } }
        public ITable<res_Answer> res_Answers { get { return this.GetTable<res_Answer>(); } }
        public ITable<res_Complect> res_Complects { get { return this.GetTable<res_Complect>(); } }
        public ITable<res_HumanTest> res_HumanTests { get { return this.GetTable<res_HumanTest>(); } }
        public ITable<res_Mark> res_Marks { get { return this.GetTable<res_Mark>(); } }
        public ITable<res_SubComplect> res_SubComplects { get { return this.GetTable<res_SubComplect>(); } }
        public ITable<res_SubTest> res_SubTests { get { return this.GetTable<res_SubTest>(); } }
        public ITable<sht_Alt> sht_Alts { get { return this.GetTable<sht_Alt>(); } }
        public ITable<sht_ExamFinish> sht_ExamFinish { get { return this.GetTable<sht_ExamFinish>(); } }
        public ITable<sht_FinalMarks_C> sht_FinalMarks_C { get { return this.GetTable<sht_FinalMarks_C>(); } }
        public ITable<sht_FinalMarks_D> sht_FinalMarks_D { get { return this.GetTable<sht_FinalMarks_D>(); } }
        public ITable<sht_Marks_AB> sht_Marks_AB { get { return this.GetTable<sht_Marks_AB>(); } }
        public ITable<sht_Marks_C> sht_Marks_C { get { return this.GetTable<sht_Marks_C>(); } }
        public ITable<sht_Marks_D> sht_Marks_D { get { return this.GetTable<sht_Marks_D>(); } }
        public ITable<sht_Package> sht_Packages { get { return this.GetTable<sht_Package>(); } }
        public ITable<sht_Sheets_AB> sht_Sheets_AB { get { return this.GetTable<sht_Sheets_AB>(); } }
        public ITable<sht_Sheets_C> sht_Sheets_C { get { return this.GetTable<sht_Sheets_C>(); } }
        public ITable<sht_Sheets_D> sht_Sheets_D { get { return this.GetTable<sht_Sheets_D>(); } }
        public ITable<sht_Sheets_R> sht_Sheets_R { get { return this.GetTable<sht_Sheets_R>(); } }
        public ITable<ac_Correction> ac_Corrections { get { return this.GetTable<ac_Correction>(); } }
        public ITable<rbd_ParticipantsExamsOnSchool> rbd_ParticipantsExamsOnSchool { get { return this.GetTable<rbd_ParticipantsExamsOnSchool>(); } }
        public ITable<rbd_RegionFiles> rbd_RegionFiles { get { return this.GetTable<rbd_RegionFiles>(); } }
        public ITable<rbd_SchoolParticipant> rbd_SchoolParticipant { get { return this.GetTable<rbd_SchoolParticipant>(); } }
        public ITable<rt_Settings> rt_Settings { get { return this.GetTable<rt_Settings>(); } }
        public ITable<rbdc_Years> rbdc_Years { get { return this.GetTable<rbdc_Years>(); } }

        public GIA_DB()
        {
            InitDataContext();
        }

        public GIA_DB(string configuration)
            : base(configuration)
        {
            InitDataContext();
        }

        public GIA_DB(IDataProvider dataProvider, string configuration)
            : base(dataProvider, configuration)
        {
            InitDataContext();
        }

        partial void InitDataContext();

        //#region Table Functions

        //#region ccp_Calc_Dij

        //[Sql.TableFunction(Schema = "loader", Name = "ccp_Calc_Dij")]
        //public ITable<ccp_Calc_DijResult> ccp_Calc_Dij(Guid? @planId)
        //{
        //    return this.GetTable<ccp_Calc_DijResult>(this, (MethodInfo)MethodBase.GetCurrentMethod(),
        //        @planId);
        //}

        //public partial class ccp_Calc_DijResult
        //{
        //    public Guid Region1Id { get; set; }
        //    public Guid Region2Id { get; set; }
        //    public int Region1Code { get; set; }
        //    public int Region2Code { get; set; }
        //    public int Fij { get; set; }
        //    public int Tij { get; set; }
        //    public int Dij { get; set; }
        //    public int? Udij { get; set; }
        //}

        //#endregion

        //#region ccp_Calc_FijUdij

        //[Sql.TableFunction(Schema = "loader", Name = "ccp_Calc_FijUdij")]
        //public ITable<ccp_Calc_FijUdijResult> ccp_Calc_FijUdij(Guid? @planid)
        //{
        //    return this.GetTable<ccp_Calc_FijUdijResult>(this, (MethodInfo)MethodBase.GetCurrentMethod(),
        //        @planid);
        //}

        //public partial class ccp_Calc_FijUdijResult
        //{
        //    public Guid Region1Id { get; set; }
        //    public Guid Region2Id { get; set; }
        //    public int Region1Code { get; set; }
        //    public int Region2Code { get; set; }
        //    public int Fij { get; set; }
        //    public int Tij { get; set; }
        //    public int Dij { get; set; }
        //    public int? Udij { get; set; }
        //}

        //#endregion

        //#region ccp_Calc_Tig

        //[Sql.TableFunction(Schema = "loader", Name = "ccp_Calc_Tig")]
        //public ITable<ccp_Calc_TigResult> ccp_Calc_Tig(Guid? @planId)
        //{
        //    return this.GetTable<ccp_Calc_TigResult>(this, (MethodInfo)MethodBase.GetCurrentMethod(),
        //        @planId);
        //}

        //public partial class ccp_Calc_TigResult
        //{
        //    public Guid Region1Id { get; set; }
        //    public Guid Region2Id { get; set; }
        //    public int Region1Code { get; set; }
        //    public int Region2Code { get; set; }
        //    public int Fij { get; set; }
        //    public int Tij { get; set; }
        //    public int Dij { get; set; }
        //    public int? Udij { get; set; }
        //}

        //#endregion

        //#region ccp_Calc_TigDet

        //[Sql.TableFunction(Schema = "loader", Name = "ccp_Calc_TigDet")]
        //public ITable<ccp_Calc_TigDetResult> ccp_Calc_TigDet(Guid? @planId)
        //{
        //    return this.GetTable<ccp_Calc_TigDetResult>(this, (MethodInfo)MethodBase.GetCurrentMethod(),
        //        @planId);
        //}

        //public partial class ccp_Calc_TigDetResult
        //{
        //    public Guid Region1Id { get; set; }
        //    public Guid Region2Id { get; set; }
        //    public int Region1Code { get; set; }
        //    public int Region2Code { get; set; }
        //    public int Fij { get; set; }
        //    public int Tij { get; set; }
        //    public int Dij { get; set; }
        //    public int? Udij { get; set; }
        //}

        //#endregion

        //#region ccp_GetExamsForCrossRequests

        //[Sql.TableFunction(Schema = "loader", Name = "ccp_GetExamsForCrossRequests")]
        //public ITable<ccp_GetExamsForCrossRequestsResult> ccp_GetExamsForCrossRequests()
        //{
        //    return this.GetTable<ccp_GetExamsForCrossRequestsResult>(this, (MethodInfo)MethodBase.GetCurrentMethod());
        //}

        //public partial class ccp_GetExamsForCrossRequestsResult
        //{
        //    public Guid ExamId { get; set; }
        //    public DateTime ExamDate { get; set; }
        //    public Guid PlanId { get; set; }
        //    public double Weight { get; set; }
        //}

        //#endregion

        //#region ccp_GetRegionsPairParms_ForCrossRequests

        //[Sql.TableFunction(Schema = "loader", Name = "ccp_GetRegionsPairParms_ForCrossRequests")]
        //public ITable<ccp_GetRegionsPairParms_ForCrossRequestsResult> ccp_GetRegionsPairParms_ForCrossRequests(Guid? @planId)
        //{
        //    return this.GetTable<ccp_GetRegionsPairParms_ForCrossRequestsResult>(this, (MethodInfo)MethodBase.GetCurrentMethod(),
        //        @planId);
        //}

        //public partial class ccp_GetRegionsPairParms_ForCrossRequestsResult
        //{
        //    public Guid Region1Id { get; set; }
        //    public Guid Region2Id { get; set; }
        //    public int Region1Code { get; set; }
        //    public int Region2Code { get; set; }
        //    public int Fij { get; set; }
        //    public int Tij { get; set; }
        //    public int Dij { get; set; }
        //    public int? Udij { get; set; }
        //}

        //#endregion

        //#region ccp_GetRegionsPairParms_ForPlanDetails

        //[Sql.TableFunction(Schema = "loader", Name = "ccp_GetRegionsPairParms_ForPlanDetails")]
        //public ITable<ccp_GetRegionsPairParms_ForPlanDetailsResult> ccp_GetRegionsPairParms_ForPlanDetails(Guid? @planId)
        //{
        //    return this.GetTable<ccp_GetRegionsPairParms_ForPlanDetailsResult>(this, (MethodInfo)MethodBase.GetCurrentMethod(),
        //        @planId);
        //}

        public partial class ccp_GetRegionsPairParms_ForPlanDetailsResult
        {
            public Guid Region1Id { get; set; }
            public Guid Region2Id { get; set; }
            public int Region1Code { get; set; }
            public int Region2Code { get; set; }
            public int Fij { get; set; }
            public int Tij { get; set; }
            public int Dij { get; set; }
            public int? Udij { get; set; }
            public bool HasDetails { get; set; }
        }

        //#endregion

        //#region ccp_GetRegionsParms

        //[Sql.TableFunction(Schema = "loader", Name = "ccp_GetRegionsParms")]
        //public ITable<ccp_GetRegionsParmsResult> ccp_GetRegionsParms(Guid? @planid)
        //{
        //    return this.GetTable<ccp_GetRegionsParmsResult>(this, (MethodInfo)MethodBase.GetCurrentMethod(),
        //        @planid);
        //}

        public partial class ccp_GetRegionsParmsResult
        {
            public Guid RegionId { get; set; }
            public int RegionCode { get; set; }
            public int Fi { get; set; }
            public int Li { get; set; }
            public int Ci { get; set; }
            public int Ai { get; set; }
            public int Bi { get; set; }
            public int Mpi { get; set; }
            public int? Uri { get; set; }
            public int Wi { get; set; }
            public int Vi { get; set; }
            public Guid G { get; set; }
            public bool IsActiveToPlan { get; set; }
            public bool IsActive { get; set; }
            public bool IsActiveInPp { get; set; }
            public bool IsLockDetails { get; set; }
        }

        //#endregion

        //#region ftc_GetTriples

        //[Sql.TableFunction(Schema = "loader", Name = "ftc_GetTriples")]
        //public ITable<ftc_GetTriplesResult> ftc_GetTriples(double? @SchemeVersion)
        //{
        //    return this.GetTable<ftc_GetTriplesResult>(this, (MethodInfo)MethodBase.GetCurrentMethod(),
        //        @SchemeVersion);
        //}

        public partial class ftc_GetTriplesResult
        {
            public double? SchemeVersion { get; set; }
            public int? TestTypeCode { get; set; }
            public int? SubjectCode { get; set; }
            public int? SheetCode { get; set; }
            public string SheetName { get; set; }
            public string BatchTypeName { get; set; }
            public bool? IsAuditorium { get; set; }
            public bool? IsStation { get; set; }
            public bool? IsDescription { get; set; }
            public bool? IsBatchID { get; set; }
        }

        //#endregion

        //#region ftcf_GenerateComplect

        //[Sql.TableFunction(Schema = "loader", Name = "ftcf_GenerateComplect")]
        //public ITable<ftcf_GenerateComplectResult> ftcf_GenerateComplect(int? @region, string @stuffcode)
        //{
        //    return this.GetTable<ftcf_GenerateComplectResult>(this, (MethodInfo)MethodBase.GetCurrentMethod(),
        //        @region,
        //        @stuffcode);
        //}

        //public partial class ftcf_GenerateComplectResult
        //{
        //    public int REGION { get; set; }
        //    public string StuffCode { get; set; }
        //    public string Barcode_R { get; set; }
        //    public string Barcode_AB { get; set; }
        //    public string Barcode_C { get; set; }
        //}

        //#endregion

        //#region ftcf_GetSheet

        //[Sql.TableFunction(Schema = "loader", Name = "ftcf_GetSheet")]
        //public ITable<ftcf_GetSheetResult> ftcf_GetSheet(int? @sheet_type, int? @Region, Guid? @ComplectID)
        //{
        //    return this.GetTable<ftcf_GetSheetResult>(this, (MethodInfo)MethodBase.GetCurrentMethod(),
        //        @sheet_type,
        //        @Region,
        //        @ComplectID);
        //}

        public partial class ftcf_GetSheetResult
        {
            public int? REGION { get; set; }
            public Guid? SheetID { get; set; }
            public Guid? PackageFK { get; set; }
            public string FileName { get; set; }
            public int? RegionCode { get; set; }
            public string DepartmentCode { get; set; }
            public int? TestTypeCode { get; set; }
            public int? SubjectCode { get; set; }
            public string ExamDate { get; set; }
            public int? StationCode { get; set; }
            public string AuditoriumCode { get; set; }
            public string Barcode { get; set; }
            public string CRC { get; set; }
            public Guid? ParticipantID { get; set; }
            public int? SchoolCode { get; set; }
            public string Surname { get; set; }
            public string Name { get; set; }
            public string SecondName { get; set; }
            public string DocumentSeries { get; set; }
            public string DocumentNumber { get; set; }
            public string DocumentHash { get; set; }
            public int? Sex { get; set; }
            public int? SheetCode { get; set; }
            public string ResponsibleCode { get; set; }
            public bool? IsEmpty { get; set; }
            public string ImagePaths { get; set; }
            public string ProtocolCodes { get; set; }
            public short? DeleteType { get; set; }
            public int? ImageNumber { get; set; }
            public int? VariantCode { get; set; }
            public bool? HasSignature { get; set; }
            public int? Condition { get; set; }
            public int? ProjectBatchID { get; set; }
            public string Reserve01 { get; set; }
            public string Reserve02 { get; set; }
            public string Reserve03 { get; set; }
            public string Reserve04 { get; set; }
            public string Reserve05 { get; set; }
            public string Reserve06 { get; set; }
            public string Reserve07 { get; set; }
            public string Reserve08 { get; set; }
            public string Reserve09 { get; set; }
            public string Reserve10 { get; set; }
        }

        //#endregion

        //#region ftcf_GetSubjectTasks

        //[Sql.TableFunction(Schema = "loader", Name = "ftcf_GetSubjectTasks")]
        //public ITable<ftcf_GetSubjectTasksResult> ftcf_GetSubjectTasks(int? @SubjectCode)
        //{
        //    return this.GetTable<ftcf_GetSubjectTasksResult>(this, (MethodInfo)MethodBase.GetCurrentMethod(),
        //        @SubjectCode);
        //}

        //public partial class ftcf_GetSubjectTasksResult
        //{
        //    public int SubjectCode { get; set; }
        //    public int TaskGroup { get; set; }
        //    public int TaskNumber { get; set; }
        //}

        //#endregion

        //#endregion

        //#region FreeTextTable

        //public class FreeTextKey<T>
        //{
        //    public T Key;
        //    public int Rank;
        //}

        //[FreeTextTableExpression]
        //public ITable<FreeTextKey<TKey>> FreeTextTable<TTable, TKey>(string field, string text)
        //{
        //    return this.GetTable<FreeTextKey<TKey>>(
        //        this,
        //        ((MethodInfo)(MethodBase.GetCurrentMethod())).MakeGenericMethod(typeof(TTable), typeof(TKey)),
        //        field,
        //        text);
        //}

        //[FreeTextTableExpression]
        //public ITable<FreeTextKey<TKey>> FreeTextTable<TTable, TKey>(Expression<Func<TTable, string>> fieldSelector, string text)
        //{
        //    return this.GetTable<FreeTextKey<TKey>>(
        //        this,
        //        ((MethodInfo)(MethodBase.GetCurrentMethod())).MakeGenericMethod(typeof(TTable), typeof(TKey)),
        //        fieldSelector,
        //        text);
        //}

        //#endregion
    }

    [Table(Schema = "loader", Name = "ac_Appeals")]
    public partial class ac_Appeal
    {
        [PrimaryKey(2), NotNull]
        public int REGION { get; set; } // int

        [PrimaryKey(1), NotNull]
        public Guid AppealID { get; set; } // uniqueidentifier

        [Column, NotNull]
        public Guid HumanTestFK { get; set; } // uniqueidentifier

        [Column, NotNull]
        public int AppealType { get; set; } // int

        [Column, NotNull]
        public bool DeclinedByCommittee { get; set; } // bit

        [XmlIgnore]
        [NotColumn]
        private DateTime? _CreateTime;

        [XmlElement("CreateTime")]
        [NotColumn]
        public string CreateTimeString
        {
            get
            {
                if (!_CreateTime.HasValue)
                {
                    return null;
                }
                else
                {
                    return _CreateTime.Value.ToString("o");
                }
            }
            set
            {
                this._CreateTime = DateTime.Parse(value);
            }
        }

        [XmlIgnore]
        [Column, Nullable]
        public DateTime? CreateTime
        {
            get { return _CreateTime; }
            set { _CreateTime = value; }
        }

        [XmlIgnore]
        [NotColumn]
        private DateTime? _UpdateTime;

        [XmlElement("UpdateTime")]
        [NotColumn]
        public string UpdateTimeString
        {
            get
            {
                if (!_UpdateTime.HasValue)
                {
                    return null;
                }
                else
                {
                    return _UpdateTime.Value.ToString("o");
                }

            }
            set
            {
                this._UpdateTime = DateTime.Parse(value);
            }
        }

        [XmlIgnore]
        [Column, Nullable]
        public DateTime? UpdateTime
        {
            get { return _UpdateTime; }
            set { _UpdateTime = value; }
        }

        //[Column, Nullable]
        //public DateTime? InProcess { get; set; } // datetime
        [XmlIgnore]
        [NotColumn]
        private DateTime? _InProcess;

        [XmlElement("InProcess")]
        [NotColumn]
        public string InProcessString
        {
            get
            {
                if (!_InProcess.HasValue)
                {
                    return null;
                }
                else
                {
                    return _InProcess.ToString();
                }
            }
            set
            {
                DateTime dt;
                if (DateTime.TryParse(value, null, DateTimeStyles.AdjustToUniversal, out dt))
                {
                    this._InProcess = dt;
                }
                else
                {
                    this._InProcess = null;
                }
            }
        }

        [XmlIgnore]
        [Column, Nullable]
        public DateTime? InProcess
        {
            get { return _InProcess; }
            set { _InProcess = value; }
        }

        [Column, NotNull]
        public int AppealCondition { get; set; } // int

        [Column, NotNull]
        public int WorkStation { get; set; } // int

        [Column, Nullable]
        public string AppealComment { get; set; } // xml
    }

    [Table(Schema = "loader", Name = "ac_AppealTasks")]
    public partial class ac_AppealTask
    {
        [Column, NotNull]
        public int REGION { get; set; } // int

        [PrimaryKey, NotNull]
        public Guid AppealTaskID { get; set; } // uniqueidentifier

        [Column, NotNull]
        public Guid AppealFK { get; set; } // uniqueidentifier

        [Column, NotNull]
        public int TaskType { get; set; } // int

        [Column, NotNull]
        public int TaskNumber { get; set; } // int

        [Column, Nullable]
        public string OldValue { get; set; } // varchar(100)

        [Column, Nullable]
        public string NewValue { get; set; } // varchar(100)
    }

    [Table(Schema = "loader", Name = "ac_AppealDecisions")]
    public partial class ac_AppealDecision
    {
        [PrimaryKey(1), NotNull]
        public Guid DecisionID { get; set; } // uniqueidentifier

        [PrimaryKey(2), NotNull]
        public int REGION { get; set; } // int

        [Column, Nullable]
        public Guid AppealID { get; set; } // uniqueidentifier

        [Column, Nullable]
        public Guid SheetFK_R { get; set; } // uniqueidentifier

        [Column, Nullable]
        public int ExamID { get; set; } // int

        [Column, Nullable]
        public Guid ParticipantFK { get; set; } // uniqueidentifier

        [Column, Nullable]
        public bool IsDeleted { get; set; } // bool

        [Column, Nullable]
        public string DecisionNumber { get; set; } // varchar(100)

        [Column, Nullable]
        public string DecisionDate { get; set; } // varchar(100)

        [Column, Nullable]
        public string Responsible { get; set; } // varchar(100)
    }

    [Table(Schema = "loader", Name = "ac_AppealExperts")]
    public partial class ac_AppealExpert
    {
        [PrimaryKey(2), NotNull]
        public int REGION { get; set; } // int

        [PrimaryKey(1), NotNull]
        public Guid AppealID { get; set; } // uniqueidentifier

        [Column, Nullable]
        public string ExpertName { get; set; } // varchar(100)

        [Column, NotNull]
        public Guid ExpertID { get; set; } // uniqueidentifier

        [Column, Nullable]
        public string DecisionNumber { get; set; } // varchar(100)

        [XmlIgnore]
        [NotColumn]
        private DateTime? _DecisionDate;

        [XmlElement("DecisionDate")]
        [NotColumn]
        public string DecisionDateString
        {
            get
            {
                if (!_DecisionDate.HasValue)
                {
                    return null;
                }
                else
                {
                    return _DecisionDate.Value.ToString("o");
                }
            }
            set
            {
                this._DecisionDate = DateTime.Parse(value);
            }
        }

        [XmlIgnore]
        [Column, Nullable]
        public DateTime? DecisionDate
        {
            get { return _DecisionDate; }
            set { _DecisionDate = value; }
        }
    }

    [Table(Schema = "loader", Name = "ac_Changes")]
    public partial class ac_Change
    {
        [PrimaryKey(3), NotNull]
        public int REGION { get; set; } // int

        [PrimaryKey(1), NotNull]
        public Guid ChangeID { get; set; } // uniqueidentifier

        [PrimaryKey(2), NotNull]
        public Guid AppealFK { get; set; } // uniqueidentifier

        [Column, NotNull]
        public int OldPrimaryMark { get; set; } // int

        [Column, NotNull]
        public int OldMark100 { get; set; } // int

        [Column, NotNull]
        public int OldMark5 { get; set; } // int

        [Column, NotNull]
        public int NewPrimaryMark { get; set; } // int

        [Column, NotNull]
        public int NewMark100 { get; set; } // int

        [Column, NotNull]
        public int NewMark5 { get; set; } // int

        [Column, Nullable]
        public byte[] Info { get; set; } // varbinary(256)
    }

    [Table(Schema = "loader", Name = "dats_Borders")]
    public partial class dats_Border
    {
        [Column, NotNull]
        public int REGION { get; set; } // int
        [Column, NotNull]
        public Guid BorderID { get; set; } // uniqueidentifier
        [Column, NotNull]
        public int SubjectCode { get; set; } // int
        [XmlIgnore]
        [NotColumn]
        private Guid? _ScalingGroupFK;

        [XmlElement("ScalingGroupFK")]
        [NotColumn]
        public string ScalingGroupFKString
        {
            get
            {
                if (!_ScalingGroupFK.HasValue)
                {
                    return null;
                }
                else
                {
                    return _ScalingGroupFK.ToString();
                }
            }
            set
            {
                Guid guid;
                if (Guid.TryParse(value, out guid))
                {
                    this._ScalingGroupFK = guid;
                }
                else
                {
                    this._ScalingGroupFK = null;
                }
            }
        }

        [XmlIgnore]
        [Column, Nullable]
        public Guid? ScalingGroupFK
        {
            get { return _ScalingGroupFK; }
            set { _ScalingGroupFK = value; }
        }
        [Column, NotNull]
        public int PrimaryMark { get; set; } // int
        [Column, NotNull]
        public int ScaleMark { get; set; } // int
    }

    [Table(Schema = "loader", Name = "dats_Groups")]
    public partial class dats_Group
    {
        [Column, NotNull]
        public int REGION { get; set; } // int
        [Column, NotNull]
        public Guid ScalingGroupID { get; set; } // uniqueidentifier
        [Column, NotNull]
        public int GroupTypeCode { get; set; } // int
        [Column, NotNull]
        public string GroupName { get; set; } // nvarchar(93)
        [Column, NotNull]
        public int TestTypeCode { get; set; } // int
        [Column, NotNull]
        public int SubjectCode { get; set; } // int
        [Column, NotNull]
        public int ScaleMarkMinimum { get; set; } // int
        [XmlIgnore]
        [NotColumn]
        private int? _GroupMarkMinimum;

        [XmlElement("GroupMarkMinimum")]
        [NotColumn]
        public string GroupMarkMinimumString
        {
            get
            {
                if (!_GroupMarkMinimum.HasValue)
                {
                    return null;
                }
                else
                {
                    return _GroupMarkMinimum.ToString();
                }
            }
            set
            {
                int tni;
                if (int.TryParse(value, out tni))
                {
                    this._GroupMarkMinimum = tni;
                }
                else
                {
                    this._GroupMarkMinimum = null;
                }
            }
        }

        [XmlIgnore]
        [Column, Nullable]
        public int? GroupMarkMinimum
        {
            get { return _GroupMarkMinimum; }
            set { _GroupMarkMinimum = value; }
        }
    }

    [Table(Schema = "loader", Name = "prnf_CertificatePrintMain")]
    public partial class prnf_CertificatePrintMain
    {
        /// <summary>
        /// Êîä ñóáúåêòà ÐÔ
        /// </summary>
        [PrimaryKey(1), NotNull]
        public int REGION { get; set; } // int

        /// <summary>
        /// ID çàïèñè
        /// </summary>
        [PrimaryKey(2), NotNull]
        public Guid CertificatePrintMainID { get; set; } // uniqueidentifier

        [Column, NotNull]
        public Guid ParticipantFK { get; set; } // uniqueidentifier

        /// <summary>
        /// Äàííûå äëÿ ïå÷àòè ñâèäåòåëüñòâà
        /// </summary>
        [Column, Nullable]
        public byte[] CertificateBlob { get; set; } // image

        /// <summary>
        /// Êîä ÀÒÅ, â êîòîðîì íàõîäèòñÿ ÎÓ âûïóñêíèêà
        /// </summary>
        [XmlIgnore]
        [NotColumn]
        private int? _AreaCode;

        [XmlElement("AreaCode")]
        [NotColumn]
        public string AreaCodeString
        {
            get
            {
                if (!_AreaCode.HasValue)
                {
                    return null;
                }
                else
                {
                    return _AreaCode.ToString();
                }
            }
            set
            {
                int tni;
                if (int.TryParse(value, out tni))
                {
                    this._AreaCode = tni;
                }
                else
                {
                    this._AreaCode = null;
                }
            }
        }

        [XmlIgnore]
        [Column, Nullable]
        public int? AreaCode
        {
            get { return _AreaCode; }
            set { _AreaCode = value; }
        }

        /// <summary>
        /// Êîä ÎÓ, â êîòîðîì îáó÷àåòñÿ âûïóñêíèê
        /// </summary>
        [XmlIgnore]
        [NotColumn]
        private int? _SchoolCode;

        [XmlElement("SchoolCode")]
        [NotColumn]
        public string SchoolCodeString
        {
            get
            {
                if (!_SchoolCode.HasValue)
                {
                    return null;
                }
                else
                {
                    return _SchoolCode.ToString();
                }
            }
            set
            {
                int tni;
                if (int.TryParse(value, out tni))
                {
                    this._SchoolCode = tni;
                }
                else
                {
                    this._SchoolCode = null;
                }
            }
        }

        [XmlIgnore]
        [Column, Nullable]
        public int? SchoolCode
        {
            get { return _SchoolCode; }
            set { _SchoolCode = value; }
        }

        /// <summary>
        /// Êîä ïóíêòà, â êîòîðîì ñäàâàë âûïóñêíèê
        /// </summary>
        [Column, Nullable]
        public string Punkt { get; set; } // varchar(50)

        /// <summary>
        /// Êîä ýòàïà
        /// </summary>
        [Column, NotNull]
        public int Wave { get; set; } // int

        /// <summary>
        /// Íîìåð ñâèäåòåëüñòâà
        /// </summary>
        [Column, NotNull]
        public string LicenseNumber { get; set; } // varchar(50)

        /// <summary>
        /// Âðåìÿ ñîçäàíèÿ
        /// </summary>
        [Column, Nullable]
        public string PrintTime { get; set; } // varchar(50)

        /// <summary>
        /// Ôàìèëèÿ
        /// </summary>
        [Column, Nullable]
        public string Surname { get; set; } // varchar(50)

        /// <summary>
        /// Èìÿ
        /// </summary>
        [Column, Nullable]
        public string Name { get; set; } // varchar(50)

        /// <summary>
        /// Îò÷åñòâî
        /// </summary>
        [Column, Nullable]
        public string SecondName { get; set; } // varchar(50)

        /// <summary>
        /// Ñåðèÿ äîêóìåíòà
        /// </summary>
        [Column, Nullable]
        public string DocumentSeries { get; set; } // varchar(50)

        /// <summary>
        /// Íîìåð äîêóìåíòà
        /// </summary>
        [Column, Nullable]
        public string DocumentNumber { get; set; } // varchar(50)

        /// <summary>
        /// Ïîë
        /// </summary>
        [Column, NotNull]
        public bool Sex { get; set; } // bit

        /// <summary>
        /// Ôëàã âûïóñêíèêà ýòîãî ãîäà
        /// </summary>
        [Column, NotNull]
        public bool Graduate { get; set; } // bit

        /// <summary>
        /// Ôëàã äóáëèêàòà
        /// </summary>
        [Column, NotNull]
        public bool LicenseDouble { get; set; } // bit

        /// <summary>
        /// Ðåçåðâíîå ïîëå
        /// </summary>
        [Column, NotNull]
        public string Reserve1 { get; set; } // varchar(255)

        /// <summary>
        /// Ðåçåðâíîå ïîëå
        /// </summary>
        [Column, Nullable]
        public string Reserve2 { get; set; } // varchar(255)

        /// <summary>
        /// Ðåçåðâíîå ïîëå
        /// </summary>
        [Column, Nullable]
        public string Reserve3 { get; set; } // varchar(255)

        /// <summary>
        /// Ðåçåðâíîå ïîëå
        /// </summary>
        [Column, Nullable]
        public string Reserve4 { get; set; } // varchar(255)

        /// <summary>
        /// Ðåçåðâíîå ïîëå
        /// </summary>
        [Column, NotNull]
        public string Reserve5 { get; set; } // varchar(255)
    }

    [Table(Schema = "loader", Name = "rbd_Address")]
    public partial class rbd_Address
    {
        [PrimaryKey, NotNull]
        public Guid AddressID { get; set; } // uniqueidentifier

        [Column, NotNull]
        public int REGION { get; set; } // int

        [Column, NotNull]
        public string ZipCode { get; set; } // varchar(16)

        [Column, NotNull]
        public int LocalityTypeID { get; set; } // int

        [Column, NotNull]
        public string LocalityName { get; set; } // varchar(255)

        [Column, NotNull]
        public int StreetTypeID { get; set; } // int

        [Column, NotNull]
        public string StreetName { get; set; } // varchar(255)

        [Column, NotNull]
        public int BuildingTypeID { get; set; } // int

        [Column, NotNull]
        public string BuildingNumber { get; set; } // varchar(255)

        [Column, NotNull]
        public int TownshipID { get; set; } // int

        [XmlIgnore]
        [NotColumn]
        private DateTime _CreateDate;

        [XmlElement("CreateDate")]
        [NotColumn]
        public string CreateDateString
        {
            get
            {
                return _CreateDate.ToString("o");
            }
            set
            {
                this._CreateDate = DateTime.Parse(value);
            }
        }

        [XmlIgnore]
        [Column, NotNull]
        public DateTime CreateDate
        {
            get { return _CreateDate; }
            set { _CreateDate = value; }
        }

        [XmlIgnore]
        [NotColumn]
        private DateTime _UpdateDate;

        [XmlElement("UpdateDate")]
        [NotColumn]
        public string UpdateDateString
        {
            get
            {
                return _UpdateDate.ToString("o");
            }
            set
            {
                this._UpdateDate = DateTime.Parse(value);
            }
        }

        [XmlIgnore]
        [Column, NotNull]
        public DateTime UpdateDate
        {
            get { return _UpdateDate; }
            set { _UpdateDate = value; }
        }

        [XmlIgnore]
        [NotColumn]
        private DateTime? _ImportCreateDate;

        [XmlElement("ImportCreateDate")]
        [NotColumn]
        public string ImportCreateDateString
        {
            get
            {
                if (!_ImportCreateDate.HasValue)
                {
                    return null;
                }
                else
                {
                    return _ImportCreateDate.Value.ToString("o");
                }
            }
            set
            {
                DateTime dt;
                if (DateTime.TryParse(value, null, DateTimeStyles.AdjustToUniversal, out dt))
                {
                    this._ImportCreateDate = dt;
                }
                else
                {
                    this._ImportCreateDate = null;
                }
            }
        }

        [XmlIgnore]
        [Column, Nullable]
        public DateTime? ImportCreateDate
        {
            get { return _ImportCreateDate; }
            set { _ImportCreateDate = value; }
        }

        [XmlIgnore]
        [NotColumn]
        private DateTime? _ImportUpdateDate;

        [XmlElement("ImportUpdateDate")]
        [NotColumn]
        public string ImportUpdateDateString
        {
            get
            {
                if (!_ImportUpdateDate.HasValue)
                {
                    return null;
                }
                else
                {
                    return _ImportUpdateDate.Value.ToString("o");
                }
            }
            set
            {
                DateTime dt;
                if (DateTime.TryParse(value, null, DateTimeStyles.AdjustToUniversal, out dt))
                {
                    this._ImportUpdateDate = dt;
                }
                else
                {
                    this._ImportUpdateDate = null;
                }
            }
        }

        [XmlIgnore]
        [Column, Nullable]
        public DateTime? ImportUpdateDate
        {
            get { return _ImportUpdateDate; }
            set { _ImportUpdateDate = value; }
        }


        [XmlIgnore]
        [NotColumn]
        private bool? _IsDeleted;

        [XmlElement("IsDeleted")]
        [NotColumn]
        public string IsDeletedString
        {
            get
            {
                if (!_IsDeleted.HasValue)
                {
                    return null;
                }
                else
                {
                    return _IsDeleted.ToString();
                }
            }
            set
            {
                bool val;
                if (bool.TryParse(value, out val))
                {
                    this._IsDeleted = val;
                }
                else
                {
                    this._IsDeleted = null;
                }
            }
        }

        [XmlIgnore]
        [Column, Nullable]
        public bool? IsDeleted
        {
            get { return _IsDeleted; }
            set { _IsDeleted = value; }
        }
    }

    [Table(Schema = "loader", Name = "rbd_Areas")]
    public partial class rbd_Area
    {
        [PrimaryKey(1), NotNull]
        public Guid AreaID { get; set; } // uniqueidentifier

        [PrimaryKey(2), NotNull]
        public int Region { get; set; } // int

        [Column, NotNull]
        public int AreaCode { get; set; } // int

        [Column, NotNull]
        public string AreaName { get; set; } // varchar(255)

        [Column, Nullable]
        public string LawAddress { get; set; } // varchar(255)

        [Column, Nullable]
        public string Address { get; set; } // varchar(255)

        [Column, Nullable]
        public string ChargeFIO { get; set; } // varchar(150)

        [Column, Nullable]
        public string Phones { get; set; } // varchar(80)

        [Column, Nullable]
        public string Mails { get; set; } // varchar(255)

        [Column, Nullable]
        public string WWW { get; set; } // varchar(255)

        [Column, NotNull]
        public bool IsDeleted { get; set; } // bit
    }

    [Table(Schema = "loader", Name = "rbd_Auditoriums")]
    public partial class rbd_Auditorium
    {
        [PrimaryKey(2), NotNull]
        public int REGION { get; set; } // int

        [PrimaryKey(1), NotNull]
        public Guid AuditoriumID { get; set; } // uniqueidentifier

        [Column, NotNull]
        public Guid StationID { get; set; } // uniqueidentifier

        [Column, NotNull]
        public string AuditoriumCode { get; set; } // varchar(4)

        [Column, NotNull]
        public string AuditoriumName { get; set; } // varchar(255)

        [Column, NotNull]
        public int RowsCount { get; set; } // int

        [Column, NotNull]
        public int ColsCount { get; set; } // int

        [Column, NotNull]
        public int OrganizerOrder { get; set; } // int

        [Column, NotNull]
        public int DeleteType { get; set; } // int

        [Column, NotNull]
        public int LimitPotencial { get; set; } // int

        [XmlIgnore]
        [NotColumn]
        private bool? _Imported;

        [XmlElement("Imported")]
        [NotColumn]
        public string ImportedString
        {
            get
            {
                if (!_Imported.HasValue)
                {
                    return null;
                }
                else
                {
                    return _Imported.ToString();
                }
            }
            set
            {
                bool val;
                if (bool.TryParse(value, out val))
                {
                    this._Imported = val;
                }
                else
                {
                    this._Imported = null;
                }
            }
        }

        [XmlIgnore]
        [Column, Nullable]
        public bool? Imported
        {
            get { return _Imported; }
            set { _Imported = value; }
        }

        [XmlIgnore]
        [NotColumn]
        private DateTime _CreateDate;

        [XmlElement("CreateDate")]
        [NotColumn]
        public string CreateDateString
        {
            get
            {
                return _CreateDate.ToString("o");
            }
            set
            {
                this._CreateDate = DateTime.Parse(value);
            }
        }

        [XmlIgnore]
        [Column, NotNull]
        public DateTime CreateDate
        {
            get { return _CreateDate; }
            set { _CreateDate = value; }
        }

        [XmlIgnore]
        [NotColumn]
        private DateTime _UpdateDate;

        [XmlElement("UpdateDate")]
        [NotColumn]
        public string UpdateDateString
        {
            get
            {
                return _UpdateDate.ToString("o");
            }
            set
            {
                this._UpdateDate = DateTime.Parse(value);
            }
        }

        [XmlIgnore]
        [Column, NotNull]
        public DateTime UpdateDate
        {
            get { return _UpdateDate; }
            set { _UpdateDate = value; }
        }




        [XmlIgnore]
        [NotColumn]
        private DateTime? _ImportCreateDate;

        [XmlElement("ImportCreateDate")]
        [NotColumn]
        public string ImportCreateDateString
        {
            get
            {
                if (!_ImportCreateDate.HasValue)
                {
                    return null;
                }
                else
                {
                    return _ImportCreateDate.Value.ToString("o");
                }
            }
            set
            {
                DateTime dt;
                if (DateTime.TryParse(value, null, DateTimeStyles.AdjustToUniversal, out dt))
                {
                    this._ImportCreateDate = dt;
                }
                else
                {
                    this._ImportCreateDate = null;
                }
            }
        }

        [XmlIgnore]
        [Column, Nullable]
        public DateTime? ImportCreateDate
        {
            get { return _ImportCreateDate; }
            set { _ImportCreateDate = value; }
        }

        [XmlIgnore]
        [NotColumn]
        private DateTime? _ImportUpdateDate;

        [XmlElement("ImportUpdateDate")]
        [NotColumn]
        public string ImportUpdateDateString
        {
            get
            {
                if (!_ImportUpdateDate.HasValue)
                {
                    return null;
                }
                else
                {
                    return _ImportUpdateDate.Value.ToString("o");
                }
            }
            set
            {
                DateTime dt;
                if (DateTime.TryParse(value, null, DateTimeStyles.AdjustToUniversal, out dt))
                {
                    this._ImportUpdateDate = dt;
                }
                else
                {
                    this._ImportUpdateDate = null;
                }
            }
        }

        [XmlIgnore]
        [Column, Nullable]
        public DateTime? ImportUpdateDate
        {
            get { return _ImportUpdateDate; }
            set { _ImportUpdateDate = value; }
        }


        [Column, NotNull]
        public int ExamForm { get; set; } // int

        [Column, NotNull]
        public bool VideoControl { get; set; } // bit

        [Column, NotNull]
        public bool IsLab { get; set; } // bit
    }

    [Table(Schema = "loader", Name = "rbd_AuditoriumsSubjects")]
    public partial class rbd_AuditoriumsSubject
    {
        [PrimaryKey(2), NotNull]
        public Guid ID { get; set; } // uniqueidentifier

        [Column, NotNull]
        public int SubjectCode { get; set; } // int

        [Column, NotNull]
        public Guid AuditoriumID { get; set; } // uniqueidentifier

        [PrimaryKey(1), NotNull]
        public int REGION { get; set; } // int


        [XmlIgnore]
        [NotColumn]
        private bool? _IsDeleted;

        [XmlElement("IsDeleted")]
        [NotColumn]
        public string IsDeletedString
        {
            get
            {
                if (!_IsDeleted.HasValue)
                {
                    return null;
                }
                else
                {
                    return _IsDeleted.ToString();
                }
            }
            set
            {
                bool val;
                if (bool.TryParse(value, out val))
                {
                    this._IsDeleted = val;
                }
                else
                {
                    this._IsDeleted = null;
                }
            }
        }

        [XmlIgnore]
        [Column, Nullable]
        public bool? IsDeleted
        {
            get { return _IsDeleted; }
            set { _IsDeleted = value; }
        }
    }

    [Table(Schema = "loader", Name = "rbd_CurrentRegion")]
    public partial class rbd_CurrentRegion
    {
        [PrimaryKey, NotNull]
        public Guid ID { get; set; } // uniqueidentifier

        [Column, NotNull]
        public int REGION { get; set; } // int

        [Column, NotNull]
        public string Name { get; set; } // varchar(255)

        [Column, NotNull]
        public string RCOIName { get; set; } // varchar(255)

        [Column, NotNull]
        public string RCOILawAddress { get; set; } // varchar(max)

        [Column, NotNull]
        public string RCOIAddress { get; set; } // varchar(max)

        [Column, NotNull]
        public string RCOIProperty { get; set; } // varchar(255)

        [Column, NotNull]
        public string RCOIDPosition { get; set; } // varchar(255)

        [Column, NotNull]
        public string RCOIDFio { get; set; } // varchar(255)

        [Column, NotNull]
        public string RCOIPhones { get; set; } // varchar(255)

        [Column, NotNull]
        public string RCOIFaxs { get; set; } // varchar(255)

        [Column, NotNull]
        public string RCOIEMails { get; set; } // varchar(255)

        [Column, Nullable]
        public string GEKAddress { get; set; } // varchar(255)

        [Column, NotNull]
        public string GEKDFio { get; set; } // varchar(255)

        [Column, NotNull]
        public string GEKPhones { get; set; } // varchar(255)

        [Column, NotNull]
        public string GEKFaxs { get; set; } // varchar(255)

        [Column, NotNull]
        public string GEKEMails { get; set; } // varchar(255)

        [Column, NotNull]
        public string EGEWWW { get; set; } // varchar(255)
    }

    [Table(Schema = "loader", Name = "rbd_CurrentRegionAddress")]
    public partial class rbd_CurrentRegionAddress
    {
        [PrimaryKey, NotNull]
        public Guid CurrentRegionAddressID { get; set; } // uniqueidentifier

        [Column, NotNull]
        public int REGION { get; set; } // int

        [Column, NotNull]
        public Guid CurrentRegionID { get; set; } // uniqueidentifier

        [Column, NotNull]
        public Guid AddressID { get; set; } // uniqueidentifier

        [Column, NotNull]
        public int AddressTypeID { get; set; } // int

        [XmlIgnore]
        [NotColumn]
        private int? _AddressKind;

        [XmlElement("AddressKind")]
        [NotColumn]
        public string AddressKindString
        {
            get
            {
                if (!_AddressKind.HasValue)
                {
                    return null;
                }
                else
                {
                    return _AddressKind.ToString();
                }
            }
            set
            {
                int tni;
                if (int.TryParse(value, out tni))
                {
                    this._AddressKind = tni;
                }
                else
                {
                    this._AddressKind = null;
                }
            }
        }

        [XmlIgnore]
        [Column, Nullable]
        public int? AddressKind
        {
            get { return _AddressKind; }
            set { _AddressKind = value; }
        }



        [XmlIgnore]
        [NotColumn]
        private DateTime _CreateDate;

        [XmlElement("CreateDate")]
        [NotColumn]
        public string CreateDateString
        {
            get
            {
                return _CreateDate.ToString("o");
            }
            set
            {
                this._CreateDate = DateTime.Parse(value);
            }
        }

        [XmlIgnore]
        [Column, NotNull]
        public DateTime CreateDate
        {
            get { return _CreateDate; }
            set { _CreateDate = value; }
        }

        [XmlIgnore]
        [NotColumn]
        private DateTime _UpdateDate;

        [XmlElement("UpdateDate")]
        [NotColumn]
        public string UpdateDateString
        {
            get
            {
                return _UpdateDate.ToString("o");
            }
            set
            {
                this._UpdateDate = DateTime.Parse(value);
            }
        }

        [XmlIgnore]
        [Column, NotNull]
        public DateTime UpdateDate
        {
            get { return _UpdateDate; }
            set { _UpdateDate = value; }
        }




        [XmlIgnore]
        [NotColumn]
        private DateTime? _ImportCreateDate;

        [XmlElement("ImportCreateDate")]
        [NotColumn]
        public string ImportCreateDateString
        {
            get
            {
                if (!_ImportCreateDate.HasValue)
                {
                    return null;
                }
                else
                {
                    return _ImportCreateDate.Value.ToString("o");
                }
            }
            set
            {
                DateTime dt;
                if (DateTime.TryParse(value, null, DateTimeStyles.AdjustToUniversal, out dt))
                {
                    this._ImportCreateDate = dt;
                }
                else
                {
                    this._ImportCreateDate = null;
                }
            }
        }

        [XmlIgnore]
        [Column, Nullable]
        public DateTime? ImportCreateDate
        {
            get { return _ImportCreateDate; }
            set { _ImportCreateDate = value; }
        }

        [XmlIgnore]
        [NotColumn]
        private DateTime? _ImportUpdateDate;

        [XmlElement("ImportUpdateDate")]
        [NotColumn]
        public string ImportUpdateDateString
        {
            get
            {
                if (!_ImportUpdateDate.HasValue)
                {
                    return null;
                }
                else
                {
                    return _ImportUpdateDate.Value.ToString("o");
                }
            }
            set
            {
                DateTime dt;
                if (DateTime.TryParse(value, null, DateTimeStyles.AdjustToUniversal, out dt))
                {
                    this._ImportUpdateDate = dt;
                }
                else
                {
                    this._ImportUpdateDate = null;
                }
            }
        }

        [XmlIgnore]
        [Column, Nullable]
        public DateTime? ImportUpdateDate
        {
            get { return _ImportUpdateDate; }
            set { _ImportUpdateDate = value; }
        }

        [XmlIgnore]
        [NotColumn]
        private bool? _IsDeleted;

        [XmlElement("IsDeleted")]
        [NotColumn]
        public string IsDeletedString
        {
            get
            {
                if (!_IsDeleted.HasValue)
                {
                    return null;
                }
                else
                {
                    return _IsDeleted.ToString();
                }
            }
            set
            {
                bool val;
                if (bool.TryParse(value, out val))
                {
                    this._IsDeleted = val;
                }
                else
                {
                    this._IsDeleted = null;
                }
            }
        }

        [XmlIgnore]
        [Column, Nullable]
        public bool? IsDeleted
        {
            get { return _IsDeleted; }
            set { _IsDeleted = value; }
        }
    }

    [Table(Schema = "loader", Name = "rbd_Experts")]
    public partial class rbd_Expert
    {
        [PrimaryKey(1), NotNull]
        public Guid ExpertID { get; set; } // uniqueidentifier

        [PrimaryKey(2), NotNull]
        public int REGION { get; set; } // int

        [Column, NotNull]
        public int ExpertCode { get; set; } // int

        [Column, NotNull]
        public string Surname { get; set; } // varchar(80)

        [Column, NotNull]
        public string Name { get; set; } // varchar(80)

        [Column, Nullable]
        public string SecondName { get; set; } // varchar(80)

        [Column, Nullable]
        public string DocumentSeries { get; set; } // varchar(9)

        [Column, NotNull]
        public string DocumentNumber { get; set; } // varchar(12)

        [Column, NotNull]
        public int DocumentTypeCode { get; set; } // int

        [XmlIgnore]
        [NotColumn]
        private bool? _Sex;

        [XmlElement("Sex")]
        [NotColumn]
        public string SexString
        {
            get
            {
                if (!_Sex.HasValue)
                {
                    return null;
                }
                else
                {
                    return _Sex.ToString();
                }
            }
            set
            {
                bool loob;
                if (bool.TryParse(value, out loob))
                {
                    this._Sex = loob;
                }
                else
                {
                    this._Sex = null;
                }
            }
        }

        [XmlIgnore]
        [Column, Nullable]
        public bool? Sex
        {
            get { return _Sex; }
            set { _Sex = value; }
        }

        [XmlIgnore]
        [NotColumn]
        private int? _EduTypeFK;

        [XmlElement("EduTypeFK")]
        [NotColumn]
        public string EduTypeFKString
        {
            get
            {
                if (!_EduTypeFK.HasValue)
                {
                    return null;
                }
                else
                {
                    return _EduTypeFK.ToString();
                }
            }
            set
            {
                int val;
                if (int.TryParse(value, out val))
                {
                    this._EduTypeFK = val;
                }
                else
                {
                    this._EduTypeFK = null;
                }
            }
        }

        [XmlIgnore]
        [Column, Nullable]
        public int? EduTypeFK
        {
            get { return _EduTypeFK; }
            set { _EduTypeFK = value; }
        }

        [XmlIgnore]
        [NotColumn]
        private int? _EduKindFK;

        [XmlElement("EduKindFK")]
        [NotColumn]
        public string EduKindFKString
        {
            get
            {
                if (!_EduKindFK.HasValue)
                {
                    return null;
                }
                else
                {
                    return _EduKindFK.ToString();
                }
            }
            set
            {
                int val;
                if (int.TryParse(value, out val))
                {
                    this._EduKindFK = val;
                }
                else
                {
                    this._EduKindFK = null;
                }
            }
        }

        [XmlIgnore]
        [Column, Nullable]
        public int? EduKindFK
        {
            get { return _EduKindFK; }
            set { _EduKindFK = value; }
        }

        [Column, NotNull]
        public int Seniority { get; set; } // int

        [Column, NotNull]
        public int PrecedingYear { get; set; } // int

        [Column, NotNull]
        public string BirthYear { get; set; } // varchar(50)

        [Column, NotNull]
        public bool IsDeleted { get; set; } // bit

        [Column, NotNull]
        public string Positions { get; set; } // varchar(255)

        [XmlIgnore]
        [NotColumn]
        private Guid? _SchoolID;

        [XmlElement("SchoolID")]
        [NotColumn]
        public string SchoolIDString
        {
            get
            {
                if (!_SchoolID.HasValue)
                {
                    return null;
                }
                else
                {
                    return _SchoolID.ToString();
                }
            }
            set
            {
                Guid guid;
                if (Guid.TryParse(value, out guid))
                {
                    this._SchoolID = guid;
                }
                else
                {
                    this._SchoolID = null;
                }
            }
        }

        [XmlIgnore]
        [Column, Nullable]
        public Guid? SchoolID
        {
            get { return _SchoolID; }
            set { _SchoolID = value; }
        }

        [Column, Nullable]
        public string NotSchoolJob { get; set; } // varchar(255)

        [Column, NotNull]
        public bool ThirdVerifyAcc { get; set; } // bit



        [XmlIgnore]
        [NotColumn]
        private DateTime _CreateDate;

        [XmlElement("CreateDate")]
        [NotColumn]
        public string CreateDateString
        {
            get
            {
                return _CreateDate.ToString("o");
            }
            set
            {
                this._CreateDate = DateTime.Parse(value);
            }
        }

        [XmlIgnore]
        [Column, NotNull]
        public DateTime CreateDate
        {
            get { return _CreateDate; }
            set { _CreateDate = value; }
        }

        [XmlIgnore]
        [NotColumn]
        private DateTime _UpdateDate;

        [XmlElement("UpdateDate")]
        [NotColumn]
        public string UpdateDateString
        {
            get
            {
                return _UpdateDate.ToString("o");
            }
            set
            {
                this._UpdateDate = DateTime.Parse(value);
            }
        }

        [XmlIgnore]
        [Column, NotNull]
        public DateTime UpdateDate
        {
            get { return _UpdateDate; }
            set { _UpdateDate = value; }
        }




        [XmlIgnore]
        [NotColumn]
        private DateTime? _ImportCreateDate;

        [XmlElement("ImportCreateDate")]
        [NotColumn]
        public string ImportCreateDateString
        {
            get
            {
                if (!_ImportCreateDate.HasValue)
                {
                    return null;
                }
                else
                {
                    return _ImportCreateDate.Value.ToString("o");
                }
            }
            set
            {
                DateTime dt;
                if (DateTime.TryParse(value, null, DateTimeStyles.AdjustToUniversal, out dt))
                {
                    this._ImportCreateDate = dt;
                }
                else
                {
                    this._ImportCreateDate = null;
                }
            }
        }

        [XmlIgnore]
        [Column, Nullable]
        public DateTime? ImportCreateDate
        {
            get { return _ImportCreateDate; }
            set { _ImportCreateDate = value; }
        }

        [XmlIgnore]
        [NotColumn]
        private DateTime? _ImportUpdateDate;

        [XmlElement("ImportUpdateDate")]
        [NotColumn]
        public string ImportUpdateDateString
        {
            get
            {
                if (!_ImportUpdateDate.HasValue)
                {
                    return null;
                }
                else
                {
                    return _ImportUpdateDate.Value.ToString("o");
                }
            }
            set
            {
                DateTime dt;
                if (DateTime.TryParse(value, null, DateTimeStyles.AdjustToUniversal, out dt))
                {
                    this._ImportUpdateDate = dt;
                }
                else
                {
                    this._ImportUpdateDate = null;
                }
            }
        }

        [XmlIgnore]
        [Column, Nullable]
        public DateTime? ImportUpdateDate
        {
            get { return _ImportUpdateDate; }
            set { _ImportUpdateDate = value; }
        }


        [XmlIgnore]
        [NotColumn]
        private Guid? _GovernmentID;

        [XmlElement("GovernmentID")]
        [NotColumn]
        public string GovernmentIDString
        {
            get
            {
                if (!_GovernmentID.HasValue)
                {
                    return null;
                }
                else
                {
                    return _GovernmentID.ToString();
                }
            }
            set
            {
                Guid guid;
                if (Guid.TryParse(value, out guid))
                {
                    this._GovernmentID = guid;
                }
                else
                {
                    this._GovernmentID = null;
                }
            }
        }

        [XmlIgnore]
        [Column, Nullable]
        public Guid? GovernmentID
        {
            get { return _GovernmentID; }
            set { _GovernmentID = value; }
        }

        [Column, NotNull]
        public bool InConflictCommission { get; set; } // bit

        [Column, Nullable]
        public string Qualification { get; set; } // varchar(255)

        [Column, NotNull]
        public int ExpertCategoryID { get; set; } // int

        [Column, Nullable]
        public string Snils { get; set; } // varchar(20)

        [Column, Nullable]
        public string Phones { get; set; } // varchar(255)

        [Column, Nullable]
        public string Mails { get; set; } // varchar(255)
    }

    [Table(Schema = "loader", Name = "rbd_ExpertsExams")]
    public partial class rbd_ExpertsExam
    {
        [PrimaryKey(1), NotNull]
        public int REGION { get; set; } // int

        [PrimaryKey(2), NotNull]
        public Guid ID { get; set; } // uniqueidentifier

        [Column, NotNull]
        public Guid ExpertID { get; set; } // uniqueidentifier

        [Column, NotNull]
        public int ExamGlobalID { get; set; } // int

        [XmlIgnore]
        [NotColumn]
        private DateTime _CreateDate;

        [XmlElement("CreateDate")]
        [NotColumn]
        public string CreateDateString
        {
            get
            {
                return _CreateDate.ToString("o");
            }
            set
            {
                DateTime dt;
                if (DateTime.TryParse(value, null, DateTimeStyles.AdjustToUniversal, out dt))
                {
                    this._CreateDate = dt;
                }
                else
                {
                    throw new DateTimeException(string.Format("Wrong date: {0}", value));
                }
            }
        }

        [XmlIgnore]
        [Column, NotNull]
        public DateTime CreateDate
        {
            get { return _CreateDate; }
            set { _CreateDate = value; }
        }

        [XmlIgnore]
        [NotColumn]
        private DateTime _UpdateDate;

        [XmlElement("UpdateDate")]
        [NotColumn]
        public string UpdateDateString
        {
            get
            {
                return _UpdateDate.ToString("o");
            }
            set
            {
                DateTime dt;
                if (DateTime.TryParse(value, null, DateTimeStyles.AdjustToUniversal, out dt))
                {
                    this._UpdateDate = dt;
                }
                else
                {
                    throw new DateTimeException(string.Format("Wrong date: {0}", value));
                }
            }
        }

        [XmlIgnore]
        [Column, NotNull]
        public DateTime UpdateDate
        {
            get { return _UpdateDate; }
            set { _UpdateDate = value; }
        }

        [XmlIgnore]
        [NotColumn]
        private DateTime? _ImportCreateDate;

        [XmlElement("ImportCreateDate")]
        [NotColumn]
        public string ImportCreateDateString
        {
            get
            {
                if (!_ImportCreateDate.HasValue)
                {
                    return null;
                }
                else
                {
                    return _ImportCreateDate.Value.ToString("o");
                }
            }
            set
            {
                DateTime dt;
                if (DateTime.TryParse(value, null, DateTimeStyles.AdjustToUniversal, out dt))
                {
                    this._ImportCreateDate = dt;
                }
                else
                {
                    this._ImportCreateDate = null;
                }
            }
        }

        [XmlIgnore]
        [Column, Nullable]
        public DateTime? ImportCreateDate
        {
            get { return _ImportCreateDate; }
            set { _ImportCreateDate = value; }
        }

        [XmlIgnore]
        [NotColumn]
        private DateTime? _ImportUpdateDate;

        [XmlElement("ImportUpdateDate")]
        [NotColumn]
        public string ImportUpdateDateString
        {
            get
            {
                if (!_ImportUpdateDate.HasValue)
                {
                    return null;
                }
                else
                {
                    return _ImportUpdateDate.Value.ToString("o");
                }
            }
            set
            {
                DateTime dt;
                if (DateTime.TryParse(value, null, DateTimeStyles.AdjustToUniversal, out dt))
                {
                    this._ImportUpdateDate = dt;
                }
                else
                {
                    this._ImportUpdateDate = null;
                }
            }
        }

        [XmlIgnore]
        [Column, Nullable]
        public DateTime? ImportUpdateDate
        {
            get { return _ImportUpdateDate; }
            set { _ImportUpdateDate = value; }
        }

        [XmlIgnore]
        [NotColumn]
        private bool? _IsDeleted;

        [XmlElement("IsDeleted")]
        [NotColumn]
        public string IsDeletedString
        {
            get
            {
                if (!_IsDeleted.HasValue)
                {
                    return null;
                }
                else
                {
                    return _IsDeleted.ToString();
                }
            }
            set
            {
                bool val;
                if (bool.TryParse(value, out val))
                {
                    this._IsDeleted = val;
                }
                else
                {
                    this._IsDeleted = null;
                }
            }
        }

        [XmlIgnore]
        [Column, Nullable]
        public bool? IsDeleted
        {
            get { return _IsDeleted; }
            set { _IsDeleted = value; }
        }

        [XmlIgnore]
        [NotColumn]
        private Guid? _StationsExamsID;

        [XmlElement("StationsExamsID")]
        [NotColumn]
        public string StationsExamsIDString
        {
            get
            {
                if (!_StationsExamsID.HasValue)
                {
                    return null;
                }
                else
                {
                    return _StationsExamsID.ToString();
                }
            }
            set
            {
                Guid guid;
                if (Guid.TryParse(value, out guid))
                {
                    this._StationsExamsID = guid;
                }
                else
                {
                    this._StationsExamsID = null;
                }
            }
        }

        [XmlIgnore]
        [Column, Nullable]
        public Guid? StationsExamsID
        {
            get { return _StationsExamsID; }
            set { _StationsExamsID = value; }
        }

        [Column, NotNull]
        public int CheckFormOnExam { get; set; } // int
    }

    [Table(Schema = "loader", Name = "rbd_ExpertsSubjects")]
    public partial class rbd_ExpertsSubject
    {
        [PrimaryKey(1), NotNull]
        public int REGION { get; set; } // int

        [PrimaryKey(2), NotNull]
        public Guid ID { get; set; } // uniqueidentifier

        [Column, NotNull]
        public Guid ExpertID { get; set; } // uniqueidentifier

        [Column, NotNull]
        public int SubjectCode { get; set; } // int

        [XmlIgnore]
        [NotColumn]
        private bool? _IsDeleted;

        [XmlElement("IsDeleted")]
        [NotColumn]
        public string IsDeletedString
        {
            get
            {
                if (!_IsDeleted.HasValue)
                {
                    return null;
                }
                else
                {
                    return _IsDeleted.ToString();
                }
            }
            set
            {
                bool val;
                if (bool.TryParse(value, out val))
                {
                    this._IsDeleted = val;
                }
                else
                {
                    this._IsDeleted = null;
                }
            }
        }

        [XmlIgnore]
        [Column, Nullable]
        public bool? IsDeleted
        {
            get { return _IsDeleted; }
            set { _IsDeleted = value; }
        }

        [Column, NotNull]
        public int CheckForm { get; set; } // int

        [Column, NotNull]
        public int ExpertCategoryID { get; set; } // int

        [Column, NotNull]
        public bool ThirdVerifyAcc { get; set; } // bit

        [Column, NotNull]
        public bool InConflictCommission { get; set; } // bit
    }

    [Table(Schema = "loader", Name = "rbd_Governments")]
    public partial class rbd_Government
    {
        [PrimaryKey(1), NotNull]
        public Guid GovernmentID { get; set; } // uniqueidentifier

        [Column, NotNull]
        public Guid RegionID { get; set; } // uniqueidentifier

        [PrimaryKey(2), NotNull]
        public int REGION { get; set; } // int

        [Column, NotNull]
        public int GovernmentCode { get; set; } // int

        [Column, NotNull]
        public string GovernmentName { get; set; } // varchar(255)

        [Column, NotNull]
        public string LawAddress { get; set; } // varchar(255)

        [Column, Nullable]
        public string Address { get; set; } // varchar(255)

        [Column, NotNull]
        public string ChargeFIO { get; set; } // varchar(150)

        [Column, NotNull]
        public string Phones { get; set; } // varchar(80)

        [Column, NotNull]
        public string Mails { get; set; } // varchar(80)

        [Column, Nullable]
        public string WWW { get; set; } // varchar(255)

        [Column, NotNull]
        public string ChargePosition { get; set; } // varchar(150)

        [Column, NotNull]
        public string Faxes { get; set; } // varchar(80)

        [Column, NotNull]
        public int GType { get; set; } // int

        [Column, NotNull]
        public string SpecialistFIO { get; set; } // varchar(150)

        [Column, Nullable]
        public string SpecialistMails { get; set; } // varchar(80)

        [Column, NotNull]
        public string SpecialistPhones { get; set; } // varchar(255)

        [Column, NotNull]
        public int DeleteType { get; set; } // int



        [XmlIgnore]
        [NotColumn]
        private DateTime _CreateDate;

        [XmlElement("CreateDate")]
        [NotColumn]
        public string CreateDateString
        {
            get
            {
                return _CreateDate.ToString("o");
            }
            set
            {
                this._CreateDate = DateTime.Parse(value);
            }
        }

        [XmlIgnore]
        [Column, NotNull]
        public DateTime CreateDate
        {
            get { return _CreateDate; }
            set { _CreateDate = value; }
        }

        [XmlIgnore]
        [NotColumn]
        private DateTime _UpdateDate;

        [XmlElement("UpdateDate")]
        [NotColumn]
        public string UpdateDateString
        {
            get
            {
                return _UpdateDate.ToString("o");
            }
            set
            {
                this._UpdateDate = DateTime.Parse(value);
            }
        }

        [XmlIgnore]
        [Column, NotNull]
        public DateTime UpdateDate
        {
            get { return _UpdateDate; }
            set { _UpdateDate = value; }
        }

        [XmlIgnore]
        [NotColumn]
        private DateTime? _ImportCreateDate;

        [XmlElement("ImportCreateDate")]
        [NotColumn]
        public string ImportCreateDateString
        {
            get
            {
                if (!_ImportCreateDate.HasValue)
                {
                    return null;
                }
                else
                {
                    return _ImportCreateDate.Value.ToString("o");
                }
            }
            set
            {
                DateTime dt;
                if (DateTime.TryParse(value, null, DateTimeStyles.AdjustToUniversal, out dt))
                {
                    this._ImportCreateDate = dt;
                }
                else
                {
                    this._ImportCreateDate = null;
                }
            }
        }

        [XmlIgnore]
        [Column, Nullable]
        public DateTime? ImportCreateDate
        {
            get { return _ImportCreateDate; }
            set { _ImportCreateDate = value; }
        }

        [XmlIgnore]
        [NotColumn]
        private DateTime? _ImportUpdateDate;

        [XmlElement("ImportUpdateDate")]
        [NotColumn]
        public string ImportUpdateDateString
        {
            get
            {
                if (!_ImportUpdateDate.HasValue)
                {
                    return null;
                }
                else
                {
                    return _ImportUpdateDate.Value.ToString("o");
                }
            }
            set
            {
                DateTime dt;
                if (DateTime.TryParse(value, null, DateTimeStyles.AdjustToUniversal, out dt))
                {
                    this._ImportUpdateDate = dt;
                }
                else
                {
                    this._ImportUpdateDate = null;
                }
            }
        }

        [XmlIgnore]
        [Column, Nullable]
        public DateTime? ImportUpdateDate
        {
            get { return _ImportUpdateDate; }
            set { _ImportUpdateDate = value; }
        }

        [XmlIgnore]
        [NotColumn]
        private int? _TimeZoneId;

        [XmlElement("TimeZoneId")]
        [NotColumn]
        public string TimeZoneIdString
        {
            get
            {
                if (!_TimeZoneId.HasValue)
                {
                    return null;
                }
                else
                {
                    return _TimeZoneId.ToString();
                }
            }
            set
            {
                int val;
                if (int.TryParse(value, out val))
                {
                    this._TimeZoneId = val;
                }
                else
                {
                    this._TimeZoneId = null;
                }
            }
        }

        [XmlIgnore]
        [Column, Nullable]
        public int? TimeZoneId
        {
            get { return _TimeZoneId; }
            set { _TimeZoneId = value; }
        }
    }

    [Table(Schema = "loader", Name = "rbd_Participants")]
    public partial class rbd_Participant
    {
        [PrimaryKey(1), NotNull]
        public Guid ParticipantID { get; set; } // uniqueidentifier

        [PrimaryKey(2), NotNull]
        public int Region { get; set; } // int

        [Column, Nullable]
        public string ParticipantCode { get; set; } // varchar(16)

        [Column, NotNull]
        public string Surname { get; set; } // varchar(80)

        [Column, NotNull]
        public string Name { get; set; } // varchar(80)

        [Column, Nullable]
        public string SecondName { get; set; } // varchar(80)

        [Column, Nullable]
        public string DocumentSeries { get; set; } // varchar(9)

        [Column, NotNull]
        public string DocumentNumber { get; set; } // varchar(12)

        [Column, NotNull]
        public int DocumentTypeCode { get; set; } // int

        [Column, NotNull]
        public bool Sex { get; set; } // bit

        [Column, NotNull]
        public int Gia { get; set; } // int

        [Column, NotNull]
        public int GiaAccept { get; set; } // int

        [Column, Nullable]
        public string pClass { get; set; } // varchar(50)

        [XmlIgnore]
        [NotColumn]
        private DateTime _BirthDay;

        [XmlElement("BirthDay")]
        [NotColumn]
        public string BirthDayString
        {
            get
            {
                return _BirthDay.ToString("o");
            }
            set
            {
                this._BirthDay = DateTime.Parse(value);
            }
        }

        [XmlIgnore]
        [Column, NotNull]
        public DateTime BirthDay
        {
            get { return _BirthDay; }
            set { _BirthDay = value; }
        }

        [Column, Nullable]
        public string Reserve1 { get; set; } // varchar(255)

        [Column, Nullable]
        public string Reserve2 { get; set; } // varchar(255)

        [Column, NotNull]
        public int DeleteType { get; set; } // int

        [Column, NotNull]
        public int LimitPotencial { get; set; } // int

        [XmlIgnore]
        [NotColumn]
        private Guid? _ParticipantDouble;

        [XmlElement("ParticipantDouble")]
        [NotColumn]
        public string ParticipantDoubleString
        {
            get
            {
                if (!_ParticipantDouble.HasValue)
                {
                    return null;
                }
                else
                {
                    return _ParticipantDouble.ToString();
                }
            }
            set
            {
                Guid guid;
                if (Guid.TryParse(value, out guid))
                {
                    this._ParticipantDouble = guid;
                }
                else
                {
                    this._ParticipantDouble = null;
                }
            }
        }

        [XmlIgnore]
        [Column, Nullable]
        public Guid? ParticipantDouble
        {
            get { return _ParticipantDouble; }
            set { _ParticipantDouble = value; }
        }

        [XmlIgnore]
        [NotColumn]
        private int? _FinishRegion;

        [XmlElement("FinishRegion")]
        [NotColumn]
        public string FinishRegionString
        {
            get
            {
                if (!_FinishRegion.HasValue)
                {
                    return null;
                }
                else
                {
                    return _FinishRegion.ToString();
                }
            }
            set
            {
                int val;
                if (int.TryParse(value, out val))
                {
                    this._FinishRegion = val;
                }
                else
                {
                    this._FinishRegion = null;
                }
            }
        }

        [XmlIgnore]
        [Column, Nullable]
        public int? FinishRegion
        {
            get { return _FinishRegion; }
            set { _FinishRegion = value; }
        }

        [Column, NotNull]
        public int ParticipantCategoryFK { get; set; } // int

        [Column, NotNull]
        public Guid SchoolRegistration { get; set; } // uniqueidentifier

        [XmlIgnore]
        [NotColumn]
        private Guid? _SchoolOutcoming;

        [XmlElement("SchoolOutcoming")]
        [NotColumn]
        public string SchoolOutcomingString
        {
            get
            {
                if (!_SchoolOutcoming.HasValue)
                {
                    return null;
                }
                else
                {
                    return _SchoolOutcoming.ToString();
                }
            }
            set
            {
                Guid guid;
                if (Guid.TryParse(value, out guid))
                {
                    this._SchoolOutcoming = guid;
                }
                else
                {
                    this._SchoolOutcoming = null;
                }
            }
        }

        [XmlIgnore]
        [Column, Nullable]
        public Guid? SchoolOutcoming
        {
            get { return _SchoolOutcoming; }
            set { _SchoolOutcoming = value; }
        }

        [Column, NotNull]
        public int Study { get; set; } // int

        [XmlIgnore]
        [NotColumn]
        private DateTime _CreateDate;

        [XmlElement("CreateDate")]
        [NotColumn]
        public string CreateDateString
        {
            get
            {
                return _CreateDate.ToString("o");
            }
            set
            {
                this._CreateDate = DateTime.Parse(value);
            }
        }

        [XmlIgnore]
        [Column, NotNull]
        public DateTime CreateDate
        {
            get { return _CreateDate; }
            set { _CreateDate = value; }
        }

        [XmlIgnore]
        [NotColumn]
        private DateTime _UpdateDate;

        [XmlElement("UpdateDate")]
        [NotColumn]
        public string UpdateDateString
        {
            get
            {
                return _UpdateDate.ToString("o");
            }
            set
            {
                this._UpdateDate = DateTime.Parse(value);
            }
        }

        [XmlIgnore]
        [Column, NotNull]
        public DateTime UpdateDate
        {
            get { return _UpdateDate; }
            set { _UpdateDate = value; }
        }

        [XmlIgnore]
        [NotColumn]
        private DateTime? _ImportCreateDate;

        [XmlElement("ImportCreateDate")]
        [NotColumn]
        public string ImportCreateDateString
        {
            get
            {
                if (!_ImportCreateDate.HasValue)
                {
                    return null;
                }
                else
                {
                    return _ImportCreateDate.Value.ToString("o");
                }
            }
            set
            {
                DateTime dt;
                if (DateTime.TryParse(value, null, DateTimeStyles.AdjustToUniversal, out dt))
                {
                    this._ImportCreateDate = dt;
                }
                else
                {
                    this._ImportCreateDate = null;
                }
            }
        }

        [XmlIgnore]
        [Column, Nullable]
        public DateTime? ImportCreateDate
        {
            get { return _ImportCreateDate; }
            set { _ImportCreateDate = value; }
        }

        [XmlIgnore]
        [NotColumn]
        private DateTime? _ImportUpdateDate;

        [XmlElement("ImportUpdateDate")]
        [NotColumn]
        public string ImportUpdateDateString
        {
            get
            {
                if (!_ImportUpdateDate.HasValue)
                {
                    return null;
                }
                else
                {
                    return _ImportUpdateDate.Value.ToString("o");
                }
            }
            set
            {
                DateTime dt;
                if (DateTime.TryParse(value, null, DateTimeStyles.AdjustToUniversal, out dt))
                {
                    this._ImportUpdateDate = dt;
                }
                else
                {
                    this._ImportUpdateDate = null;
                }
            }
        }

        [XmlIgnore]
        [Column, Nullable]
        public DateTime? ImportUpdateDate
        {
            get { return _ImportUpdateDate; }
            set { _ImportUpdateDate = value; }
        }


        [Column, NotNull]
        public int CitizenshipID { get; set; } // int

        [Column, Nullable]
        public string SchoolOutcomingName { get; set; } // varchar(255)

        [XmlIgnore]
        [NotColumn]
        private Guid? _SchoolClassID;

        [XmlElement("SchoolClassID")]
        [NotColumn]
        public string SchoolClassIDString
        {
            get
            {
                if (!_SchoolClassID.HasValue)
                {
                    return null;
                }
                else
                {
                    return _SchoolClassID.ToString();
                }
            }
            set
            {
                Guid guid;
                if (Guid.TryParse(value, out guid))
                {
                    this._SchoolClassID = guid;
                }
                else
                {
                    this._SchoolClassID = null;
                }
            }
        }

        [Column, Nullable]
        public string Phones { get; set; } // varchar(255)

        [Column, Nullable]
        public string Snils { get; set; } // varchar(20)
    }

    [Table(Schema = "loader", Name = "rbd_ParticipantProperties")]
    public partial class rbd_ParticipantProperty
    {
        [PrimaryKey(2), NotNull]
        public Guid PropertyId { get; set; } // uniqueidentifier

        [Column, NotNull]
        public Guid ParticipantId { get; set; } // uniqueidentifier

        [Column, NotNull]
        public int Property { get; set; } // int

        [Column, Nullable]
        public string PValue { get; set; } // varchar(255)

        [PrimaryKey(1), NotNull]
        public int Region { get; set; } // int

        [XmlIgnore]
        [NotColumn]
        private bool? _IsDeleted;

        [XmlElement("IsDeleted")]
        [NotColumn]
        public string IsDeletedString
        {
            get
            {
                if (!_IsDeleted.HasValue)
                {
                    return null;
                }
                else
                {
                    return _IsDeleted.ToString();
                }
            }
            set
            {
                bool val;
                if (bool.TryParse(value, out val))
                {
                    this._IsDeleted = val;
                }
                else
                {
                    this._IsDeleted = null;
                }
            }
        }

        [XmlIgnore]
        [Column, Nullable]
        public bool? IsDeleted
        {
            get { return _IsDeleted; }
            set { _IsDeleted = value; }
        }
    }

    [Table(Schema = "loader", Name = "rbd_ParticipantsExams")]
    public partial class rbd_ParticipantsExam
    {
        [Column, NotNull]
        public int REGION { get; set; } // int

        [Column, NotNull]
        public Guid ParticipantID { get; set; } // uniqueidentifier

        [Column, NotNull]
        public int ExamGlobalID { get; set; } // int

        [PrimaryKey, NotNull]
        public Guid ParticipantsExamsID { get; set; } // uniqueidentifier



        [XmlIgnore]
        [NotColumn]
        private DateTime _CreateDate;

        [XmlElement("CreateDate")]
        [NotColumn]
        public string CreateDateString
        {
            get
            {
                return _CreateDate.ToString("o");
            }
            set
            {
                this._CreateDate = DateTime.Parse(value);
            }
        }

        [XmlIgnore]
        [Column, NotNull]
        public DateTime CreateDate
        {
            get { return _CreateDate; }
            set { _CreateDate = value; }
        }

        [XmlIgnore]
        [NotColumn]
        private DateTime _UpdateDate;

        [XmlElement("UpdateDate")]
        [NotColumn]
        public string UpdateDateString
        {
            get
            {
                return _UpdateDate.ToString("o");
            }
            set
            {
                this._UpdateDate = DateTime.Parse(value);
            }
        }

        [XmlIgnore]
        [Column, NotNull]
        public DateTime UpdateDate
        {
            get { return _UpdateDate; }
            set { _UpdateDate = value; }
        }




        [XmlIgnore]
        [NotColumn]
        private DateTime? _ImportCreateDate;

        [XmlElement("ImportCreateDate")]
        [NotColumn]
        public string ImportCreateDateString
        {
            get
            {
                if (!_ImportCreateDate.HasValue)
                {
                    return null;
                }
                else
                {
                    return _ImportCreateDate.Value.ToString("o");
                }
            }
            set
            {
                DateTime dt;
                if (DateTime.TryParse(value, null, DateTimeStyles.AdjustToUniversal, out dt))
                {
                    this._ImportCreateDate = dt;
                }
                else
                {
                    this._ImportCreateDate = null;
                }
            }
        }

        [XmlIgnore]
        [Column, Nullable]
        public DateTime? ImportCreateDate
        {
            get { return _ImportCreateDate; }
            set { _ImportCreateDate = value; }
        }

        [XmlIgnore]
        [NotColumn]
        private DateTime? _ImportUpdateDate;

        [XmlElement("ImportUpdateDate")]
        [NotColumn]
        public string ImportUpdateDateString
        {
            get
            {
                if (!_ImportUpdateDate.HasValue)
                {
                    return null;
                }
                else
                {
                    return _ImportUpdateDate.Value.ToString("o");
                }
            }
            set
            {
                DateTime dt;
                if (DateTime.TryParse(value, null, DateTimeStyles.AdjustToUniversal, out dt))
                {
                    this._ImportUpdateDate = dt;
                }
                else
                {
                    this._ImportUpdateDate = null;
                }
            }
        }

        [XmlIgnore]
        [Column, Nullable]
        public DateTime? ImportUpdateDate
        {
            get { return _ImportUpdateDate; }
            set { _ImportUpdateDate = value; }
        }

        [XmlIgnore]
        [NotColumn]
        private bool? _IsDeleted;

        [XmlElement("IsDeleted")]
        [NotColumn]
        public string IsDeletedString
        {
            get
            {
                if (!_IsDeleted.HasValue)
                {
                    return null;
                }
                else
                {
                    return _IsDeleted.ToString();
                }
            }
            set
            {
                bool val;
                if (bool.TryParse(value, out val))
                {
                    this._IsDeleted = val;
                }
                else
                {
                    this._IsDeleted = null;
                }
            }
        }

        [XmlIgnore]
        [Column, Nullable]
        public bool? IsDeleted
        {
            get { return _IsDeleted; }
            set { _IsDeleted = value; }
        }

        [Column, Nullable]
        public int? ExamFormatCode { get; set; } // int
    }

    [Table(Schema = "loader", Name = "rbd_ParticipantsExamPStation")]
    public partial class rbd_ParticipantsExamPStation
    {
        [PrimaryKey(1), NotNull]
        public Guid PExamPlacesOnStationID { get; set; } // uniqueidentifier

        [Column, NotNull]
        public Guid PlacesID { get; set; } // uniqueidentifier

        [Column, NotNull]
        public Guid AuditoriumID { get; set; } // uniqueidentifier

        [Column, NotNull]
        public Guid StationExamAuditoryID { get; set; } // uniqueidentifier

        [Column, NotNull]
        public Guid StationsExamsID { get; set; } // uniqueidentifier

        [Column, NotNull]
        public Guid ParticipantsExamsOnStationID { get; set; } // uniqueidentifier

        [PrimaryKey(2), NotNull]
        public int Region { get; set; } // int

        [XmlIgnore]
        [NotColumn]
        private bool? _IsManual;

        [XmlElement("IsManual")]
        [NotColumn]
        public string IsManualString
        {
            get
            {
                if (!_IsManual.HasValue)
                {
                    return null;
                }
                else
                {
                    return _IsManual.ToString();
                }
            }
            set
            {
                bool val;
                if (bool.TryParse(value, out val))
                {
                    this._IsManual = val;
                }
                else
                {
                    this._IsManual = null;
                }
            }
        }

        [XmlIgnore]
        [Column, Nullable]
        public bool? IsManual
        {
            get { return _IsManual; }
            set { _IsManual = value; }
        }

        [XmlIgnore]
        [NotColumn]
        private bool? _IsDeleted;

        [XmlElement("IsDeleted")]
        [NotColumn]
        public string IsDeletedString
        {
            get
            {
                if (!_IsDeleted.HasValue)
                {
                    return null;
                }
                else
                {
                    return _IsDeleted.ToString();
                }
            }
            set
            {
                bool val;
                if (bool.TryParse(value, out val))
                {
                    this._IsDeleted = val;
                }
                else
                {
                    this._IsDeleted = null;
                }
            }
        }

        [XmlIgnore]
        [Column, Nullable]
        public bool? IsDeleted
        {
            get { return _IsDeleted; }
            set { _IsDeleted = value; }
        }
    }

    [Table(Schema = "loader", Name = "rbd_ParticipantsExamsOnStation")]
    public partial class rbd_ParticipantsExamsOnStation
    {
        [PrimaryKey(1), NotNull]
        public Guid ParticipantsExamsOnStationID { get; set; } // uniqueidentifier

        [Column, NotNull]
        public int ExamGlobalID { get; set; } // int

        [Column, NotNull]
        public Guid ParticipantsExamsID { get; set; } // uniqueidentifier

        [Column, NotNull]
        public Guid StationsExamsID { get; set; } // uniqueidentifier

        [PrimaryKey(2), NotNull]
        public int Region { get; set; } // int



        [XmlIgnore]
        [NotColumn]
        private DateTime _CreateDate;

        [XmlElement("CreateDate")]
        [NotColumn]
        public string CreateDateString
        {
            get
            {
                return _CreateDate.ToString("o");
            }
            set
            {
                this._CreateDate = DateTime.Parse(value);
            }
        }

        [XmlIgnore]
        [Column, NotNull]
        public DateTime CreateDate
        {
            get { return _CreateDate; }
            set { _CreateDate = value; }
        }

        [XmlIgnore]
        [NotColumn]
        private DateTime _UpdateDate;

        [XmlElement("UpdateDate")]
        [NotColumn]
        public string UpdateDateString
        {
            get
            {
                return _UpdateDate.ToString("o");
            }
            set
            {
                this._UpdateDate = DateTime.Parse(value);
            }
        }

        [XmlIgnore]
        [Column, NotNull]
        public DateTime UpdateDate
        {
            get { return _UpdateDate; }
            set { _UpdateDate = value; }
        }




        [XmlIgnore]
        [NotColumn]
        private DateTime? _ImportCreateDate;

        [XmlElement("ImportCreateDate")]
        [NotColumn]
        public string ImportCreateDateString
        {
            get
            {
                if (!_ImportCreateDate.HasValue)
                {
                    return null;
                }
                else
                {
                    return _ImportCreateDate.Value.ToString("o");
                }
            }
            set
            {
                DateTime dt;
                if (DateTime.TryParse(value, null, DateTimeStyles.AdjustToUniversal, out dt))
                {
                    this._ImportCreateDate = dt;
                }
                else
                {
                    this._ImportCreateDate = null;
                }
            }
        }

        [XmlIgnore]
        [Column, Nullable]
        public DateTime? ImportCreateDate
        {
            get { return _ImportCreateDate; }
            set { _ImportCreateDate = value; }
        }

        [XmlIgnore]
        [NotColumn]
        private DateTime? _ImportUpdateDate;

        [XmlElement("ImportUpdateDate")]
        [NotColumn]
        public string ImportUpdateDateString
        {
            get
            {
                if (!_ImportUpdateDate.HasValue)
                {
                    return null;
                }
                else
                {
                    return _ImportUpdateDate.Value.ToString("o");
                }
            }
            set
            {
                DateTime dt;
                if (DateTime.TryParse(value, null, DateTimeStyles.AdjustToUniversal, out dt))
                {
                    this._ImportUpdateDate = dt;
                }
                else
                {
                    this._ImportUpdateDate = null;
                }
            }
        }

        [XmlIgnore]
        [Column, Nullable]
        public DateTime? ImportUpdateDate
        {
            get { return _ImportUpdateDate; }
            set { _ImportUpdateDate = value; }
        }

        [XmlIgnore]
        [NotColumn]
        private bool? _IsDeleted;

        [XmlElement("IsDeleted")]
        [NotColumn]
        public string IsDeletedString
        {
            get
            {
                if (!_IsDeleted.HasValue)
                {
                    return null;
                }
                else
                {
                    return _IsDeleted.ToString();
                }
            }
            set
            {
                bool val;
                if (bool.TryParse(value, out val))
                {
                    this._IsDeleted = val;
                }
                else
                {
                    this._IsDeleted = null;
                }
            }
        }

        [XmlIgnore]
        [Column, Nullable]
        public bool? IsDeleted
        {
            get { return _IsDeleted; }
            set { _IsDeleted = value; }
        }

        [XmlIgnore]
        [NotColumn]
        private Guid? _SessionID;

        [XmlElement("SessionID")]
        [NotColumn]
        public string SessionIDString
        {
            get
            {
                if (!_SessionID.HasValue)
                {
                    return null;
                }
                else
                {
                    return _SessionID.ToString();
                }
            }
            set
            {
                Guid guid;
                if (Guid.TryParse(value, out guid))
                {
                    this._SessionID = guid;
                }
                else
                {
                    this._SessionID = null;
                }
            }
        }

        [XmlIgnore]
        [Column, Nullable]
        public Guid? SessionID
        {
            get { return _SessionID; }
            set { _SessionID = value; }
        }
    }

    [Table(Schema = "loader", Name = "rbd_ParticipantsProfSubject")]
    public partial class rbd_ParticipantsProfSubject
    {
        [PrimaryKey(1), NotNull]
        public int REGION { get; set; } // int

        [PrimaryKey(2), NotNull]
        public Guid ID { get; set; } // uniqueidentifier

        [Column, NotNull]
        public Guid ParticipantID { get; set; } // uniqueidentifier

        [Column, NotNull]
        public int SubjectCode { get; set; } // int

        [XmlIgnore]
        [NotColumn]
        private bool? _IsDeleted;

        [XmlElement("IsDeleted")]
        [NotColumn]
        public string IsDeletedString
        {
            get
            {
                if (!_IsDeleted.HasValue)
                {
                    return null;
                }
                else
                {
                    return _IsDeleted.ToString();
                }
            }
            set
            {
                bool val;
                if (bool.TryParse(value, out val))
                {
                    this._IsDeleted = val;
                }
                else
                {
                    this._IsDeleted = null;
                }
            }
        }

        [XmlIgnore]
        [Column, Nullable]
        public bool? IsDeleted
        {
            get { return _IsDeleted; }
            set { _IsDeleted = value; }
        }
    }

    [Table(Schema = "loader", Name = "rbd_ParticipantsSubject")]
    public partial class rbd_ParticipantsSubject
    {
        [PrimaryKey(1), NotNull]
        public int REGION { get; set; } // int

        [PrimaryKey(2), NotNull]
        public Guid ID { get; set; } // uniqueidentifier

        [Column, NotNull]
        public Guid ParticipantID { get; set; } // uniqueidentifier

        [Column, NotNull]
        public int SubjectCode { get; set; } // int

        [XmlIgnore]
        [NotColumn]
        private bool? _IsDeleted;

        [XmlElement("IsDeleted")]
        [NotColumn]
        public string IsDeletedString
        {
            get
            {
                if (!_IsDeleted.HasValue)
                {
                    return null;
                }
                else
                {
                    return _IsDeleted.ToString();
                }
            }
            set
            {
                bool val;
                if (bool.TryParse(value, out val))
                {
                    this._IsDeleted = val;
                }
                else
                {
                    this._IsDeleted = null;
                }
            }
        }

        [XmlIgnore]
        [Column, Nullable]
        public bool? IsDeleted
        {
            get { return _IsDeleted; }
            set { _IsDeleted = value; }
        }
    }

    [Table(Schema = "loader", Name = "rbd_Places")]
    public partial class rbd_Place
    {
        [PrimaryKey(2), NotNull]
        public Guid PlacesID { get; set; } // uniqueidentifier

        [PrimaryKey(1), NotNull]
        public int REGION { get; set; } // int

        [Column, NotNull]
        public Guid AuditoriumID { get; set; } // uniqueidentifier

        [Column, NotNull]
        public int Row { get; set; } // int

        [Column, NotNull]
        public int Col { get; set; } // int

        [Column, Nullable]
        public bool? IsBad { get; set; } // bit

        [XmlIgnore]
        [NotColumn]
        private bool? _IsDeleted;

        [XmlElement("IsDeleted")]
        [NotColumn]
        public string IsDeletedString
        {
            get
            {
                if (!_IsDeleted.HasValue)
                {
                    return null;
                }
                else
                {
                    return _IsDeleted.ToString();
                }
            }
            set
            {
                bool val;
                if (bool.TryParse(value, out val))
                {
                    this._IsDeleted = val;
                }
                else
                {
                    this._IsDeleted = null;
                }
            }
        }

        [XmlIgnore]
        [Column, Nullable]
        public bool? IsDeleted
        {
            get { return _IsDeleted; }
            set { _IsDeleted = value; }
        }

        [Column, NotNull]
        public int PlaceType { get; set; } // int
    }

    [Table(Schema = "loader", Name = "rbd_Schools")]
    public partial class rbd_School
    {
        [PrimaryKey(1), NotNull]
        public Guid SchoolID { get; set; } // uniqueidentifier

        [Column, NotNull]
        public Guid GovernmentID { get; set; } // uniqueidentifier

        [Column, NotNull]
        public int SchoolCode { get; set; } // int

        [Column, NotNull]
        public string SchoolName { get; set; } // varchar(1024)

        [Column, NotNull]
        public short SchoolKindFK { get; set; } // smallint

        [Column, NotNull]
        public short SchoolPropertyFk { get; set; } // smallint

        [Column, NotNull]
        public Guid AreaFK { get; set; } // uniqueidentifier

        [Column, NotNull]
        public int TownTypeFK { get; set; } // int

        [Column, NotNull]
        public string LawAddress { get; set; } // varchar(max)

        [Column, Nullable]
        public string Address { get; set; } // varchar(max)

        [Column, NotNull]
        public string DPosition { get; set; } // varchar(150)

        [Column, NotNull]
        public string FIO { get; set; } // varchar(150)

        [Column, NotNull]
        public string Phones { get; set; } // varchar(80)

        [Column, Nullable]
        public string Faxs { get; set; } // varchar(80)

        [Column, NotNull]
        public string Mails { get; set; } // varchar(255)

        [Column, NotNull]
        public int People11 { get; set; } // int

        [Column, NotNull]
        public int People9 { get; set; } // int

        [Column, NotNull]
        public string ChargeFIO { get; set; } // varchar(150)

        [Column, Nullable]
        public string ChargePhones { get; set; } // varchar

        [Column, Nullable]
        public string ChargeMails { get; set; } // varchar

        [Column, Nullable]
        public string WWW { get; set; } // varchar(255)

        [Column, Nullable]
        public string LicNum { get; set; } // varchar(80)

        [Column, Nullable]
        public string LicRegNo { get; set; } // varchar(80)

        [Column, Nullable]
        public string LicIssueDate { get; set; } // varchar(10)

        [Column, Nullable]
        public string LicFinishingDate { get; set; } // varchar(10)

        [Column, Nullable]
        public string AccCertNum { get; set; } // varchar(255)

        [Column, Nullable]
        public string AccCertRegNo { get; set; } // varchar(255)

        [Column, Nullable]
        public string AccCertIssueDate { get; set; } // varchar(10)

        [Column, Nullable]
        public string AccCertFinishingDate { get; set; } // varchar(10)

        [XmlIgnore]
        [NotColumn]
        private bool? _isVirtualSchool;

        [XmlElement("isVirtualSchool")]
        [NotColumn]
        public string isVirtualSchoolString
        {
            get
            {
                if (!_isVirtualSchool.HasValue)
                {
                    return null;
                }
                else
                {
                    return _isVirtualSchool.ToString();
                }
            }
            set
            {
                bool val;
                if (bool.TryParse(value, out val))
                {
                    this._isVirtualSchool = val;
                }
                else
                {
                    this._isVirtualSchool = null;
                }
            }
        }

        [XmlIgnore]
        [Column, Nullable]
        public bool? isVirtualSchool
        {
            get { return _isVirtualSchool; }
            set { _isVirtualSchool = value; }
        }

        [Column, Nullable]
        public string SReserve1 { get; set; } // varchar(255)

        [Column, Nullable]
        public string SReserve2 { get; set; } // varchar(255)

        [Column, NotNull]
        public int DeleteType { get; set; } // int

        [Column, NotNull]
        public bool IsTOM { get; set; } // bit

        [PrimaryKey(2), NotNull]
        public int REGION { get; set; } // int

        [Column, Nullable]
        public string ShortName { get; set; } // varchar(255)

        [Column, NotNull]
        public int TownshipFK { get; set; } // int

        [XmlIgnore]
        [NotColumn]
        private DateTime _CreateDate;

        [XmlElement("CreateDate")]
        [NotColumn]
        public string CreateDateString
        {
            get
            {
                return _CreateDate.ToString("o");
            }
            set
            {
                this._CreateDate = DateTime.Parse(value);
            }
        }

        [XmlIgnore]
        [Column, NotNull]
        public DateTime CreateDate
        {
            get { return _CreateDate; }
            set { _CreateDate = value; }
        }

        [XmlIgnore]
        [NotColumn]
        private DateTime _UpdateDate;

        [XmlElement("UpdateDate")]
        [NotColumn]
        public string UpdateDateString
        {
            get
            {
                return _UpdateDate.ToString("o");
            }
            set
            {
                this._UpdateDate = DateTime.Parse(value);
            }
        }

        [XmlIgnore]
        [Column, NotNull]
        public DateTime UpdateDate
        {
            get { return _UpdateDate; }
            set { _UpdateDate = value; }
        }

        [XmlIgnore]
        [NotColumn]
        private DateTime? _ImportCreateDate;

        [XmlElement("ImportCreateDate")]
        [NotColumn]
        public string ImportCreateDateString
        {
            get
            {
                if (!_ImportCreateDate.HasValue)
                {
                    return null;
                }
                else
                {
                    return _ImportCreateDate.Value.ToString("o");
                }
            }
            set
            {
                DateTime dt;
                if (DateTime.TryParse(value, null, DateTimeStyles.AdjustToUniversal, out dt))
                {
                    this._ImportCreateDate = dt;
                }
                else
                {
                    this._ImportCreateDate = null;
                }
            }
        }

        [XmlIgnore]
        [Column, Nullable]
        public DateTime? ImportCreateDate
        {
            get { return _ImportCreateDate; }
            set { _ImportCreateDate = value; }
        }

        [XmlIgnore]
        [NotColumn]
        private DateTime? _ImportUpdateDate;

        [XmlElement("ImportUpdateDate")]
        [NotColumn]
        public string ImportUpdateDateString
        {
            get
            {
                if (!_ImportUpdateDate.HasValue)
                {
                    return null;
                }
                else
                {
                    return _ImportUpdateDate.Value.ToString("o");
                }
            }
            set
            {
                DateTime dt;
                if (DateTime.TryParse(value, null, DateTimeStyles.AdjustToUniversal, out dt))
                {
                    this._ImportUpdateDate = dt;
                }
                else
                {
                    this._ImportUpdateDate = null;
                }
            }
        }

        [XmlIgnore]
        [Column, Nullable]
        public DateTime? ImportUpdateDate
        {
            get { return _ImportUpdateDate; }
            set { _ImportUpdateDate = value; }
        }

        [Column, NotNull]
        public int SchoolFlags { get; set; } // int

        [Column, Nullable]
        public string Ogrn { get; set; } // varchar 20
        [Column, Nullable]
        public string Inn { get; set; } // varchar 20
        [Column, Nullable]
        public string Kpp { get; set; } // varchar 20
    }

    [Table(Schema = "loader", Name = "rbd_SchoolAddress")]
    public partial class rbd_SchoolAddress
    {
        [PrimaryKey, NotNull]
        public Guid SchoolAddressID { get; set; } // uniqueidentifier

        [Column, NotNull]
        public int REGION { get; set; } // int

        [Column, NotNull]
        public Guid SchoolID { get; set; } // uniqueidentifier

        [Column, NotNull]
        public Guid AddressID { get; set; } // uniqueidentifier

        [Column, NotNull]
        public int AddressTypeID { get; set; } // int

        [XmlIgnore]
        [NotColumn]
        private int? _AddressKind;

        [XmlElement("AddressKind")]
        [NotColumn]
        public string AddressKindString
        {
            get
            {
                if (!_AddressKind.HasValue)
                {
                    return null;
                }
                else
                {
                    return _AddressKind.ToString();
                }
            }
            set
            {
                int val;
                if (int.TryParse(value, out val))
                {
                    this._AddressKind = val;
                }
                else
                {
                    this._AddressKind = null;
                }
            }
        }

        [XmlIgnore]
        [Column, Nullable]
        public int? AddressKind
        {
            get { return _AddressKind; }
            set { _AddressKind = value; }
        }

        [XmlIgnore]
        [NotColumn]
        private DateTime _CreateDate;

        [XmlElement("CreateDate")]
        [NotColumn]
        public string CreateDateString
        {
            get
            {
                return _CreateDate.ToString("o");
            }
            set
            {
                this._CreateDate = DateTime.Parse(value);
            }
        }

        [XmlIgnore]
        [Column, NotNull]
        public DateTime CreateDate
        {
            get { return _CreateDate; }
            set { _CreateDate = value; }
        }

        [XmlIgnore]
        [NotColumn]
        private DateTime _UpdateDate;

        [XmlElement("UpdateDate")]
        [NotColumn]
        public string UpdateDateString
        {
            get
            {
                return _UpdateDate.ToString("o");
            }
            set
            {
                this._UpdateDate = DateTime.Parse(value);
            }
        }

        [XmlIgnore]
        [Column, NotNull]
        public DateTime UpdateDate
        {
            get { return _UpdateDate; }
            set { _UpdateDate = value; }
        }




        [XmlIgnore]
        [NotColumn]
        private DateTime? _ImportCreateDate;

        [XmlElement("ImportCreateDate")]
        [NotColumn]
        public string ImportCreateDateString
        {
            get
            {
                if (!_ImportCreateDate.HasValue)
                {
                    return null;
                }
                else
                {
                    return _ImportCreateDate.Value.ToString("o");
                }
            }
            set
            {
                DateTime dt;
                if (DateTime.TryParse(value, null, DateTimeStyles.AdjustToUniversal, out dt))
                {
                    this._ImportCreateDate = dt;
                }
                else
                {
                    this._ImportCreateDate = null;
                }
            }
        }

        [XmlIgnore]
        [Column, Nullable]
        public DateTime? ImportCreateDate
        {
            get { return _ImportCreateDate; }
            set { _ImportCreateDate = value; }
        }

        [XmlIgnore]
        [NotColumn]
        private DateTime? _ImportUpdateDate;

        [XmlElement("ImportUpdateDate")]
        [NotColumn]
        public string ImportUpdateDateString
        {
            get
            {
                if (!_ImportUpdateDate.HasValue)
                {
                    return null;
                }
                else
                {
                    return _ImportUpdateDate.Value.ToString("o");
                }
            }
            set
            {
                DateTime dt;
                if (DateTime.TryParse(value, null, DateTimeStyles.AdjustToUniversal, out dt))
                {
                    this._ImportUpdateDate = dt;
                }
                else
                {
                    this._ImportUpdateDate = null;
                }
            }
        }

        [XmlIgnore]
        [Column, Nullable]
        public DateTime? ImportUpdateDate
        {
            get { return _ImportUpdateDate; }
            set { _ImportUpdateDate = value; }
        }

        [XmlIgnore]
        [NotColumn]
        private bool? _IsDeleted;

        [XmlElement("IsDeleted")]
        [NotColumn]
        public string IsDeletedString
        {
            get
            {
                if (!_IsDeleted.HasValue)
                {
                    return null;
                }
                else
                {
                    return _IsDeleted.ToString();
                }
            }
            set
            {
                bool val;
                if (bool.TryParse(value, out val))
                {
                    this._IsDeleted = val;
                }
                else
                {
                    this._IsDeleted = null;
                }
            }
        }

        [XmlIgnore]
        [Column, Nullable]
        public bool? IsDeleted
        {
            get { return _IsDeleted; }
            set { _IsDeleted = value; }
        }
    }

    [Table(Schema = "loader", Name = "rbd_SchoolClasses")]
    public partial class rbd_SchoolClass
    {
        [PrimaryKey(1), NotNull]
        public Guid SchoolClassID { get; set; } // uniqueidentifier

        [PrimaryKey(2), NotNull]
        public int REGION { get; set; } // int

        [Column, NotNull]
        public Guid SchoolID { get; set; } // uniqueidentifier

        [Column, NotNull]
        public string SchoolClassCode { get; set; } // varchar(10)

        [Column, Nullable]
        public string SchoolClassDescription { get; set; } // varchar(255)

        [Column, NotNull]
        public int ClassProfileID { get; set; } // int

        [Column, NotNull]
        public int YearID { get; set; } // int

        [Column, NotNull]
        public int DeleteType { get; set; } // int

        [XmlIgnore]
        [NotColumn]
        private DateTime _CreateDate;

        [XmlElement("CreateDate")]
        [NotColumn]
        public string CreateDateString
        {
            get
            {
                return _CreateDate.ToString("o");
            }
            set
            {
                this._CreateDate = DateTime.Parse(value);
            }
        }

        [XmlIgnore]
        [Column, NotNull]
        public DateTime CreateDate
        {
            get { return _CreateDate; }
            set { _CreateDate = value; }
        }

        [XmlIgnore]
        [NotColumn]
        private DateTime _UpdateDate;

        [XmlElement("UpdateDate")]
        [NotColumn]
        public string UpdateDateString
        {
            get
            {
                return _UpdateDate.ToString("o");
            }
            set
            {
                this._UpdateDate = DateTime.Parse(value);
            }
        }

        [XmlIgnore]
        [Column, NotNull]
        public DateTime UpdateDate
        {
            get { return _UpdateDate; }
            set { _UpdateDate = value; }
        }

        [XmlIgnore]
        [NotColumn]
        private DateTime? _ImportCreateDate;

        [XmlElement("ImportCreateDate")]
        [NotColumn]
        public string ImportCreateDateString
        {
            get
            {
                if (!_ImportCreateDate.HasValue)
                {
                    return null;
                }
                else
                {
                    return _ImportCreateDate.Value.ToString("o");
                }
            }
            set
            {
                DateTime dt;
                if (DateTime.TryParse(value, null, DateTimeStyles.AdjustToUniversal, out dt))
                {
                    this._ImportCreateDate = dt;
                }
                else
                {
                    this._ImportCreateDate = null;
                }
            }
        }

        [XmlIgnore]
        [Column, Nullable]
        public DateTime? ImportCreateDate
        {
            get { return _ImportCreateDate; }
            set { _ImportCreateDate = value; }
        }

        [XmlIgnore]
        [NotColumn]
        private DateTime? _ImportUpdateDate;

        [XmlElement("ImportUpdateDate")]
        [NotColumn]
        public string ImportUpdateDateString
        {
            get
            {
                if (!_ImportUpdateDate.HasValue)
                {
                    return null;
                }
                else
                {
                    return _ImportUpdateDate.Value.ToString("o");
                }
            }
            set
            {
                DateTime dt;
                if (DateTime.TryParse(value, null, DateTimeStyles.AdjustToUniversal, out dt))
                {
                    this._ImportUpdateDate = dt;
                }
                else
                {
                    this._ImportUpdateDate = null;
                }
            }
        }

        [XmlIgnore]
        [Column, Nullable]
        public DateTime? ImportUpdateDate
        {
            get { return _ImportUpdateDate; }
            set { _ImportUpdateDate = value; }
        }

        [Column, NotNull]
        public int ClassParallelID { get; set; } // int

        [Column, NotNull]
        public bool IsActive { get; set; }
    }

    [Table(Schema = "loader", Name = "rbd_Stations")]
    public partial class rbd_Station
    {
        [PrimaryKey, NotNull]
        public Guid StationID { get; set; } // uniqueidentifier

        [Column, NotNull]
        public int REGION { get; set; } // int

        [Column, NotNull]
        public Guid AreaID { get; set; } // uniqueidentifier

        [Column, NotNull]
        public int StationCode { get; set; } // int

        [Column, NotNull]
        public string StationName { get; set; } // varchar(255)

        [Column, Nullable]
        public string StationAddress { get; set; } // varchar(1000)

        [XmlIgnore]
        [NotColumn]
        private Guid? _SchoolFK;

        [XmlElement("SchoolFK")]
        [NotColumn]
        public string SchoolFKString
        {
            get
            {
                if (!_SchoolFK.HasValue)
                {
                    return null;
                }
                else
                {
                    return _SchoolFK.ToString();
                }
            }
            set
            {
                Guid guid;
                if (Guid.TryParse(value, out guid))
                {
                    this._SchoolFK = guid;
                }
                else
                {
                    this._SchoolFK = null;
                }
            }
        }

        [XmlIgnore]
        [Column, Nullable]
        public Guid? SchoolFK
        {
            get { return _SchoolFK; }
            set { _SchoolFK = value; }
        }

        [Column, NotNull]
        public Guid GovernmentID { get; set; } // uniqueidentifier

        [Column, NotNull]
        public int sVolume { get; set; } // int

        [XmlIgnore]
        [NotColumn]
        private bool? _IsActive;

        [XmlElement("IsActive")]
        [NotColumn]
        public string IsActiveString
        {
            get
            {
                if (!_IsActive.HasValue)
                {
                    return null;
                }
                else
                {
                    return _IsActive.ToString();
                }
            }
            set
            {
                bool val;
                if (bool.TryParse(value, out val))
                {
                    this._IsActive = val;
                }
                else
                {
                    this._IsActive = null;
                }
            }
        }

        [XmlIgnore]
        [Column, Nullable]
        public bool? IsActive
        {
            get { return _IsActive; }
            set { _IsActive = value; }
        }

        [Column, Nullable]
        public string Phones { get; set; } // varchar(255)

        [Column, NotNull]
        public string Mails { get; set; } // varchar(255)

        [XmlIgnore]
        [NotColumn]
        private Guid? _PCenterID;

        [XmlElement("PCenterID")]
        [NotColumn]
        public string PCenterIDString
        {
            get
            {
                if (!_PCenterID.HasValue)
                {
                    return null;
                }
                else
                {
                    return _PCenterID.ToString();
                }
            }
            set
            {
                Guid guid;
                if (Guid.TryParse(value, out guid))
                {
                    this._PCenterID = guid;
                }
                else
                {
                    this._PCenterID = null;
                }
            }
        }

        [XmlIgnore]
        [Column, Nullable]
        public Guid? PCenterID
        {
            get { return _PCenterID; }
            set { _PCenterID = value; }
        }

        [Column, NotNull]
        public bool IsTOM { get; set; } // bit

        [Column, NotNull]
        public int DeleteType { get; set; } // int

        [XmlIgnore]
        [NotColumn]
        private int? _AuditoriumsCount;

        [XmlElement("AuditoriumsCount")]
        [NotColumn]
        public string AuditoriumsCountString
        {
            get
            {
                if (!_AuditoriumsCount.HasValue)
                {
                    return null;
                }
                else
                {
                    return _AuditoriumsCount.ToString();
                }
            }
            set
            {
                int tni;
                if (int.TryParse(value, out tni))
                {
                    this._AuditoriumsCount = tni;
                }
                else
                {
                    this._AuditoriumsCount = null;
                }
            }
        }

        [XmlIgnore]
        [Column, Nullable]
        public int? AuditoriumsCount
        {
            get { return _AuditoriumsCount; }
            set { _AuditoriumsCount = value; }
        }

        [XmlIgnore]
        [NotColumn]
        private DateTime _CreateDate;

        [XmlElement("CreateDate")]
        [NotColumn]
        public string CreateDateString
        {
            get
            {
                return _CreateDate.ToString("o");
            }
            set
            {
                this._CreateDate = DateTime.Parse(value);
            }
        }

        [XmlIgnore]
        [Column, NotNull]
        public DateTime CreateDate
        {
            get { return _CreateDate; }
            set { _CreateDate = value; }
        }

        [XmlIgnore]
        [NotColumn]
        private DateTime _UpdateDate;

        [XmlElement("UpdateDate")]
        [NotColumn]
        public string UpdateDateString
        {
            get
            {
                return _UpdateDate.ToString("o");
            }
            set
            {
                this._UpdateDate = DateTime.Parse(value);
            }
        }

        [XmlIgnore]
        [Column, NotNull]
        public DateTime UpdateDate
        {
            get { return _UpdateDate; }
            set { _UpdateDate = value; }
        }

        [XmlIgnore]
        [NotColumn]
        private DateTime? _ImportCreateDate;

        [XmlElement("ImportCreateDate")]
        [NotColumn]
        public string ImportCreateDateString
        {
            get
            {
                if (!_ImportCreateDate.HasValue)
                {
                    return null;
                }
                else
                {
                    return _ImportCreateDate.Value.ToString("o");
                }
            }
            set
            {
                DateTime dt;
                if (DateTime.TryParse(value, null, DateTimeStyles.AdjustToUniversal, out dt))
                {
                    this._ImportCreateDate = dt;
                }
                else
                {
                    this._ImportCreateDate = null;
                }
            }
        }

        [XmlIgnore]
        [Column, Nullable]
        public DateTime? ImportCreateDate
        {
            get { return _ImportCreateDate; }
            set { _ImportCreateDate = value; }
        }

        [XmlIgnore]
        [NotColumn]
        private DateTime? _ImportUpdateDate;

        [XmlElement("ImportUpdateDate")]
        [NotColumn]
        public string ImportUpdateDateString
        {
            get
            {
                if (!_ImportUpdateDate.HasValue)
                {
                    return null;
                }
                else
                {
                    return _ImportUpdateDate.Value.ToString("o");
                }
            }
            set
            {
                DateTime dt;
                if (DateTime.TryParse(value, null, DateTimeStyles.AdjustToUniversal, out dt))
                {
                    this._ImportUpdateDate = dt;
                }
                else
                {
                    this._ImportUpdateDate = null;
                }
            }
        }

        [XmlIgnore]
        [Column, Nullable]
        public DateTime? ImportUpdateDate
        {
            get { return _ImportUpdateDate; }
            set { _ImportUpdateDate = value; }
        }


        [Column, NotNull]
        public int ExamForm { get; set; } // int

        [Column, NotNull]
        public bool VideoControl { get; set; } // bit

        [XmlIgnore]
        [NotColumn]
        private Guid? _AddressID;

        [XmlElement("AddressID")]
        [NotColumn]
        public string AddressIDString
        {
            get
            {
                if (!_AddressID.HasValue)
                {
                    return null;
                }
                else
                {
                    return _AddressID.ToString();
                }
            }
            set
            {
                Guid guid;
                if (Guid.TryParse(value, out guid))
                {
                    this._AddressID = guid;
                }
                else
                {
                    this._AddressID = null;
                }
            }
        }

        [XmlIgnore]
        [Column, Nullable]
        public Guid? AddressID
        {
            get { return _AddressID; }
            set { _AddressID = value; }
        }

        [Column, NotNull]
        public int StationFlags { get; set; } // int

        [XmlIgnore]
        [NotColumn]
        private int? _TimeZoneId;

        [XmlElement("TimeZoneId")]
        [NotColumn]
        public string TimeZoneIdString
        {
            get
            {
                if (!_TimeZoneId.HasValue)
                {
                    return null;
                }
                else
                {
                    return _TimeZoneId.ToString();
                }
            }
            set
            {
                int tni;
                if (int.TryParse(value, out tni))
                {
                    this._TimeZoneId = tni;
                }
                else
                {
                    this._TimeZoneId = null;
                }
            }
        }

        [XmlIgnore]
        [Column, Nullable]
        public int? TimeZoneId
        {
            get { return _TimeZoneId; }
            set { _TimeZoneId = value; }
        }
    }

    [Table(Schema = "loader", Name = "rbd_StationExamAuditory")]
    public partial class rbd_StationExamAuditory
    {
        [PrimaryKey, NotNull]
        public Guid StationExamAuditoryID { get; set; } // uniqueidentifier

        [Column, NotNull]
        public int Region { get; set; } // int

        [Column, NotNull]
        public Guid StationsExamsID { get; set; } // uniqueidentifier

        [Column, NotNull]
        public Guid StationID { get; set; } // uniqueidentifier

        [Column, NotNull]
        public Guid AuditoriumID { get; set; } // uniqueidentifier

        [Column, NotNull]
        public int PlacesCount { get; set; } // int

        [XmlIgnore]
        [NotColumn]
        private DateTime _CreateDate;

        [XmlElement("CreateDate")]
        [NotColumn]
        public string CreateDateString
        {
            get
            {
                return _CreateDate.ToString("o");
            }
            set
            {
                this._CreateDate = DateTime.Parse(value);
            }
        }

        [XmlIgnore]
        [Column, NotNull]
        public DateTime CreateDate
        {
            get { return _CreateDate; }
            set { _CreateDate = value; }
        }

        [XmlIgnore]
        [NotColumn]
        private DateTime _UpdateDate;

        [XmlElement("UpdateDate")]
        [NotColumn]
        public string UpdateDateString
        {
            get
            {
                return _UpdateDate.ToString("o");
            }
            set
            {
                this._UpdateDate = DateTime.Parse(value);
            }
        }

        [XmlIgnore]
        [Column, NotNull]
        public DateTime UpdateDate
        {
            get { return _UpdateDate; }
            set { _UpdateDate = value; }
        }

        [XmlIgnore]
        [NotColumn]
        private DateTime? _ImportCreateDate;

        [XmlElement("ImportCreateDate")]
        [NotColumn]
        public string ImportCreateDateString
        {
            get
            {
                if (!_ImportCreateDate.HasValue)
                {
                    return null;
                }
                else
                {
                    return _ImportCreateDate.Value.ToString("o");
                }
            }
            set
            {
                DateTime dt;
                if (DateTime.TryParse(value, null, DateTimeStyles.AdjustToUniversal, out dt))
                {
                    this._ImportCreateDate = dt;
                }
                else
                {
                    this._ImportCreateDate = null;
                }
            }
        }

        [XmlIgnore]
        [Column, Nullable]
        public DateTime? ImportCreateDate
        {
            get { return _ImportCreateDate; }
            set { _ImportCreateDate = value; }
        }

        [XmlIgnore]
        [NotColumn]
        private DateTime? _ImportUpdateDate;

        [XmlElement("ImportUpdateDate")]
        [NotColumn]
        public string ImportUpdateDateString
        {
            get
            {
                if (!_ImportUpdateDate.HasValue)
                {
                    return null;
                }
                else
                {
                    return _ImportUpdateDate.Value.ToString("o");
                }
            }
            set
            {
                DateTime dt;
                if (DateTime.TryParse(value, null, DateTimeStyles.AdjustToUniversal, out dt))
                {
                    this._ImportUpdateDate = dt;
                }
                else
                {
                    this._ImportUpdateDate = null;
                }
            }
        }

        [XmlIgnore]
        [Column, Nullable]
        public DateTime? ImportUpdateDate
        {
            get { return _ImportUpdateDate; }
            set { _ImportUpdateDate = value; }
        }

        [XmlIgnore]
        [NotColumn]
        private bool? _IsDeleted;

        [XmlElement("IsDeleted")]
        [NotColumn]
        public string IsDeletedString
        {
            get
            {
                if (!_IsDeleted.HasValue)
                {
                    return null;
                }
                else
                {
                    return _IsDeleted.ToString();
                }
            }
            set
            {
                bool val;
                if (bool.TryParse(value, out val))
                {
                    this._IsDeleted = val;
                }
                else
                {
                    this._IsDeleted = null;
                }
            }
        }

        [XmlIgnore]
        [Column, Nullable]
        public bool? IsDeleted
        {
            get { return _IsDeleted; }
            set { _IsDeleted = value; }
        }

        [XmlIgnore]
        [NotColumn]
        private bool? _IsPreparation;

        [XmlElement("IsPreparation")]
        [NotColumn]
        public string IsPreparationString
        {
            get
            {
                if (!_IsPreparation.HasValue)
                {
                    return null;
                }
                else
                {
                    return _IsPreparation.ToString();
                }
            }
            set
            {
                bool val;
                if (bool.TryParse(value, out val))
                {
                    this._IsPreparation = val;
                }
                else
                {
                    this._IsPreparation = null;
                }
            }
        }

        [XmlIgnore]
        [Column, Nullable]
        public bool? IsPreparation
        {
            get { return _IsPreparation; }
            set { _IsPreparation = value; }
        }

        [XmlIgnore]
        [NotColumn]
        private int? _ExamFormatCode;

        [XmlElement("ExamFormatCode")]
        [NotColumn]
        public string ExamFormatCodeString
        {
            get
            {
                if (!_ExamFormatCode.HasValue)
                {
                    return null;
                }
                else
                {
                    return _ExamFormatCode.ToString();
                }
            }
            set
            {
                int tni;
                if (int.TryParse(value, out tni))
                {
                    this._ExamFormatCode = tni;
                }
                else
                {
                    this._ExamFormatCode = null;
                }
            }
        }

        [XmlIgnore]
        [Column, Nullable]
        public int? ExamFormatCode
        {
            get { return _ExamFormatCode; }
            set { _ExamFormatCode = value; }
        }

        [Column, NotNull]
        public bool IsAutoAppoint { get; set; } // bit

        [Column, NotNull]
        public int LimitPotencial { get; set; } // int
    }

    [Table(Schema = "loader", Name = "rbd_StationExamAuditoryProps")]
    public partial class rbd_StationExamAuditoryProps
    {
        [PrimaryKey, NotNull]
        public Guid StationExamAuditoryPropertyID { get; set; } // uniqueidentifier

        [Column, NotNull]
        public int Region { get; set; } // int

        [Column, NotNull]
        public Guid StationExamAuditoryID { get; set; } // uniqueidentifier

        [Column, NotNull]
        public int PropertyType { get; set; } // int

        [Column, Nullable]
        public string PropertyValue { get; set; } // varchar(4000)

        [XmlIgnore]
        [NotColumn]
        private DateTime? _PropertyDate;

        [XmlElement("PropertyDate")]
        [NotColumn]
        public string PropertyDateString
        {
            get
            {
                if (!_PropertyDate.HasValue)
                {
                    return null;
                }
                else
                {
                    return _PropertyDate.Value.ToString("o");
                }
            }
            set
            {
                this._PropertyDate = DateTime.Parse(value);
            }
        } 

        [XmlIgnore]
        [Column, Nullable]
        public DateTime? PropertyDate
        {
            get { return _PropertyDate; }
            set { _PropertyDate = value; }
        }

        [XmlIgnore]
        [NotColumn]
        private DateTime _CreateDate;

        [XmlElement("CreateDate")]
        [NotColumn]
        public string CreateDateString
        {
            get
            {
                return _CreateDate.ToString("o");
            }
            set
            {
                this._CreateDate = DateTime.Parse(value);
            }
        }

        [XmlIgnore]
        [Column, NotNull]
        public DateTime CreateDate
        {
            get { return _CreateDate; }
            set { _CreateDate = value; }
        }

        [XmlIgnore]
        [NotColumn]
        private DateTime _UpdateDate;

        [XmlElement("UpdateDate")]
        [NotColumn]
        public string UpdateDateString
        {
            get
            {
                return _UpdateDate.ToString("o");
            }
            set
            {
                this._UpdateDate = DateTime.Parse(value);
            }
        }

        [XmlIgnore]
        [Column, NotNull]
        public DateTime UpdateDate
        {
            get { return _UpdateDate; }
            set { _UpdateDate = value; }
        }

        [XmlIgnore]
        [NotColumn]
        private DateTime? _ImportCreateDate;

        [XmlElement("ImportCreateDate")]
        [NotColumn]
        public string ImportCreateDateString
        {
            get
            {
                if (!_ImportCreateDate.HasValue)
                {
                    return null;
                }
                else
                {
                    return _ImportCreateDate.Value.ToString("o");
                }
            }
            set
            {
                DateTime dt;
                if (DateTime.TryParse(value, null, DateTimeStyles.AdjustToUniversal, out dt))
                {
                    this._ImportCreateDate = dt;
                }
                else
                {
                    this._ImportCreateDate = null;
                }
            }
        }

        [XmlIgnore]
        [Column, Nullable]
        public DateTime? ImportCreateDate
        {
            get { return _ImportCreateDate; }
            set { _ImportCreateDate = value; }
        }

        [XmlIgnore]
        [NotColumn]
        private DateTime? _ImportUpdateDate;

        [XmlElement("ImportUpdateDate")]
        [NotColumn]
        public string ImportUpdateDateString
        {
            get
            {
                if (!_ImportUpdateDate.HasValue)
                {
                    return null;
                }
                else
                {
                    return _ImportUpdateDate.Value.ToString("o");
                }
            }
            set
            {
                DateTime dt;
                if (DateTime.TryParse(value, null, DateTimeStyles.AdjustToUniversal, out dt))
                {
                    this._ImportUpdateDate = dt;
                }
                else
                {
                    this._ImportUpdateDate = null;
                }
            }
        }

        [XmlIgnore]
        [Column, Nullable]
        public DateTime? ImportUpdateDate
        {
            get { return _ImportUpdateDate; }
            set { _ImportUpdateDate = value; }
        }

        [XmlIgnore]
        [NotColumn]
        private bool? _IsDeleted;

        [XmlElement("IsDeleted")]
        [NotColumn]
        public string IsDeletedString
        {
            get
            {
                if (!_IsDeleted.HasValue)
                {
                    return null;
                }
                else
                {
                    return _IsDeleted.ToString();
                }
            }
            set
            {
                bool val;
                if (bool.TryParse(value, out val))
                {
                    this._IsDeleted = val;
                }
                else
                {
                    this._IsDeleted = null;
                }
            }
        }

        [XmlIgnore]
        [Column, Nullable]
        public bool? IsDeleted
        {
            get { return _IsDeleted; }
            set { _IsDeleted = value; }
        }

    }


    [Table(Schema = "loader", Name = "rbd_StationForm")]
    public partial class rbd_StationForm
    {
        [PrimaryKey(1), NotNull]
        public Guid StationFormId { get; set; } // uniqueidentifier

        [Column, NotNull]
        public int StationFormType { get; set; } // int

        [PrimaryKey(2), NotNull]
        public int Region { get; set; } // int

        [Column, NotNull]
        public int RegistrationCode { get; set; } // int

        [Column, NotNull]
        public int GovermentCode { get; set; } // int

        [Column, NotNull]
        public int StationCode { get; set; } // int

        [Column, NotNull]
        public int SubjectCode { get; set; } // int

        [Column, NotNull]
        public DateTime ExamDate { get; set; } // smalldatetime

        [Column, NotNull]
        public int CurrentPage { get; set; } // int

        [Column, NotNull]
        public int CountPage { get; set; } // int

        [XmlIgnore]
        [NotColumn]
        private Guid? _GovermentID;

        [XmlElement("GovermentID")]
        [NotColumn]
        public string GovermentIDString
        {
            get
            {
                if (!_GovermentID.HasValue)
                {
                    return null;
                }
                else
                {
                    return _GovermentID.ToString();
                }
            }
            set
            {
                Guid guid;
                if (Guid.TryParse(value, out guid))
                {
                    this._GovermentID = guid;
                }
                else
                {
                    this._GovermentID = null;
                }
            }
        }

        [XmlIgnore]
        [Column, Nullable]
        public Guid? GovermentID
        {
            get { return _GovermentID; }
            set { _GovermentID = value; }
        }

        [XmlIgnore]
        [NotColumn]
        private Guid? _StationID;

        [XmlElement("StationID")]
        [NotColumn]
        public string StationIDString
        {
            get
            {
                if (!_StationID.HasValue)
                {
                    return null;
                }
                else
                {
                    return _StationID.ToString();
                }
            }
            set
            {
                Guid guid;
                if (Guid.TryParse(value, out guid))
                {
                    this._StationID = guid;
                }
                else
                {
                    this._StationID = null;
                }
            }
        }

        [XmlIgnore]
        [Column, Nullable]
        public Guid? StationID
        {
            get { return _StationID; }
            set { _StationID = value; }
        }

        [XmlIgnore]
        [NotColumn]
        private int? _ExamGlobalID;

        [XmlElement("ExamGlobalID")]
        [NotColumn]
        public string ExamGlobalIDString
        {
            get
            {
                if (!_ExamGlobalID.HasValue)
                {
                    return null;
                }
                else
                {
                    return _ExamGlobalID.ToString();
                }
            }
            set
            {
                int tni;
                if (int.TryParse(value, out tni))
                {
                    this._ExamGlobalID = tni;
                }
                else
                {
                    this._ExamGlobalID = null;
                }
            }
        }

        [XmlIgnore]
        [Column, Nullable]
        public int? ExamGlobalID
        {
            get { return _ExamGlobalID; }
            set { _ExamGlobalID = value; }
        }

        [Column, NotNull]
        public bool IsTOM { get; set; } // bit

        [Column, NotNull]
        public string ProjectName { get; set; } // varchar(100)

        [Column, Nullable]
        public string IDCode { get; set; } // varchar(20)

        [Column, NotNull]
        public int ProjectBatchId { get; set; } // int
    }

    [Table(Schema = "loader", Name = "rbd_StationFormAct")]
    public partial class rbd_StationFormAct
    {
        [PrimaryKey, NotNull]
        public Guid StationFormActId { get; set; } // uniqueidentifier

        [Column, NotNull]
        public int Region { get; set; } // int

        [XmlIgnore]
        [NotColumn]
        private int? _RegistrationCode;

        [XmlElement("RegistrationCode")]
        [NotColumn]
        public string RegistrationCodeIDString
        {
            get
            {
                if (!_RegistrationCode.HasValue)
                {
                    return null;
                }
                else
                {
                    return _RegistrationCode.ToString();
                }
            }
            set
            {
                int tni;
                if (int.TryParse(value, out tni))
                {
                    this._RegistrationCode = tni;
                }
                else
                {
                    this._RegistrationCode = null;
                }
            }
        }

        [XmlIgnore]
        [Column, Nullable]
        public int? RegistrationCode
        {
            get { return _RegistrationCode; }
            set { _RegistrationCode = value; }
        }

        [Column, NotNull]
        public int GovermentCode { get; set; } // int

        [Column, NotNull]
        public int StationCode { get; set; } // int

        [Column, NotNull]
        public int SubjectCode { get; set; } // int

        [Column, NotNull]
        public DateTime ExamDate { get; set; } // smalldatetime

        [XmlIgnore]
        [NotColumn]
        private Guid? _GovermentID;

        [XmlElement("GovermentID")]
        [NotColumn]
        public string GovermentIDString
        {
            get
            {
                if (!_GovermentID.HasValue)
                {
                    return null;
                }
                else
                {
                    return _GovermentID.ToString();
                }
            }
            set
            {
                Guid guid;
                if (Guid.TryParse(value, out guid))
                {
                    this._GovermentID = guid;
                }
                else
                {
                    this._GovermentID = null;
                }
            }
        }

        [XmlIgnore]
        [Column, Nullable]
        public Guid? GovermentID
        {
            get { return _GovermentID; }
            set { _GovermentID = value; }
        }

        [XmlIgnore]
        [NotColumn]
        private Guid? _StationID;

        [XmlElement("StationID")]
        [NotColumn]
        public string StationIDString
        {
            get
            {
                if (!_StationID.HasValue)
                {
                    return null;
                }
                else
                {
                    return _StationID.ToString();
                }
            }
            set
            {
                Guid guid;
                if (Guid.TryParse(value, out guid))
                {
                    this._StationID = guid;
                }
                else
                {
                    this._StationID = null;
                }
            }
        }

        [XmlIgnore]
        [Column, Nullable]
        public Guid? StationID
        {
            get { return _StationID; }
            set { _StationID = value; }
        }

        [XmlIgnore]
        [NotColumn]
        private int? _ExamGlobalID;

        [XmlElement("ExamGlobalID")]
        [NotColumn]
        public string ExamGlobalIDString
        {
            get
            {
                if (!_ExamGlobalID.HasValue)
                {
                    return null;
                }
                else
                {
                    return _ExamGlobalID.ToString();
                }
            }
            set
            {
                int tni;
                if (int.TryParse(value, out tni))
                {
                    this._ExamGlobalID = tni;
                }
                else
                {
                    this._ExamGlobalID = null;
                }
            }
        }

        [XmlIgnore]
        [Column, Nullable]
        public int? ExamGlobalID
        {
            get { return _ExamGlobalID; }
            set { _ExamGlobalID = value; }
        }

        [Column, NotNull]
        public string ProjectName { get; set; } // varchar(100)

        [Column, NotNull]
        public int ProjectBatchId { get; set; } // int

        [Column, NotNull]
        public string CertificateNum { get; set; } // varchar(20)

        [Column, NotNull]
        public string StartTime { get; set; } // varchar(5)

        [Column, NotNull]
        public string EndTime { get; set; } // varchar(5)

        [Column, NotNull]
        public string IDCode { get; set; } // varchar(20)

        [XmlIgnore]
        [NotColumn]
        private bool? _B01;

        [XmlElement("B01")]
        [NotColumn]
        public string B01String
        {
            get
            {
                if (!_B01.HasValue)
                {
                    return null;
                }
                else
                {
                    return _B01.ToString();
                }
            }
            set
            {
                bool val;
                if (bool.TryParse(value, out val))
                {
                    this._B01 = val;
                }
                else
                {
                    this._B01 = null;
                }
            }
        }

        [XmlIgnore]
        [Column, Nullable]
        public bool? B01
        {
            get { return _B01; }
            set { _B01 = value; }
        }

        [XmlIgnore]
        [NotColumn]
        private bool? _B02;

        [XmlElement("B02")]
        [NotColumn]
        public string B02String
        {
            get
            {
                if (!_B02.HasValue)
                {
                    return null;
                }
                else
                {
                    return _B02.ToString();
                }
            }
            set
            {
                bool val;
                if (bool.TryParse(value, out val))
                {
                    this._B02 = val;
                }
                else
                {
                    this._B02 = null;
                }
            }
        }

        [XmlIgnore]
        [Column, Nullable]
        public bool? B02
        {
            get { return _B02; }
            set { _B02 = value; }
        }

        [XmlIgnore]
        [NotColumn]
        private bool? _B03;

        [XmlElement("B03")]
        [NotColumn]
        public string B03String
        {
            get
            {
                if (!_B03.HasValue)
                {
                    return null;
                }
                else
                {
                    return _B03.ToString();
                }
            }
            set
            {
                bool val;
                if (bool.TryParse(value, out val))
                {
                    this._B03 = val;
                }
                else
                {
                    this._B03 = null;
                }
            }
        }

        [XmlIgnore]
        [Column, Nullable]
        public bool? B03
        {
            get { return _B03; }
            set { _B03 = value; }
        }

        [XmlIgnore]
        [NotColumn]
        private bool? _B04;

        [XmlElement("B04")]
        [NotColumn]
        public string B04String
        {
            get
            {
                if (!_B04.HasValue)
                {
                    return null;
                }
                else
                {
                    return _B04.ToString();
                }
            }
            set
            {
                bool val;
                if (bool.TryParse(value, out val))
                {
                    this._B04 = val;
                }
                else
                {
                    this._B04 = null;
                }
            }
        }

        [XmlIgnore]
        [Column, Nullable]
        public bool? B04
        {
            get { return _B04; }
            set { _B04 = value; }
        }

        [XmlIgnore]
        [NotColumn]
        private bool? _B05;

        [XmlElement("B05")]
        [NotColumn]
        public string B05String
        {
            get
            {
                if (!_B05.HasValue)
                {
                    return null;
                }
                else
                {
                    return _B05.ToString();
                }
            }
            set
            {
                bool val;
                if (bool.TryParse(value, out val))
                {
                    this._B05 = val;
                }
                else
                {
                    this._B05 = null;
                }
            }
        }

        [XmlIgnore]
        [Column, Nullable]
        public bool? B05
        {
            get { return _B05; }
            set { _B05 = value; }
        }

        [XmlIgnore]
        [NotColumn]
        private bool? _B01Other;

        [XmlElement("B01Other")]
        [NotColumn]
        public string B01OtherString
        {
            get
            {
                if (!_B01Other.HasValue)
                {
                    return null;
                }
                else
                {
                    return _B01Other.ToString();
                }
            }
            set
            {
                bool val;
                if (bool.TryParse(value, out val))
                {
                    this._B01Other = val;
                }
                else
                {
                    this._B01Other = null;
                }
            }
        }

        [XmlIgnore]
        [Column, Nullable]
        public bool? B01Other
        {
            get { return _B01Other; }
            set { _B01Other = value; }
        }

        [XmlIgnore]
        [NotColumn]
        private bool? _B02Other;

        [XmlElement("B02Other")]
        [NotColumn]
        public string B02OtherString
        {
            get
            {
                if (!_B02Other.HasValue)
                {
                    return null;
                }
                else
                {
                    return _B02Other.ToString();
                }
            }
            set
            {
                bool val;
                if (bool.TryParse(value, out val))
                {
                    this._B02Other = val;
                }
                else
                {
                    this._B02Other = null;
                }
            }
        }

        [XmlIgnore]
        [Column, Nullable]
        public bool? B02Other
        {
            get { return _B02Other; }
            set { _B02Other = value; }
        }

        [XmlIgnore]
        [NotColumn]
        private bool? _B03Other;

        [XmlElement("B03Other")]
        [NotColumn]
        public string B03OtherString
        {
            get
            {
                if (!_B03Other.HasValue)
                {
                    return null;
                }
                else
                {
                    return _B03Other.ToString();
                }
            }
            set
            {
                bool val;
                if (bool.TryParse(value, out val))
                {
                    this._B03Other = val;
                }
                else
                {
                    this._B03Other = null;
                }
            }
        }

        [XmlIgnore]
        [Column, Nullable]
        public bool? B03Other
        {
            get { return _B03Other; }
            set { _B03Other = value; }
        }

        [XmlIgnore]
        [NotColumn]
        private bool? _B04Other;

        [XmlElement("B04Other")]
        [NotColumn]
        public string B04OtherString
        {
            get
            {
                if (!_B04Other.HasValue)
                {
                    return null;
                }
                else
                {
                    return _B04Other.ToString();
                }
            }
            set
            {
                bool val;
                if (bool.TryParse(value, out val))
                {
                    this._B04Other = val;
                }
                else
                {
                    this._B04Other = null;
                }
            }
        }

        [XmlIgnore]
        [Column, Nullable]
        public bool? B04Other
        {
            get { return _B04Other; }
            set { _B04Other = value; }
        }

        [XmlIgnore]
        [NotColumn]
        private bool? _B05Other;

        [XmlElement("B05Other")]
        [NotColumn]
        public string B05OtherString
        {
            get
            {
                if (!_B05Other.HasValue)
                {
                    return null;
                }
                else
                {
                    return _B05Other.ToString();
                }
            }
            set
            {
                bool val;
                if (bool.TryParse(value, out val))
                {
                    this._B05Other = val;
                }
                else
                {
                    this._B05Other = null;
                }
            }
        }

        [XmlIgnore]
        [Column, Nullable]
        public bool? B05Other
        {
            get { return _B05Other; }
            set { _B05Other = value; }
        }

        [XmlIgnore]
        [NotColumn]
        private bool? _B1;

        [XmlElement("B1")]
        [NotColumn]
        public string B1String
        {
            get
            {
                if (!_B1.HasValue)
                {
                    return null;
                }
                else
                {
                    return _B1.ToString();
                }
            }
            set
            {
                bool val;
                if (bool.TryParse(value, out val))
                {
                    this._B1 = val;
                }
                else
                {
                    this._B1 = null;
                }
            }
        }

        [XmlIgnore]
        [Column, Nullable]
        public bool? B1
        {
            get { return _B1; }
            set { _B1 = value; }
        }

        [XmlIgnore]
        [NotColumn]
        private bool? _B2;

        [XmlElement("B2")]
        [NotColumn]
        public string B2String
        {
            get
            {
                if (!_B2.HasValue)
                {
                    return null;
                }
                else
                {
                    return _B2.ToString();
                }
            }
            set
            {
                bool val;
                if (bool.TryParse(value, out val))
                {
                    this._B2 = val;
                }
                else
                {
                    this._B2 = null;
                }
            }
        }

        [XmlIgnore]
        [Column, Nullable]
        public bool? B2
        {
            get { return _B2; }
            set { _B2 = value; }
        }

        [XmlIgnore]
        [NotColumn]
        private bool? _B3;

        [XmlElement("B3")]
        [NotColumn]
        public string B3String
        {
            get
            {
                if (!_B3.HasValue)
                {
                    return null;
                }
                else
                {
                    return _B3.ToString();
                }
            }
            set
            {
                bool val;
                if (bool.TryParse(value, out val))
                {
                    this._B3 = val;
                }
                else
                {
                    this._B3 = null;
                }
            }
        }

        [XmlIgnore]
        [Column, Nullable]
        public bool? B3
        {
            get { return _B3; }
            set { _B3 = value; }
        }

        [XmlIgnore]
        [NotColumn]
        private bool? _B4;

        [XmlElement("B4")]
        [NotColumn]
        public string B4String
        {
            get
            {
                if (!_B4.HasValue)
                {
                    return null;
                }
                else
                {
                    return _B4.ToString();
                }
            }
            set
            {
                bool val;
                if (bool.TryParse(value, out val))
                {
                    this._B4 = val;
                }
                else
                {
                    this._B4 = null;
                }
            }
        }

        [XmlIgnore]
        [Column, Nullable]
        public bool? B4
        {
            get { return _B4; }
            set { _B4 = value; }
        }

        [XmlIgnore]
        [NotColumn]
        private bool? _B5;

        [XmlElement("B5")]
        [NotColumn]
        public string B5String
        {
            get
            {
                if (!_B5.HasValue)
                {
                    return null;
                }
                else
                {
                    return _B5.ToString();
                }
            }
            set
            {
                bool val;
                if (bool.TryParse(value, out val))
                {
                    this._B5 = val;
                }
                else
                {
                    this._B5 = null;
                }
            }
        }

        [XmlIgnore]
        [Column, Nullable]
        public bool? B5
        {
            get { return _B5; }
            set { _B5 = value; }
        }

        [XmlIgnore]
        [NotColumn]
        private bool? _B6;

        [XmlElement("B6")]
        [NotColumn]
        public string B6String
        {
            get
            {
                if (!_B6.HasValue)
                {
                    return null;
                }
                else
                {
                    return _B6.ToString();
                }
            }
            set
            {
                bool val;
                if (bool.TryParse(value, out val))
                {
                    this._B6 = val;
                }
                else
                {
                    this._B6 = null;
                }
            }
        }

        [XmlIgnore]
        [Column, Nullable]
        public bool? B6
        {
            get { return _B6; }
            set { _B6 = value; }
        }

        [XmlIgnore]
        [NotColumn]
        private bool? _B7;

        [XmlElement("B7")]
        [NotColumn]
        public string B7String
        {
            get
            {
                if (!_B7.HasValue)
                {
                    return null;
                }
                else
                {
                    return _B7.ToString();
                }
            }
            set
            {
                bool val;
                if (bool.TryParse(value, out val))
                {
                    this._B7 = val;
                }
                else
                {
                    this._B7 = null;
                }
            }
        }

        [XmlIgnore]
        [Column, Nullable]
        public bool? B7
        {
            get { return _B7; }
            set { _B7 = value; }
        }

        [XmlIgnore]
        [NotColumn]
        private bool? _B8;

        [XmlElement("B8")]
        [NotColumn]
        public string B8String
        {
            get
            {
                if (!_B8.HasValue)
                {
                    return null;
                }
                else
                {
                    return _B8.ToString();
                }
            }
            set
            {
                bool val;
                if (bool.TryParse(value, out val))
                {
                    this._B8 = val;
                }
                else
                {
                    this._B8 = null;
                }
            }
        }

        [XmlIgnore]
        [Column, Nullable]
        public bool? B8
        {
            get { return _B8; }
            set { _B8 = value; }
        }

        [XmlIgnore]
        [NotColumn]
        private bool? _B9;

        [XmlElement("B9")]
        [NotColumn]
        public string B9String
        {
            get
            {
                if (!_B9.HasValue)
                {
                    return null;
                }
                else
                {
                    return _B9.ToString();
                }
            }
            set
            {
                bool val;
                if (bool.TryParse(value, out val))
                {
                    this._B9 = val;
                }
                else
                {
                    this._B9 = null;
                }
            }
        }

        [XmlIgnore]
        [Column, Nullable]
        public bool? B9
        {
            get { return _B9; }
            set { _B9 = value; }
        }

        [XmlIgnore]
        [NotColumn]
        private bool? _B10;

        [XmlElement("B10")]
        [NotColumn]
        public string B10String
        {
            get
            {
                if (!_B10.HasValue)
                {
                    return null;
                }
                else
                {
                    return _B10.ToString();
                }
            }
            set
            {
                bool val;
                if (bool.TryParse(value, out val))
                {
                    this._B10 = val;
                }
                else
                {
                    this._B10 = null;
                }
            }
        }

        [XmlIgnore]
        [Column, Nullable]
        public bool? B10
        {
            get { return _B10; }
            set { _B10 = value; }
        }

        [XmlIgnore]
        [NotColumn]
        private bool? _B11;

        [XmlElement("B11")]
        [NotColumn]
        public string B11String
        {
            get
            {
                if (!_B11.HasValue)
                {
                    return null;
                }
                else
                {
                    return _B11.ToString();
                }
            }
            set
            {
                bool val;
                if (bool.TryParse(value, out val))
                {
                    this._B11 = val;
                }
                else
                {
                    this._B11 = null;
                }
            }
        }

        [XmlIgnore]
        [Column, Nullable]
        public bool? B11
        {
            get { return _B11; }
            set { _B11 = value; }
        }

        [XmlIgnore]
        [NotColumn]
        private bool? _B12;

        [XmlElement("B12")]
        [NotColumn]
        public string B12String
        {
            get
            {
                if (!_B12.HasValue)
                {
                    return null;
                }
                else
                {
                    return _B12.ToString();
                }
            }
            set
            {
                bool val;
                if (bool.TryParse(value, out val))
                {
                    this._B12 = val;
                }
                else
                {
                    this._B12 = null;
                }
            }
        }

        [XmlIgnore]
        [Column, Nullable]
        public bool? B12
        {
            get { return _B12; }
            set { _B12 = value; }
        }

        [XmlIgnore]
        [NotColumn]
        private bool? _B13;

        [XmlElement("B13")]
        [NotColumn]
        public string B13String
        {
            get
            {
                if (!_B13.HasValue)
                {
                    return null;
                }
                else
                {
                    return _B13.ToString();
                }
            }
            set
            {
                bool val;
                if (bool.TryParse(value, out val))
                {
                    this._B13 = val;
                }
                else
                {
                    this._B13 = null;
                }
            }
        }

        [XmlIgnore]
        [Column, Nullable]
        public bool? B13
        {
            get { return _B13; }
            set { _B13 = value; }
        }

        [XmlIgnore]
        [NotColumn]
        private bool? _B14;

        [XmlElement("B14")]
        [NotColumn]
        public string B14String
        {
            get
            {
                if (!_B14.HasValue)
                {
                    return null;
                }
                else
                {
                    return _B14.ToString();
                }
            }
            set
            {
                bool val;
                if (bool.TryParse(value, out val))
                {
                    this._B14 = val;
                }
                else
                {
                    this._B14 = null;
                }
            }
        }

        [XmlIgnore]
        [Column, Nullable]
        public bool? B14
        {
            get { return _B14; }
            set { _B14 = value; }
        }

        [XmlIgnore]
        [NotColumn]
        private bool? _B15;

        [XmlElement("B15")]
        [NotColumn]
        public string B15String
        {
            get
            {
                if (!_B15.HasValue)
                {
                    return null;
                }
                else
                {
                    return _B15.ToString();
                }
            }
            set
            {
                bool val;
                if (bool.TryParse(value, out val))
                {
                    this._B15 = val;
                }
                else
                {
                    this._B15 = null;
                }
            }
        }

        [XmlIgnore]
        [Column, Nullable]
        public bool? B15
        {
            get { return _B15; }
            set { _B15 = value; }
        }

        [XmlIgnore]
        [NotColumn]
        private bool? _B16;

        [XmlElement("B16")]
        [NotColumn]
        public string B16String
        {
            get
            {
                if (!_B16.HasValue)
                {
                    return null;
                }
                else
                {
                    return _B16.ToString();
                }
            }
            set
            {
                bool val;
                if (bool.TryParse(value, out val))
                {
                    this._B16 = val;
                }
                else
                {
                    this._B16 = null;
                }
            }
        }

        [XmlIgnore]
        [Column, Nullable]
        public bool? B16
        {
            get { return _B16; }
            set { _B16 = value; }
        }

        [XmlIgnore]
        [NotColumn]
        private bool? _B17;

        [XmlElement("B17")]
        [NotColumn]
        public string B17String
        {
            get
            {
                if (!_B17.HasValue)
                {
                    return null;
                }
                else
                {
                    return _B17.ToString();
                }
            }
            set
            {
                bool val;
                if (bool.TryParse(value, out val))
                {
                    this._B17 = val;
                }
                else
                {
                    this._B17 = null;
                }
            }
        }

        [XmlIgnore]
        [Column, Nullable]
        public bool? B17
        {
            get { return _B17; }
            set { _B17 = value; }
        }

        [XmlIgnore]
        [NotColumn]
        private bool? _B18;

        [XmlElement("B18")]
        [NotColumn]
        public string B18String
        {
            get
            {
                if (!_B18.HasValue)
                {
                    return null;
                }
                else
                {
                    return _B18.ToString();
                }
            }
            set
            {
                bool val;
                if (bool.TryParse(value, out val))
                {
                    this._B18 = val;
                }
                else
                {
                    this._B18 = null;
                }
            }
        }

        [XmlIgnore]
        [Column, Nullable]
        public bool? B18
        {
            get { return _B18; }
            set { _B18 = value; }
        }

        [XmlIgnore]
        [NotColumn]
        private bool? _B19;

        [XmlElement("B19")]
        [NotColumn]
        public string B19String
        {
            get
            {
                if (!_B19.HasValue)
                {
                    return null;
                }
                else
                {
                    return _B19.ToString();
                }
            }
            set
            {
                bool val;
                if (bool.TryParse(value, out val))
                {
                    this._B19 = val;
                }
                else
                {
                    this._B19 = null;
                }
            }
        }

        [XmlIgnore]
        [Column, Nullable]
        public bool? B19
        {
            get { return _B19; }
            set { _B19 = value; }
        }

        [XmlIgnore]
        [NotColumn]
        private bool? _B20;

        [XmlElement("B20")]
        [NotColumn]
        public string B20String
        {
            get
            {
                if (!_B20.HasValue)
                {
                    return null;
                }
                else
                {
                    return _B20.ToString();
                }
            }
            set
            {
                bool val;
                if (bool.TryParse(value, out val))
                {
                    this._B20 = val;
                }
                else
                {
                    this._B20 = null;
                }
            }
        }

        [XmlIgnore]
        [Column, Nullable]
        public bool? B20
        {
            get { return _B20; }
            set { _B20 = value; }
        }

        [XmlIgnore]
        [NotColumn]
        private bool? _B21;

        [XmlElement("B21")]
        [NotColumn]
        public string B21String
        {
            get
            {
                if (!_B21.HasValue)
                {
                    return null;
                }
                else
                {
                    return _B21.ToString();
                }
            }
            set
            {
                bool val;
                if (bool.TryParse(value, out val))
                {
                    this._B21 = val;
                }
                else
                {
                    this._B21 = null;
                }
            }
        }

        [XmlIgnore]
        [Column, Nullable]
        public bool? B21
        {
            get { return _B21; }
            set { _B21 = value; }
        }

        [XmlIgnore]
        [NotColumn]
        private bool? _B22;

        [XmlElement("B22")]
        [NotColumn]
        public string B22String
        {
            get
            {
                if (!_B22.HasValue)
                {
                    return null;
                }
                else
                {
                    return _B22.ToString();
                }
            }
            set
            {
                bool val;
                if (bool.TryParse(value, out val))
                {
                    this._B22 = val;
                }
                else
                {
                    this._B22 = null;
                }
            }
        }

        [XmlIgnore]
        [Column, Nullable]
        public bool? B22
        {
            get { return _B22; }
            set { _B22 = value; }
        }

        [XmlIgnore]
        [NotColumn]
        private bool? _B23;

        [XmlElement("B23")]
        [NotColumn]
        public string B23String
        {
            get
            {
                if (!_B23.HasValue)
                {
                    return null;
                }
                else
                {
                    return _B23.ToString();
                }
            }
            set
            {
                bool val;
                if (bool.TryParse(value, out val))
                {
                    this._B23 = val;
                }
                else
                {
                    this._B23 = null;
                }
            }
        }

        [XmlIgnore]
        [Column, Nullable]
        public bool? B23
        {
            get { return _B23; }
            set { _B23 = value; }
        }

        [XmlIgnore]
        [NotColumn]
        private bool? _B24;

        [XmlElement("B24")]
        [NotColumn]
        public string B24String
        {
            get
            {
                if (!_B24.HasValue)
                {
                    return null;
                }
                else
                {
                    return _B24.ToString();
                }
            }
            set
            {
                bool val;
                if (bool.TryParse(value, out val))
                {
                    this._B24 = val;
                }
                else
                {
                    this._B24 = null;
                }
            }
        }

        [XmlIgnore]
        [Column, Nullable]
        public bool? B24
        {
            get { return _B24; }
            set { _B24 = value; }
        }

        [XmlIgnore]
        [NotColumn]
        private bool? _B25;

        [XmlElement("B25")]
        [NotColumn]
        public string B25String
        {
            get
            {
                if (!_B25.HasValue)
                {
                    return null;
                }
                else
                {
                    return _B25.ToString();
                }
            }
            set
            {
                bool val;
                if (bool.TryParse(value, out val))
                {
                    this._B25 = val;
                }
                else
                {
                    this._B25 = null;
                }
            }
        }

        [XmlIgnore]
        [Column, Nullable]
        public bool? B25
        {
            get { return _B25; }
            set { _B25 = value; }
        }

        [XmlIgnore]
        [NotColumn]
        private bool? _B26;

        [XmlElement("B26")]
        [NotColumn]
        public string B26String
        {
            get
            {
                if (!_B26.HasValue)
                {
                    return null;
                }
                else
                {
                    return _B26.ToString();
                }
            }
            set
            {
                bool val;
                if (bool.TryParse(value, out val))
                {
                    this._B26 = val;
                }
                else
                {
                    this._B26 = null;
                }
            }
        }

        [XmlIgnore]
        [Column, Nullable]
        public bool? B26
        {
            get { return _B26; }
            set { _B26 = value; }
        }

        [XmlIgnore]
        [NotColumn]
        private bool? _B27;

        [XmlElement("B27")]
        [NotColumn]
        public string B27String
        {
            get
            {
                if (!_B27.HasValue)
                {
                    return null;
                }
                else
                {
                    return _B27.ToString();
                }
            }
            set
            {
                bool val;
                if (bool.TryParse(value, out val))
                {
                    this._B27 = val;
                }
                else
                {
                    this._B27 = null;
                }
            }
        }

        [XmlIgnore]
        [Column, Nullable]
        public bool? B27
        {
            get { return _B27; }
            set { _B27 = value; }
        }

        [XmlIgnore]
        [NotColumn]
        private bool? _B28;

        [XmlElement("B28")]
        [NotColumn]
        public string B28String
        {
            get
            {
                if (!_B28.HasValue)
                {
                    return null;
                }
                else
                {
                    return _B28.ToString();
                }
            }
            set
            {
                bool val;
                if (bool.TryParse(value, out val))
                {
                    this._B28 = val;
                }
                else
                {
                    this._B28 = null;
                }
            }
        }

        [XmlIgnore]
        [Column, Nullable]
        public bool? B28
        {
            get { return _B28; }
            set { _B28 = value; }
        }

        [XmlIgnore]
        [NotColumn]
        private bool? _B29;

        [XmlElement("B29")]
        [NotColumn]
        public string B29String
        {
            get
            {
                if (!_B29.HasValue)
                {
                    return null;
                }
                else
                {
                    return _B29.ToString();
                }
            }
            set
            {
                bool val;
                if (bool.TryParse(value, out val))
                {
                    this._B29 = val;
                }
                else
                {
                    this._B29 = null;
                }
            }
        }

        [XmlIgnore]
        [Column, Nullable]
        public bool? B29
        {
            get { return _B29; }
            set { _B29 = value; }
        }

        [XmlIgnore]
        [NotColumn]
        private bool? _B30;

        [XmlElement("B30")]
        [NotColumn]
        public string B30String
        {
            get
            {
                if (!_B30.HasValue)
                {
                    return null;
                }
                else
                {
                    return _B30.ToString();
                }
            }
            set
            {
                bool val;
                if (bool.TryParse(value, out val))
                {
                    this._B30 = val;
                }
                else
                {
                    this._B30 = null;
                }
            }
        }

        [XmlIgnore]
        [Column, Nullable]
        public bool? B30
        {
            get { return _B30; }
            set { _B30 = value; }
        }

        [XmlIgnore]
        [NotColumn]
        private bool? _Comments;

        [XmlElement("Comments")]
        [NotColumn]
        public string CommentsString
        {
            get
            {
                if (!_Comments.HasValue)
                {
                    return null;
                }
                else
                {
                    return _Comments.ToString();
                }
            }
            set
            {
                bool val;
                if (bool.TryParse(value, out val))
                {
                    this._Comments = val;
                }
                else
                {
                    this._Comments = null;
                }
            }
        }

        [XmlIgnore]
        [Column, Nullable]
        public bool? Comments
        {
            get { return _Comments; }
            set { _Comments = value; }
        }

        [Column, Nullable]
        public string AuditoriumsCount { get; set; } // varchar(5)

        [Column, Nullable]
        public int ImageNumber { get; set; } // int

    }

    [Table(Schema = "loader", Name = "rbd_StationFormAuditoryFields")]
    public partial class rbd_StationFormAuditoryField
    {
        [PrimaryKey(1), NotNull]
        public Guid StationFormAuditoryFieldsId { get; set; } // uniqueidentifier

        [Column, NotNull]
        public Guid StationFormId { get; set; } // uniqueidentifier

        [PrimaryKey(2), NotNull]
        public int Region { get; set; } // int

        [Column, NotNull]
        public Guid StationFormsFieldsHelperId { get; set; } // uniqueidentifier

        [Column, NotNull]
        public string AuditoriumCode { get; set; } // varchar(4)

        [XmlIgnore]
        [NotColumn]
        private Guid? _AuditoriumID;

        [XmlElement("AuditoriumID")]
        [NotColumn]
        public string AuditoriumIDString
        {
            get
            {
                if (!_AuditoriumID.HasValue)
                {
                    return null;
                }
                else
                {
                    return _AuditoriumID.ToString();
                }
            }
            set
            {
                Guid guid;
                if (Guid.TryParse(value, out guid))
                {
                    this._AuditoriumID = guid;
                }
                else
                {
                    this._AuditoriumID = null;
                }
            }
        }

        [XmlIgnore]
        [Column, Nullable]
        public Guid? AuditoriumID
        {
            get { return _AuditoriumID; }
            set { _AuditoriumID = value; }
        }

        [XmlIgnore]
        [NotColumn]
        private int? _FieldValue1;

        [XmlElement("FieldValue1")]
        [NotColumn]
        public string FieldValue1String
        {
            get
            {
                if (!_FieldValue1.HasValue)
                {
                    return null;
                }
                else
                {
                    return _FieldValue1.ToString();
                }
            }
            set
            {
                int tni;
                if (int.TryParse(value, out tni))
                {
                    this._FieldValue1 = tni;
                }
                else
                {
                    this._FieldValue1 = null;
                }
            }
        }

        [XmlIgnore]
        [Column, Nullable]
        public int? FieldValue1
        {
            get { return _FieldValue1; }
            set { _FieldValue1 = value; }
        }

        [Column, Nullable]
        public string FieldValue2 { get; set; } // varchar(1024)

        [Column, Nullable]
        public byte[] FieldValue3 { get; set; } // image
    }

    [Table(Schema = "loader", Name = "rbd_StationFormFields")]
    public partial class rbd_StationFormField
    {
        [PrimaryKey(1), NotNull]
        public Guid StationFormFieldsId { get; set; } // uniqueidentifier

        [Column, NotNull]
        public Guid StationFormId { get; set; } // uniqueidentifier

        [PrimaryKey(2), NotNull]
        public int Region { get; set; } // int

        [Column, NotNull]
        public Guid StationFormsFieldsHelperId { get; set; } // uniqueidentifier

        [XmlIgnore]
        [NotColumn]
        private int? _FieldValue;

        [XmlElement("FieldValue")]
        [NotColumn]
        public string FieldValueString
        {
            get
            {
                if (!_FieldValue.HasValue)
                {
                    return null;
                }
                else
                {
                    return _FieldValue.ToString();
                }
            }
            set
            {
                int tni;
                if (int.TryParse(value, out tni))
                {
                    this._FieldValue = tni;
                }
                else
                {
                    this._FieldValue = null;
                }
            }
        }

        [XmlIgnore]
        [Column, Nullable]
        public int? FieldValue
        {
            get { return _FieldValue; }
            set { _FieldValue = value; }
        }

        [Column, Nullable]
        public string FieldDesc { get; set; } // varchar(255)
    }

    [Table(Schema = "loader", Name = "rbd_StationsExams")]
    public partial class rbd_StationsExam
    {
        [PrimaryKey(2), NotNull]
        public int REGION { get; set; } // int

        [PrimaryKey(1), NotNull]
        public Guid StationsExamsID { get; set; } // uniqueidentifier

        [Column, NotNull]
        public Guid StationID { get; set; } // uniqueidentifier

        [Column, NotNull]
        public int ExamGlobalID { get; set; } // int

        [XmlIgnore]
        [NotColumn]
        private int? _PlacesCount;

        [XmlElement("PlacesCount")]
        [NotColumn]
        public string PlacesCountString
        {
            get
            {
                if (!_PlacesCount.HasValue)
                {
                    return null;
                }
                else
                {
                    return _PlacesCount.ToString();
                }
            }
            set
            {
                int tni;
                if (int.TryParse(value, out tni))
                {
                    this._PlacesCount = tni;
                }
                else
                {
                    this._PlacesCount = null;
                }
            }
        }

        [XmlIgnore]
        [Column, Nullable]
        public int? PlacesCount
        {
            get { return _PlacesCount; }
            set { _PlacesCount = value; }
        }

        [Column, NotNull]
        public bool LockOnStation { get; set; } // bit



        [XmlIgnore]
        [NotColumn]
        private DateTime _CreateDate;

        [XmlElement("CreateDate")]
        [NotColumn]
        public string CreateDateString
        {
            get
            {
                return _CreateDate.ToString("o");
            }
            set
            {
                this._CreateDate = DateTime.Parse(value);
            }
        }

        [XmlIgnore]
        [Column, NotNull]
        public DateTime CreateDate
        {
            get { return _CreateDate; }
            set { _CreateDate = value; }
        }

        [XmlIgnore]
        [NotColumn]
        private DateTime _UpdateDate;

        [XmlElement("UpdateDate")]
        [NotColumn]
        public string UpdateDateString
        {
            get
            {
                return _UpdateDate.ToString("o");
            }
            set
            {
                this._UpdateDate = DateTime.Parse(value);
            }
        }

        [XmlIgnore]
        [Column, NotNull]
        public DateTime UpdateDate
        {
            get { return _UpdateDate; }
            set { _UpdateDate = value; }
        }




        [XmlIgnore]
        [NotColumn]
        private DateTime? _ImportCreateDate;

        [XmlElement("ImportCreateDate")]
        [NotColumn]
        public string ImportCreateDateString
        {
            get
            {
                if (!_ImportCreateDate.HasValue)
                {
                    return null;
                }
                else
                {
                    return _ImportCreateDate.Value.ToString("o");
                }
            }
            set
            {
                DateTime dt;
                if (DateTime.TryParse(value, null, DateTimeStyles.AdjustToUniversal, out dt))
                {
                    this._ImportCreateDate = dt;
                }
                else
                {
                    this._ImportCreateDate = null;
                }
            }
        }

        [XmlIgnore]
        [Column, Nullable]
        public DateTime? ImportCreateDate
        {
            get { return _ImportCreateDate; }
            set { _ImportCreateDate = value; }
        }

        [XmlIgnore]
        [NotColumn]
        private DateTime? _ImportUpdateDate;

        [XmlElement("ImportUpdateDate")]
        [NotColumn]
        public string ImportUpdateDateString
        {
            get
            {
                if (!_ImportUpdateDate.HasValue)
                {
                    return null;
                }
                else
                {
                    return _ImportUpdateDate.Value.ToString("o");
                }
            }
            set
            {
                DateTime dt;
                if (DateTime.TryParse(value, null, DateTimeStyles.AdjustToUniversal, out dt))
                {
                    this._ImportUpdateDate = dt;
                }
                else
                {
                    this._ImportUpdateDate = null;
                }
            }
        }

        [XmlIgnore]
        [Column, Nullable]
        public DateTime? ImportUpdateDate
        {
            get { return _ImportUpdateDate; }
            set { _ImportUpdateDate = value; }
        }

        [XmlIgnore]
        [NotColumn]
        private bool? _IsDeleted;

        [XmlElement("IsDeleted")]
        [NotColumn]
        public string IsDeletedString
        {
            get
            {
                if (!_IsDeleted.HasValue)
                {
                    return null;
                }
                else
                {
                    return _IsDeleted.ToString();
                }
            }
            set
            {
                bool val;
                if (bool.TryParse(value, out val))
                {
                    this._IsDeleted = val;
                }
                else
                {
                    this._IsDeleted = null;
                }
            }
        }

        [XmlIgnore]
        [Column, Nullable]
        public bool? IsDeleted
        {
            get { return _IsDeleted; }
            set { _IsDeleted = value; }
        }

        [Column, NotNull]
        public bool IsAutoAppoint { get; set; } // bit
    }

    [Table(Schema = "loader", Name = "rbd_StationWorkers")]
    public partial class rbd_StationWorker
    {
        [PrimaryKey(1), NotNull]
        public Guid StationWorkerID { get; set; } // uniqueidentifier

        [PrimaryKey(2), NotNull]
        public int REGION { get; set; } // int

        [XmlIgnore]
        [NotColumn]
        private int? _DocumentTypeCode;

        [XmlElement("DocumentTypeCode")]
        [NotColumn]
        public string DocumentTypeCodeString
        {
            get
            {
                if (!_DocumentTypeCode.HasValue)
                {
                    return null;
                }
                else
                {
                    return _DocumentTypeCode.ToString();
                }
            }
            set
            {
                int tni;
                if (int.TryParse(value, out tni))
                {
                    this._DocumentTypeCode = tni;
                }
                else
                {
                    this._DocumentTypeCode = null;
                }
            }
        }

        [XmlIgnore]
        [Column, Nullable]
        public int? DocumentTypeCode
        {
            get { return _DocumentTypeCode; }
            set { _DocumentTypeCode = value; }
        }

        [XmlIgnore]
        [NotColumn]
        private int? _StationWorkerCode;

        [XmlElement("StationWorkerCode")]
        [NotColumn]
        public string StationWorkerCodeString
        {
            get
            {
                if (!_StationWorkerCode.HasValue)
                {
                    return null;
                }
                else
                {
                    return _StationWorkerCode.ToString();
                }
            }
            set
            {
                int tni;
                if (int.TryParse(value, out tni))
                {
                    this._StationWorkerCode = tni;
                }
                else
                {
                    this._StationWorkerCode = null;
                }
            }
        }

        [XmlIgnore]
        [Column, Nullable]
        public int? StationWorkerCode
        {
            get { return _StationWorkerCode; }
            set { _StationWorkerCode = value; }
        }

        [Column, NotNull]
        public string Surname { get; set; } // varchar(80)

        [Column, NotNull]
        public string Name { get; set; } // varchar(80)

        [Column, Nullable]
        public string SecondName { get; set; } // varchar(80)

        [Column, Nullable]
        public string DocumentSeries { get; set; } // varchar(9)

        [Column, NotNull]
        public string DocumentNumber { get; set; } // varchar(12)

        [XmlIgnore]
        [NotColumn]
        private bool? _Sex;

        [XmlElement("Sex")]
        [NotColumn]
        public string SexString
        {
            get
            {
                if (!_Sex.HasValue)
                {
                    return null;
                }
                else
                {
                    return _Sex.ToString();
                }
            }
            set
            {
                bool val;
                if (bool.TryParse(value, out val))
                {
                    this._Sex = val;
                }
                else
                {
                    this._Sex = null;
                }
            }
        }

        [XmlIgnore]
        [Column, Nullable]
        public bool? Sex
        {
            get { return _Sex; }
            set { _Sex = value; }
        }

        [Column, NotNull]
        public int BirthYear { get; set; } // int

        [Column, Nullable]
        public string SchoolPosition { get; set; } // varchar(255)

        [Column, Nullable]
        public string NotSchoolJob { get; set; } // varchar(255)

        [Column, NotNull]
        public int DeleteType { get; set; } // int

        [XmlIgnore]
        [NotColumn]
        private Guid? _GovernmentID;

        [XmlElement("GovernmentID")]
        [NotColumn]
        public string GovernmentIDString
        {
            get
            {
                if (!_GovernmentID.HasValue)
                {
                    return null;
                }
                else
                {
                    return _GovernmentID.ToString();
                }
            }
            set
            {
                Guid guid;
                if (Guid.TryParse(value, out guid))
                {
                    this._GovernmentID = guid;
                }
                else
                {
                    this._GovernmentID = null;
                }
            }
        }

        [XmlIgnore]
        [Column, Nullable]
        public Guid? GovernmentID
        {
            get { return _GovernmentID; }
            set { _GovernmentID = value; }
        }

        [XmlIgnore]
        [NotColumn]
        private Guid? _SchoolID;

        [XmlElement("SchoolID")]
        [NotColumn]
        public string SchoolIDString
        {
            get
            {
                if (!_SchoolID.HasValue)
                {
                    return null;
                }
                else
                {
                    return _SchoolID.ToString();
                }
            }
            set
            {
                Guid guid;
                if (Guid.TryParse(value, out guid))
                {
                    this._SchoolID = guid;
                }
                else
                {
                    this._SchoolID = null;
                }
            }
        }

        [XmlIgnore]
        [Column, Nullable]
        public Guid? SchoolID
        {
            get { return _SchoolID; }
            set { _SchoolID = value; }
        }

        [XmlIgnore]
        [NotColumn]
        private int? _WorkerPositionID;

        [XmlElement("WorkerPositionID")]
        [NotColumn]
        public string WorkerPositionIDString
        {
            get
            {
                if (!_WorkerPositionID.HasValue)
                {
                    return null;
                }
                else
                {
                    return _WorkerPositionID.ToString();
                }
            }
            set
            {
                int tni;
                if (int.TryParse(value, out tni))
                {
                    this._WorkerPositionID = tni;
                }
                else
                {
                    this._WorkerPositionID = null;
                }
            }
        }

        [XmlIgnore]
        [Column, Nullable]
        public int? WorkerPositionID
        {
            get { return _WorkerPositionID; }
            set { _WorkerPositionID = value; }
        }

        [XmlIgnore]
        [NotColumn]
        private bool? _Imported;

        [XmlElement("Imported")]
        [NotColumn]
        public string ImportedString
        {
            get
            {
                if (!_Imported.HasValue)
                {
                    return null;
                }
                else
                {
                    return _Imported.ToString();
                }
            }
            set
            {
                bool val;
                if (bool.TryParse(value, out val))
                {
                    this._Imported = val;
                }
                else
                {
                    this._Imported = null;
                }
            }
        }

        [XmlIgnore]
        [Column, Nullable]
        public bool? Imported
        {
            get { return _Imported; }
            set { _Imported = value; }
        }

        [XmlIgnore]
        [NotColumn]
        private DateTime _CreateDate;

        [XmlElement("CreateDate")]
        [NotColumn]
        public string CreateDateString
        {
            get
            {
                return _CreateDate.ToString("o");
            }
            set
            {
                this._CreateDate = DateTime.Parse(value);
            }
        }

        [XmlIgnore]
        [Column, NotNull]
        public DateTime CreateDate
        {
            get { return _CreateDate; }
            set { _CreateDate = value; }
        }

        [XmlIgnore]
        [NotColumn]
        private DateTime _UpdateDate;

        [XmlElement("UpdateDate")]
        [NotColumn]
        public string UpdateDateString
        {
            get
            {
                return _UpdateDate.ToString("o");
            }
            set
            {
                this._UpdateDate = DateTime.Parse(value);
            }
        }

        [XmlIgnore]
        [Column, NotNull]
        public DateTime UpdateDate
        {
            get { return _UpdateDate; }
            set { _UpdateDate = value; }
        }




        [XmlIgnore]
        [NotColumn]
        private DateTime? _ImportCreateDate;

        [XmlElement("ImportCreateDate")]
        [NotColumn]
        public string ImportCreateDateString
        {
            get
            {
                if (!_ImportCreateDate.HasValue)
                {
                    return null;
                }
                else
                {
                    return _ImportCreateDate.Value.ToString("o");
                }
            }
            set
            {
                DateTime dt;
                if (DateTime.TryParse(value, null, DateTimeStyles.AdjustToUniversal, out dt))
                {
                    this._ImportCreateDate = dt;
                }
                else
                {
                    this._ImportCreateDate = null;
                }
            }
        }

        [XmlIgnore]
        [Column, Nullable]
        public DateTime? ImportCreateDate
        {
            get { return _ImportCreateDate; }
            set { _ImportCreateDate = value; }
        }

        [XmlIgnore]
        [NotColumn]
        private DateTime? _ImportUpdateDate;

        [XmlElement("ImportUpdateDate")]
        [NotColumn]
        public string ImportUpdateDateString
        {
            get
            {
                if (!_ImportUpdateDate.HasValue)
                {
                    return null;
                }
                else
                {
                    return _ImportUpdateDate.Value.ToString("o");
                }
            }
            set
            {
                DateTime dt;
                if (DateTime.TryParse(value, null, DateTimeStyles.AdjustToUniversal, out dt))
                {
                    this._ImportUpdateDate = dt;
                }
                else
                {
                    this._ImportUpdateDate = null;
                }
            }
        }

        [XmlIgnore]
        [Column, Nullable]
        public DateTime? ImportUpdateDate
        {
            get { return _ImportUpdateDate; }
            set { _ImportUpdateDate = value; }
        }


        [XmlIgnore]
        [NotColumn]
        private int? _PrecedingYear;

        [XmlElement("PrecedingYear")]
        [NotColumn]
        public string PrecedingYearString
        {
            get
            {
                if (!_PrecedingYear.HasValue)
                {
                    return null;
                }
                else
                {
                    return _PrecedingYear.ToString();
                }
            }
            set
            {
                int tni;
                if (int.TryParse(value, out tni))
                {
                    this._PrecedingYear = tni;
                }
                else
                {
                    this._PrecedingYear = null;
                }
            }
        }

        [XmlIgnore]
        [Column, Nullable]
        public int? PrecedingYear
        {
            get { return _PrecedingYear; }
            set { _PrecedingYear = value; }
        }

        [XmlIgnore]
        [NotColumn]
        private int? _Seniority;

        [XmlElement("Seniority")]
        [NotColumn]
        public string SeniorityString
        {
            get
            {
                if (!_Seniority.HasValue)
                {
                    return null;
                }
                else
                {
                    return _Seniority.ToString();
                }
            }
            set
            {
                int tni;
                if (int.TryParse(value, out tni))
                {
                    this._Seniority = tni;
                }
                else
                {
                    this._Seniority = null;
                }
            }
        }

        [XmlIgnore]
        [Column, Nullable]
        public int? Seniority
        {
            get { return _Seniority; }
            set { _Seniority = value; }
        }

        [XmlIgnore]
        [NotColumn]
        private int? _EducationTypeID;

        [XmlElement("EducationTypeID")]
        [NotColumn]
        public string EducationTypeIDString
        {
            get
            {
                if (!_EducationTypeID.HasValue)
                {
                    return null;
                }
                else
                {
                    return _EducationTypeID.ToString();
                }
            }
            set
            {
                int tni;
                if (int.TryParse(value, out tni))
                {
                    this._EducationTypeID = tni;
                }
                else
                {
                    this._EducationTypeID = null;
                }
            }
        }

        [XmlIgnore]
        [Column, Nullable]
        public int? EducationTypeID
        {
            get { return _EducationTypeID; }
            set { _EducationTypeID = value; }
        }

        [Column, Nullable]
        public string SWorkerCategory { get; set; } // varchar(255)

        [XmlIgnore]
        [NotColumn]
        private Guid? _CertificateKeyID;

        [XmlElement("CertificateKeyID")]
        [NotColumn]
        public string CertificateKeyIDString
        {
            get
            {
                if (!_CertificateKeyID.HasValue)
                {
                    return null;
                }
                else
                {
                    return _CertificateKeyID.ToString();
                }
            }
            set
            {
                Guid guid;
                if (Guid.TryParse(value, out guid))
                {
                    this._CertificateKeyID = guid;
                }
                else
                {
                    this._CertificateKeyID = null;
                }
            }
        }

        [XmlIgnore]
        [Column, Nullable]
        public Guid? CertificateKeyID
        {
            get { return _CertificateKeyID; }
            set { _CertificateKeyID = value; }
        }

        [Column, Nullable]
        public string Phones { get; set; } // varchar(255)

        [Column, Nullable]
        public string Mails { get; set; } // varchar(255)
    }

    [Table(Schema = "loader", Name = "rbd_StationWorkerOnExam")]
    public partial class rbd_StationWorkerOnExam
    {
        [PrimaryKey(1), NotNull]
        public int REGION { get; set; } // int

        [PrimaryKey(2), NotNull]
        public Guid StationWorkerOnExamID { get; set; } // uniqueidentifier

        [Column, NotNull]
        public int SWorkerPositionID { get; set; } // int

        [Column, NotNull]
        public Guid StationsExamsID { get; set; } // uniqueidentifier

        [XmlIgnore]
        [NotColumn]
        private Guid? _AuditoriumID;

        [XmlElement("AuditoriumID")]
        [NotColumn]
        public string AuditoriumIDString
        {
            get
            {
                if (!_AuditoriumID.HasValue)
                {
                    return null;
                }
                else
                {
                    return _AuditoriumID.ToString();
                }
            }
            set
            {
                Guid guid;
                if (Guid.TryParse(value, out guid))
                {
                    this._AuditoriumID = guid;
                }
                else
                {
                    this._AuditoriumID = null;
                }
            }
        }

        [XmlIgnore]
        [Column, Nullable]
        public Guid? AuditoriumID
        {
            get { return _AuditoriumID; }
            set { _AuditoriumID = value; }
        }

        [XmlIgnore]
        [NotColumn]
        private Guid? _StationExamAuditoryID;

        [XmlElement("StationExamAuditoryID")]
        [NotColumn]
        public string StationExamAuditoryIDString
        {
            get
            {
                if (!_StationExamAuditoryID.HasValue)
                {
                    return null;
                }
                else
                {
                    return _StationExamAuditoryID.ToString();
                }
            }
            set
            {
                Guid guid;
                if (Guid.TryParse(value, out guid))
                {
                    this._StationExamAuditoryID = guid;
                }
                else
                {
                    this._StationExamAuditoryID = null;
                }
            }
        }

        [XmlIgnore]
        [Column, Nullable]
        public Guid? StationExamAuditoryID
        {
            get { return _StationExamAuditoryID; }
            set { _StationExamAuditoryID = value; }
        }

        [Column, NotNull]
        public Guid StationWorkerOnStationID { get; set; } // uniqueidentifier

        [Column, NotNull]
        public Guid StationId { get; set; } // uniqueidentifier

        [Column, NotNull]
        public Guid StationWorkerId { get; set; } // uniqueidentifier



        [XmlIgnore]
        [NotColumn]
        private DateTime _CreateDate;

        [XmlElement("CreateDate")]
        [NotColumn]
        public string CreateDateString
        {
            get
            {
                return _CreateDate.ToString("o");
            }
            set
            {
                this._CreateDate = DateTime.Parse(value);
            }
        }

        [XmlIgnore]
        [Column, NotNull]
        public DateTime CreateDate
        {
            get { return _CreateDate; }
            set { _CreateDate = value; }
        }

        [XmlIgnore]
        [NotColumn]
        private DateTime _UpdateDate;

        [XmlElement("UpdateDate")]
        [NotColumn]
        public string UpdateDateString
        {
            get
            {
                return _UpdateDate.ToString("o");
            }
            set
            {
                this._UpdateDate = DateTime.Parse(value);
            }
        }

        [XmlIgnore]
        [Column, NotNull]
        public DateTime UpdateDate
        {
            get { return _UpdateDate; }
            set { _UpdateDate = value; }
        }




        [XmlIgnore]
        [NotColumn]
        private DateTime? _ImportCreateDate;

        [XmlElement("ImportCreateDate")]
        [NotColumn]
        public string ImportCreateDateString
        {
            get
            {
                if (!_ImportCreateDate.HasValue)
                {
                    return null;
                }
                else
                {
                    return _ImportCreateDate.Value.ToString("o");
                }
            }
            set
            {
                DateTime dt;
                if (DateTime.TryParse(value, null, DateTimeStyles.AdjustToUniversal, out dt))
                {
                    this._ImportCreateDate = dt;
                }
                else
                {
                    this._ImportCreateDate = null;
                }
            }
        }

        [XmlIgnore]
        [Column, Nullable]
        public DateTime? ImportCreateDate
        {
            get { return _ImportCreateDate; }
            set { _ImportCreateDate = value; }
        }

        [XmlIgnore]
        [NotColumn]
        private DateTime? _ImportUpdateDate;

        [XmlElement("ImportUpdateDate")]
        [NotColumn]
        public string ImportUpdateDateString
        {
            get
            {
                if (!_ImportUpdateDate.HasValue)
                {
                    return null;
                }
                else
                {
                    return _ImportUpdateDate.Value.ToString("o");
                }
            }
            set
            {
                DateTime dt;
                if (DateTime.TryParse(value, null, DateTimeStyles.AdjustToUniversal, out dt))
                {
                    this._ImportUpdateDate = dt;
                }
                else
                {
                    this._ImportUpdateDate = null;
                }
            }
        }

        [XmlIgnore]
        [Column, Nullable]
        public DateTime? ImportUpdateDate
        {
            get { return _ImportUpdateDate; }
            set { _ImportUpdateDate = value; }
        }

        [XmlIgnore]
        [NotColumn]
        private bool? _IsDeleted;

        [XmlElement("IsDeleted")]
        [NotColumn]
        public string IsDeletedString
        {
            get
            {
                if (!_IsDeleted.HasValue)
                {
                    return null;
                }
                else
                {
                    return _IsDeleted.ToString();
                }
            }
            set
            {
                bool val;
                if (bool.TryParse(value, out val))
                {
                    this._IsDeleted = val;
                }
                else
                {
                    this._IsDeleted = null;
                }
            }
        }

        [XmlIgnore]
        [Column, Nullable]
        public bool? IsDeleted
        {
            get { return _IsDeleted; }
            set { _IsDeleted = value; }
        }

        [XmlIgnore]
        [NotColumn]
        private Guid? _OrganizationRolesID;

        [XmlElement("OrganizationRolesID")]
        [NotColumn]
        public string OrganizationRolesIDString
        {
            get
            {
                if (!_OrganizationRolesID.HasValue)
                {
                    return null;
                }
                else
                {
                    return _OrganizationRolesID.ToString();
                }
            }
            set
            {
                Guid guid;
                if (Guid.TryParse(value, out guid))
                {
                    this._OrganizationRolesID = guid;
                }
                else
                {
                    this._OrganizationRolesID = null;
                }
            }
        }

        [XmlIgnore]
        [Column, Nullable]
        public Guid? OrganizationRolesID
        {
            get { return _OrganizationRolesID; }
            set { _OrganizationRolesID = value; }
        }

        [XmlIgnore]
        [NotColumn]
        private int? _SWorkerRoleID;

        [XmlElement("SWorkerRoleID")]
        [NotColumn]
        public string SWorkerRoleIDString
        {
            get
            {
                if (!_SWorkerRoleID.HasValue)
                {
                    return null;
                }
                else
                {
                    return _SWorkerRoleID.ToString();
                }
            }
            set
            {
                int tni;
                if (int.TryParse(value, out tni))
                {
                    this._SWorkerRoleID = tni;
                }
                else
                {
                    this._SWorkerRoleID = null;
                }
            }
        }

        [XmlIgnore]
        [Column, Nullable]
        public int? SWorkerRoleID
        {
            get { return _SWorkerRoleID; }
            set { _SWorkerRoleID = value; }
        }
    }

    [Table(Schema = "loader", Name = "rbd_StationWorkerOnStation")]
    public partial class rbd_StationWorkerOnStation
    {
        [PrimaryKey, NotNull]
        public Guid StationWorkerOnStationID { get; set; } // uniqueidentifier

        [Column, NotNull]
        public Guid StationId { get; set; } // uniqueidentifier

        [Column, NotNull]
        public Guid StationWorkerId { get; set; } // uniqueidentifier

        [Column, NotNull]
        public int WorkerType { get; set; } // int

        [Column, NotNull]
        public int SWorkerPositionID { get; set; } // int

        [Column, NotNull]
        public int Region { get; set; } // int

        [XmlIgnore]
        [NotColumn]
        private DateTime _CreateDate;

        [XmlElement("CreateDate")]
        [NotColumn]
        public string CreateDateString
        {
            get
            {
                return _CreateDate.ToString("o");
            }
            set
            {
                this._CreateDate = DateTime.Parse(value);
            }
        }

        [XmlIgnore]
        [Column, NotNull]
        public DateTime CreateDate
        {
            get { return _CreateDate; }
            set { _CreateDate = value; }
        }

        [XmlIgnore]
        [NotColumn]
        private DateTime _UpdateDate;

        [XmlElement("UpdateDate")]
        [NotColumn]
        public string UpdateDateString
        {
            get
            {
                return _UpdateDate.ToString("o");
            }
            set
            {
                this._UpdateDate = DateTime.Parse(value);
            }
        }

        [XmlIgnore]
        [Column, NotNull]
        public DateTime UpdateDate
        {
            get { return _UpdateDate; }
            set { _UpdateDate = value; }
        }

        [XmlIgnore]
        [NotColumn]
        private DateTime? _ImportCreateDate;

        [XmlElement("ImportCreateDate")]
        [NotColumn]
        public string ImportCreateDateString
        {
            get
            {
                if (!_ImportCreateDate.HasValue)
                {
                    return null;
                }
                else
                {
                    return _ImportCreateDate.Value.ToString("o");
                }
            }
            set
            {
                DateTime dt;
                if (DateTime.TryParse(value, null, DateTimeStyles.AdjustToUniversal, out dt))
                {
                    this._ImportCreateDate = dt;
                }
                else
                {
                    this._ImportCreateDate = null;
                }
            }
        }

        [XmlIgnore]
        [Column, Nullable]
        public DateTime? ImportCreateDate
        {
            get { return _ImportCreateDate; }
            set { _ImportCreateDate = value; }
        }

        [XmlIgnore]
        [NotColumn]
        private DateTime? _ImportUpdateDate;

        [XmlElement("ImportUpdateDate")]
        [NotColumn]
        public string ImportUpdateDateString
        {
            get
            {
                if (!_ImportUpdateDate.HasValue)
                {
                    return null;
                }
                else
                {
                    return _ImportUpdateDate.Value.ToString("o");
                }
            }
            set
            {
                DateTime dt;
                if (DateTime.TryParse(value, null, DateTimeStyles.AdjustToUniversal, out dt))
                {
                    this._ImportUpdateDate = dt;
                }
                else
                {
                    this._ImportUpdateDate = null;
                }
            }
        }

        [XmlIgnore]
        [Column, Nullable]
        public DateTime? ImportUpdateDate
        {
            get { return _ImportUpdateDate; }
            set { _ImportUpdateDate = value; }
        }

        [XmlIgnore]
        [NotColumn]
        private bool? _IsDeleted;

        [XmlElement("IsDeleted")]
        [NotColumn]
        public string IsDeletedString
        {
            get
            {
                if (!_IsDeleted.HasValue)
                {
                    return null;
                }
                else
                {
                    return _IsDeleted.ToString();
                }
            }
            set
            {
                bool val;
                if (bool.TryParse(value, out val))
                {
                    this._IsDeleted = val;
                }
                else
                {
                    this._IsDeleted = null;
                }
            }
        }

        [XmlIgnore]
        [Column, Nullable]
        public bool? IsDeleted
        {
            get { return _IsDeleted; }
            set { _IsDeleted = value; }
        }
    }

    [Table(Schema = "loader", Name = "rbd_StationWorkersAccreditation")]
    public partial class rbd_StationWorkersAccreditation
    {
        [PrimaryKey, NotNull]
        public Guid SWorkerAccreditationID { get; set; } // uniqueidentifier

        [Column, NotNull]
        public int Region { get; set; } // int

        [Column, NotNull]
        public Guid StationWorkerID { get; set; } // uniqueidentifier

        [XmlIgnore]
        [NotColumn]
        private Guid? _GovernmentID;

        [XmlElement("GovernmentID")]
        [NotColumn]
        public string GovernmentIDString
        {
            get
            {
                if (!_GovernmentID.HasValue)
                {
                    return null;
                }
                else
                {
                    return _GovernmentID.ToString();
                }
            }
            set
            {
                Guid guid;
                if (Guid.TryParse(value, out guid))
                {
                    this._GovernmentID = guid;
                }
                else
                {
                    this._GovernmentID = null;
                }
            }
        }

        [XmlIgnore]
        [Column, Nullable]
        public Guid? GovernmentID
        {
            get { return _GovernmentID; }
            set { _GovernmentID = value; }
        }

        [Column, Nullable]
        public string NotGovernmentAccreditation { get; set; } // varchar(255)

        [Column, NotNull]
        public string DocumentNumber { get; set; } // varchar(255)

        [Column, NotNull]
        public int IsFamily { get; set; } // int

        [XmlIgnore]
        [NotColumn]
        private DateTime _DateFrom;

        [XmlElement("DateFrom")]
        [NotColumn]
        public string DateFromString
        {
            get
            {
                return _DateFrom.ToString("o");
            }
            set
            {
                this._DateFrom = DateTime.Parse(value);
            }
        }

        [XmlIgnore]
        [Column, NotNull]
        public DateTime DateFrom
        {
            get { return _DateFrom; }
            set { _DateFrom = value; }
        }

        [XmlIgnore]
        [NotColumn]
        private DateTime? _DateTo;

        [XmlElement("DateTo")]
        [NotColumn]
        public string DateToString
        {
            get
            {
                if (!_DateTo.HasValue)
                {
                    return null;
                }
                else
                {
                    return _DateTo.Value.ToString("o");
                }
            }
            set
            {
                DateTime dt;
                if (DateTime.TryParse(value, null, DateTimeStyles.AdjustToUniversal, out dt))
                {
                    this._DateTo = dt;
                }
                else
                {
                    this._DateTo = null;
                }
            }
        }

        [XmlIgnore]
        [Column, Nullable]
        public DateTime? DateTo
        {
            get { return _DateTo; }
            set { _DateTo = value; }
        }

        [XmlIgnore]
        [NotColumn]
        private DateTime _CreateDate;

        [XmlElement("CreateDate")]
        [NotColumn]
        public string CreateDateString
        {
            get
            {
                return _CreateDate.ToString("o");
            }
            set
            {
                this._CreateDate = DateTime.Parse(value);
            }
        }

        [XmlIgnore]
        [Column, NotNull]
        public DateTime CreateDate
        {
            get { return _CreateDate; }
            set { _CreateDate = value; }
        }

        [XmlIgnore]
        [NotColumn]
        private DateTime _UpdateDate;

        [XmlElement("UpdateDate")]
        [NotColumn]
        public string UpdateDateString
        {
            get
            {
                return _UpdateDate.ToString("o");
            }
            set
            {
                this._UpdateDate = DateTime.Parse(value);
            }
        }

        [XmlIgnore]
        [Column, NotNull]
        public DateTime UpdateDate
        {
            get { return _UpdateDate; }
            set { _UpdateDate = value; }
        }

        [XmlIgnore]
        [NotColumn]
        private DateTime? _ImportCreateDate;

        [XmlElement("ImportCreateDate")]
        [NotColumn]
        public string ImportCreateDateString
        {
            get
            {
                if (!_ImportCreateDate.HasValue)
                {
                    return null;
                }
                else
                {
                    return _ImportCreateDate.Value.ToString("o");
                }
            }
            set
            {
                DateTime dt;
                if (DateTime.TryParse(value, null, DateTimeStyles.AdjustToUniversal, out dt))
                {
                    this._ImportCreateDate = dt;
                }
                else
                {
                    this._ImportCreateDate = null;
                }
            }
        }

        [XmlIgnore]
        [Column, Nullable]
        public DateTime? ImportCreateDate
        {
            get { return _ImportCreateDate; }
            set { _ImportCreateDate = value; }
        }

        [XmlIgnore]
        [NotColumn]
        private DateTime? _ImportUpdateDate;

        [XmlElement("ImportUpdateDate")]
        [NotColumn]
        public string ImportUpdateDateString
        {
            get
            {
                if (!_ImportUpdateDate.HasValue)
                {
                    return null;
                }
                else
                {
                    return _ImportUpdateDate.Value.ToString("o");
                }
            }
            set
            {
                DateTime dt;
                if (DateTime.TryParse(value, null, DateTimeStyles.AdjustToUniversal, out dt))
                {
                    this._ImportUpdateDate = dt;
                }
                else
                {
                    this._ImportUpdateDate = null;
                }
            }
        }

        [XmlIgnore]
        [Column, Nullable]
        public DateTime? ImportUpdateDate
        {
            get { return _ImportUpdateDate; }
            set { _ImportUpdateDate = value; }
        }

    }

    [Table(Schema = "loader", Name = "rbd_StationWorkersPositions")]
    public partial class rbd_StationWorkersPosition
    {
        [PrimaryKey, NotNull]
        public Guid StationWorkersPositionID { get; set; } // uniqueidentifier

        [Column, NotNull]
        public int Region { get; set; } // int

        [Column, NotNull]
        public Guid StationWorkerID { get; set; } // uniqueidentifier

        [Column, NotNull]
        public int SWorkerPositionID { get; set; } // int

        [XmlIgnore]
        [NotColumn]
        private DateTime _CreateDate;

        [XmlElement("CreateDate")]
        [NotColumn]
        public string CreateDateString
        {
            get
            {
                return _CreateDate.ToString("o");
            }
            set
            {
                this._CreateDate = DateTime.Parse(value);
            }
        }

        [XmlIgnore]
        [Column, NotNull]
        public DateTime CreateDate
        {
            get { return _CreateDate; }
            set { _CreateDate = value; }
        }

        [XmlIgnore]
        [NotColumn]
        private DateTime _UpdateDate;

        [XmlElement("UpdateDate")]
        [NotColumn]
        public string UpdateDateString
        {
            get
            {
                return _UpdateDate.ToString("o");
            }
            set
            {
                this._UpdateDate = DateTime.Parse(value);
            }
        }

        [XmlIgnore]
        [Column, NotNull]
        public DateTime UpdateDate
        {
            get { return _UpdateDate; }
            set { _UpdateDate = value; }
        }

        [XmlIgnore]
        [NotColumn]
        private DateTime? _ImportCreateDate;

        [XmlElement("ImportCreateDate")]
        [NotColumn]
        public string ImportCreateDateString
        {
            get
            {
                if (!_ImportCreateDate.HasValue)
                {
                    return null;
                }
                else
                {
                    return _ImportCreateDate.Value.ToString("o");
                }
            }
            set
            {
                DateTime dt;
                if (DateTime.TryParse(value, null, DateTimeStyles.AdjustToUniversal, out dt))
                {
                    this._ImportCreateDate = dt;
                }
                else
                {
                    this._ImportCreateDate = null;
                }
            }
        }

        [XmlIgnore]
        [Column, Nullable]
        public DateTime? ImportCreateDate
        {
            get { return _ImportCreateDate; }
            set { _ImportCreateDate = value; }
        }

        [XmlIgnore]
        [NotColumn]
        private DateTime? _ImportUpdateDate;

        [XmlElement("ImportUpdateDate")]
        [NotColumn]
        public string ImportUpdateDateString
        {
            get
            {
                if (!_ImportUpdateDate.HasValue)
                {
                    return null;
                }
                else
                {
                    return _ImportUpdateDate.Value.ToString("o");
                }
            }
            set
            {
                DateTime dt;
                if (DateTime.TryParse(value, null, DateTimeStyles.AdjustToUniversal, out dt))
                {
                    this._ImportUpdateDate = dt;
                }
                else
                {
                    this._ImportUpdateDate = null;
                }
            }
        }

        [XmlIgnore]
        [Column, Nullable]
        public DateTime? ImportUpdateDate
        {
            get { return _ImportUpdateDate; }
            set { _ImportUpdateDate = value; }
        }

        [XmlIgnore]
        [NotColumn]
        private bool? _IsDeleted;

        [XmlElement("IsDeleted")]
        [NotColumn]
        public string IsDeletedString
        {
            get
            {
                if (!_IsDeleted.HasValue)
                {
                    return null;
                }
                else
                {
                    return _IsDeleted.ToString();
                }
            }
            set
            {
                bool val;
                if (bool.TryParse(value, out val))
                {
                    this._IsDeleted = val;
                }
                else
                {
                    this._IsDeleted = null;
                }
            }
        }

        [XmlIgnore]
        [Column, Nullable]
        public bool? IsDeleted
        {
            get { return _IsDeleted; }
            set { _IsDeleted = value; }
        }
    }

    [Table(Schema = "loader", Name = "rbd_StationWorkersSubjects")]
    public partial class rbd_StationWorkersSubject
    {
        [PrimaryKey(1), NotNull]
        public int REGION { get; set; } // int

        [PrimaryKey(2), NotNull]
        public Guid ID { get; set; } // uniqueidentifier

        [Column, NotNull]
        public int SubjectCode { get; set; } // int

        [Column, NotNull]
        public Guid StationWorkerID { get; set; } // uniqueidentifier

        [XmlIgnore]
        [NotColumn]
        private bool? _IsDeleted;

        [XmlElement("IsDeleted")]
        [NotColumn]
        public string IsDeletedString
        {
            get
            {
                if (!_IsDeleted.HasValue)
                {
                    return null;
                }
                else
                {
                    return _IsDeleted.ToString();
                }
            }
            set
            {
                bool val;
                if (bool.TryParse(value, out val))
                {
                    this._IsDeleted = val;
                }
                else
                {
                    this._IsDeleted = null;
                }
            }
        }

        [XmlIgnore]
        [Column, Nullable]
        public bool? IsDeleted
        {
            get { return _IsDeleted; }
            set { _IsDeleted = value; }
        }
    }

    [Table(Schema = "loader", Name = "res_Answers")]
    public partial class res_Answer
    {
        [PrimaryKey(2), NotNull]
        public int REGION { get; set; } // int

        [Column, NotNull]
        public Guid AnswerID { get; set; } // uniqueidentifier

        [PrimaryKey(1), NotNull]
        public Guid HumanTestFK { get; set; } // uniqueidentifier

        [PrimaryKey(3), NotNull]
        public int TaskTypeCode { get; set; } // int

        [PrimaryKey(4), NotNull]
        public int TaskNumber { get; set; } // int

        [Column, Nullable]
        public string AnswerValue { get; set; } // varchar(100)

        [Column, Nullable]
        public string ReplaceValue { get; set; } // varchar(100)

        [Column, NotNull]
        public int CategoryValue { get; set; } // int
    }

    [Table(Schema = "loader", Name = "res_Complects")]
    public partial class res_Complect
    {
        [PrimaryKey(2), NotNull]
        public int REGION { get; set; } // int

        [PrimaryKey(1), NotNull]
        public Guid ComplectID { get; set; } // uniqueidentifier

        [Column, Nullable]
        public string Barcode_AB { get; set; } // varchar(100)

        [Column, Nullable]
        public string Barcode_C { get; set; } // varchar(100)

        [Column, Nullable]
        public string Barcode_R { get; set; } // varchar(100)

        [Column, Nullable]
        public string Barcode_D { get; set; } // varchar(100)

        [XmlIgnore]
        [NotColumn]
        private Guid? _SheetFK_AB;

        [XmlElement("SheetFK_AB")]
        [NotColumn]
        public string SheetFK_ABString
        {
            get
            {
                if (!_SheetFK_AB.HasValue)
                {
                    return null;
                }
                else
                {
                    return _SheetFK_AB.ToString();
                }
            }
            set
            {
                Guid guid;
                if (Guid.TryParse(value, out guid))
                {
                    this._SheetFK_AB = guid;
                }
                else
                {
                    this._SheetFK_AB = null;
                }
            }
        }

        [XmlIgnore]
        [Column, Nullable]
        public Guid? SheetFK_AB
        {
            get { return _SheetFK_AB; }
            set { _SheetFK_AB = value; }
        }

        [XmlIgnore]
        [NotColumn]
        private Guid? _SheetFK_C;

        [XmlElement("SheetFK_C")]
        [NotColumn]
        public string SheetFK_CString
        {
            get
            {
                if (!_SheetFK_C.HasValue)
                {
                    return null;
                }
                else
                {
                    return _SheetFK_C.ToString();
                }
            }
            set
            {
                Guid guid;
                if (Guid.TryParse(value, out guid))
                {
                    this._SheetFK_C = guid;
                }
                else
                {
                    this._SheetFK_C = null;
                }
            }
        }

        [XmlIgnore]
        [Column, Nullable]
        public Guid? SheetFK_C
        {
            get { return _SheetFK_C; }
            set { _SheetFK_C = value; }
        }

        [XmlIgnore]
        [NotColumn]
        private Guid? _SheetFK_R;

        [XmlElement("SheetFK_R")]
        [NotColumn]
        public string SheetFK_RString
        {
            get
            {
                if (!_SheetFK_R.HasValue)
                {
                    return null;
                }
                else
                {
                    return _SheetFK_R.ToString();
                }
            }
            set
            {
                Guid guid;
                if (Guid.TryParse(value, out guid))
                {
                    this._SheetFK_R = guid;
                }
                else
                {
                    this._SheetFK_R = null;
                }
            }
        }

        [XmlIgnore]
        [Column, Nullable]
        public Guid? SheetFK_R
        {
            get { return _SheetFK_R; }
            set { _SheetFK_R = value; }
        }

        [XmlIgnore]
        [NotColumn]
        private Guid? _SheetFK_D;

        [XmlElement("SheetFK_D")]
        [NotColumn]
        public string SheetFK_DString
        {
            get
            {
                if (!_SheetFK_D.HasValue)
                {
                    return null;
                }
                else
                {
                    return _SheetFK_D.ToString();
                }
            }
            set
            {
                Guid guid;
                if (Guid.TryParse(value, out guid))
                {
                    this._SheetFK_D = guid;
                }
                else
                {
                    this._SheetFK_D = null;
                }
            }
        }

        [XmlIgnore]
        [Column, Nullable]
        public Guid? SheetFK_D
        {
            get { return _SheetFK_D; }
            set { _SheetFK_D = value; }
        }

        [Column, NotNull]
        public int RegionCode { get; set; } // int

        [Column, Nullable]
        public string DepartmentCode { get; set; } // varchar(100)

        [Column, NotNull]
        public int TestTypeCode { get; set; } // int

        [Column, NotNull]
        public int SubjectCode { get; set; } // int

        [Column, Nullable]
        public string ExamDate { get; set; } // varchar(100)

        [Column, NotNull]
        public int ZoneCode { get; set; } // int

        [Column, Nullable]
        public string StuffCode { get; set; } // varchar(100)

        [Column, NotNull]
        public int VariantCode { get; set; } // int

        [Column, NotNull]
        public bool IsTom { get; set; } // bit

        [XmlIgnore]
        [NotColumn]
        private byte? _ComplectType;

        [XmlElement("ComplectType")]
        [NotColumn]
        public string ComplectTypeString
        {
            get
            {
                if (!_ComplectType.HasValue)
                {
                    return null;
                }
                else
                {
                    return _ComplectType.ToString();
                }
            }
            set
            {
                byte val;
                if (byte.TryParse(value, out val))
                {
                    this._ComplectType = val;
                }
                else
                {
                    this._ComplectType = null;
                }
            }
        }

        [XmlIgnore]
        [Column, Nullable]
        public byte? ComplectType
        {
            get { return _ComplectType; }
            set { _ComplectType = value; }
        }

        [XmlIgnore]
        [NotColumn]
        private Guid? _ExchangedID;

        [XmlElement("ExchangedID")]
        [NotColumn]
        public string ExchangedIDString
        {
            get
            {
                if (!_ExchangedID.HasValue)
                {
                    return null;
                }
                else
                {
                    return _ExchangedID.ToString();
                }
            }
            set
            {
                Guid guid;
                if (Guid.TryParse(value, out guid))
                {
                    this._ExchangedID = guid;
                }
                else
                {
                    this._ExchangedID = null;
                }
            }
        }

        [XmlIgnore]
        [Column, Nullable]
        public Guid? ExchangedID
        {
            get { return _ExchangedID; }
            set { _ExchangedID = value; }
        }
    }

    [Table(Schema = "loader", Name = "res_HumanTests")]
    public partial class res_HumanTest
    {
        [PrimaryKey(2), NotNull]
        public int REGION { get; set; } // int

        [PrimaryKey(1), NotNull]
        public Guid HumanTestID { get; set; } // uniqueidentifier

        [Column, NotNull]
        public Guid ParticipantFK { get; set; } // uniqueidentifier

        [Column, NotNull]
        public Guid PackageFK { get; set; } // uniqueidentifier

        [Column, Nullable]
        public string FileName { get; set; } // varchar(100)

        [Column, NotNull]
        public int RegionCode { get; set; } // int

        [Column, Nullable]
        public string DepartmentCode { get; set; } // varchar(100)

        [Column, NotNull]
        public int TestTypeCode { get; set; } // int

        [Column, NotNull]
        public int WaveCode { get; set; } // int

        [Column, NotNull]
        public int SubjectCode { get; set; } // int

        [Column, Nullable]
        public string ExamDate { get; set; } // varchar(100)

        [Column, NotNull]
        public int StationCode { get; set; } // int

        [Column, Nullable]
        public string AuditoriumCode { get; set; } // varchar(100)

        [Column, NotNull]
        public int VariantCode { get; set; } // int

        [Column, NotNull]
        public int ProcessCondition { get; set; } // int

        [Column, NotNull]
        public int LicenseCondition { get; set; } // int

        [Column, NotNull]
        public int ReplicationCondition { get; set; } // int

        [Column, Nullable]
        public string Reserve01 { get; set; } // varchar(255)

        [Column, Nullable]
        public string Reserve02 { get; set; } // varchar(255)

        [Column, Nullable]
        public string Reserve03 { get; set; } // varchar(255)

        [Column, Nullable]
        public string Reserve04 { get; set; } // varchar(255)

        [Column, Nullable]
        public string Reserve05 { get; set; } // varchar(255)

        [Column, Nullable]
        public string Reserve06 { get; set; } // varchar(255)

        [Column, Nullable]
        public string Reserve07 { get; set; } // varchar(255)

        [Column, Nullable]
        public string Reserve08 { get; set; } // varchar(255)

        [Column, Nullable]
        public string Reserve09 { get; set; } // varchar(255)

        [Column, Nullable]
        public string Reserve10 { get; set; } // varchar(255)
    }

    [Table(Schema = "loader", Name = "res_Marks")]
    public partial class res_Mark
    {
        [PrimaryKey(2), NotNull]
        public int REGION { get; set; } // int

        [PrimaryKey(1), NotNull]
        public Guid HumanTestID { get; set; } // uniqueidentifier

        [Column, NotNull]
        public int PrimaryMark { get; set; } // int

        [Column, NotNull]
        public int PercentMark { get; set; } // int

        [Column, NotNull]
        public int Mark100 { get; set; } // int

        [Column, NotNull]
        public int Mark5 { get; set; } // int

        [Column, NotNull]
        public int MarkX { get; set; } // int

        [Column, NotNull]
        public double Rating { get; set; } // float

        [Column, NotNull]
        public int PrimaryMarkA { get; set; } // int

        [Column, Nullable]
        public string TestResultA { get; set; } // varchar(100)

        [Column, NotNull]
        public int PrimaryMarkB { get; set; } // int

        [Column, Nullable]
        public string TestResultB { get; set; } // varchar(100)

        [Column, NotNull]
        public int PrimaryMarkC { get; set; } // int

        [Column, Nullable]
        public string TestResultC { get; set; } // varchar(100)

        [Column, NotNull]
        public int PrimaryMarkD { get; set; } // int

        [Column, Nullable]
        public string TestResultD { get; set; } // varchar(100)
    }

    [Table(Schema = "loader", Name = "res_SubComplects")]
    public partial class res_SubComplect
    {
        [PrimaryKey(2), NotNull]
        public int REGION { get; set; } // int

        [PrimaryKey(1), NotNull]
        public Guid SubComplectID { get; set; } // uniqueidentifier

        [Column, Nullable]
        public string Barcode_KIM { get; set; } // varchar(100)

        [Column, Nullable]
        public string Barcode_R { get; set; } // varchar(100)

        [Column, Nullable]
        public string Barcode_D { get; set; } // varchar(100)

        [XmlIgnore]
        [NotColumn]
        private Guid? _SheetFK_R;

        [XmlElement("SheetFK_R")]
        [NotColumn]
        public string SheetFK_RString
        {
            get
            {
                if (!_SheetFK_R.HasValue)
                {
                    return null;
                }
                else
                {
                    return _SheetFK_R.ToString();
                }
            }
            set
            {
                Guid guid;
                if (Guid.TryParse(value, out guid))
                {
                    this._SheetFK_R = guid;
                }
                else
                {
                    this._SheetFK_R = null;
                }
            }
        }

        [XmlIgnore]
        [Column, Nullable]
        public Guid? SheetFK_R
        {
            get { return _SheetFK_R; }
            set { _SheetFK_R = value; }
        }

        [XmlIgnore]
        [NotColumn]
        private Guid? _SheetFK_D;

        [XmlElement("SheetFK_D")]
        [NotColumn]
        public string SheetFK_DString
        {
            get
            {
                if (!_SheetFK_D.HasValue)
                {
                    return null;
                }
                else
                {
                    return _SheetFK_D.ToString();
                }
            }
            set
            {
                Guid guid;
                if (Guid.TryParse(value, out guid))
                {
                    this._SheetFK_D = guid;
                }
                else
                {
                    this._SheetFK_D = null;
                }
            }
        }

        [XmlIgnore]
        [Column, Nullable]
        public Guid? SheetFK_D
        {
            get { return _SheetFK_D; }
            set { _SheetFK_D = value; }
        }

        [Column, NotNull]
        public int RegionCode { get; set; } // int

        [Column, Nullable]
        public string DepartmentCode { get; set; } // varchar(100)

        [Column, NotNull]
        public int TestTypeCode { get; set; } // int

        [Column, NotNull]
        public int SubjectCode { get; set; } // int

        [Column, Nullable]
        public string ExamDate { get; set; } // varchar(100)

        [Column, NotNull]
        public int ZoneCode { get; set; } // int

        [Column, Nullable]
        public string StuffCode { get; set; } // varchar(100)

        [Column, NotNull]
        public int VariantCode { get; set; } // int

        [Column, NotNull]
        public bool IsTom { get; set; } // bit
    }

    [Table(Schema = "loader", Name = "res_SubTests")]
    public partial class res_SubTest
    {
        [PrimaryKey(1), NotNull]
        public int REGION { get; set; } // int

        [PrimaryKey(2), NotNull]
        public Guid SubtestID { get; set; } // uniqueidentifier

        [PrimaryKey(3), NotNull]
        public Guid HumanTestID { get; set; } // uniqueidentifier

        [Column, NotNull]
        public Guid ParticipantFK { get; set; } // uniqueidentifier

        [XmlIgnore]
        [NotColumn]
        private Guid? _PackageFK;

        [XmlElement("PackageFK")]
        [NotColumn]
        public string PackageFKString
        {
            get
            {
                if (!_PackageFK.HasValue)
                {
                    return null;
                }
                else
                {
                    return _PackageFK.ToString();
                }
            }
            set
            {
                Guid guid;
                if (Guid.TryParse(value, out guid))
                {
                    this._PackageFK = guid;
                }
                else
                {
                    this._PackageFK = null;
                }
            }
        }

        [XmlIgnore]
        [Column, Nullable]
        public Guid? PackageFK
        {
            get { return _PackageFK; }
            set { _PackageFK = value; }
        }

        [PrimaryKey(4), NotNull]
        public int SubtestType { get; set; } // int

        [Column, NotNull]
        public sbyte ModuleCode { get; set; } // tinyint

        [Column, NotNull]
        public int TestTypeCode { get; set; } // int

        [Column, NotNull]
        public int WaveCode { get; set; } // int

        [Column, NotNull]
        public int SubjectCode { get; set; } // int

        [PrimaryKey(5), NotNull]
        public string SubtestName { get; set; } // nvarchar(50)

        [Column, NotNull]
        public string ExamDate { get; set; } // nvarchar(11)

        [Column, NotNull]
        public int StationCode { get; set; } // int

        [Column, Nullable]
        public string RunupAuditoriumCode { get; set; } // nvarchar(5)

        [Column, Nullable]
        public string AnswerAuditoriumCode { get; set; } // nvarchar(5)

        [Column, NotNull]
        public int VariantCode { get; set; } // int

        [Column, NotNull]
        public int ProcessCondition { get; set; } // int

        [Column, NotNull]
        public int ReplicationCondition { get; set; } // int

        [XmlIgnore]
        [NotColumn]
        private DateTime _UpdateDate;

        [XmlElement("UpdateDate")]
        [NotColumn]
        public string UpdateDateString
        {
            get
            {
                return _UpdateDate.ToString("o");
            }
            set
            {
                DateTime dt;
                if (DateTime.TryParse(value, null, DateTimeStyles.AdjustToUniversal, out dt))
                {
                    this._UpdateDate = dt;
                }
                else
                {
                    throw new DateTimeException(string.Format("Wrong date: {0}", value));
                }
            }
        }

        [XmlIgnore]
        [Column, NotNull]
        public DateTime UpdateDate
        {
            get { return _UpdateDate; }
            set { _UpdateDate = value; }
        }

        [Column, Nullable]
        public byte[] Tasks { get; set; } // varbinary(256)

        [XmlIgnore]
        [NotColumn]
        private int? _PrimaryMark;

        [XmlElement("PrimaryMark")]
        [NotColumn]
        public string PrimaryMarkString
        {
            get
            {
                if (!_PrimaryMark.HasValue)
                {
                    return null;
                }
                else
                {
                    return _PrimaryMark.ToString();
                }
            }
            set
            {
                int tni;
                if (int.TryParse(value, out tni))
                {
                    this._PrimaryMark = tni;
                }
                else
                {
                    this._PrimaryMark = null;
                }
            }
        }

        [XmlIgnore]
        [Column, Nullable]
        public int? PrimaryMark
        {
            get { return _PrimaryMark; }
            set { _PrimaryMark = value; }
        }

        [XmlIgnore]
        [NotColumn]
        private int? _Mark;

        [XmlElement("Mark")]
        [NotColumn]
        public string MarkString
        {
            get
            {
                if (!_Mark.HasValue)
                {
                    return null;
                }
                else
                {
                    return _Mark.ToString();
                }
            }
            set
            {
                int tni;
                if (int.TryParse(value, out tni))
                {
                    this._Mark = tni;
                }
                else
                {
                    this._Mark = null;
                }
            }
        }

        [XmlIgnore]
        [Column, Nullable]
        public int? Mark
        {
            get { return _Mark; }
            set { _Mark = value; }
        }

        [XmlIgnore]
        [NotColumn]
        private int? _Minimum;

        [XmlElement("Minimum")]
        [NotColumn]
        public string MinimumString
        {
            get
            {
                if (!_Minimum.HasValue)
                {
                    return null;
                }
                else
                {
                    return _Minimum.ToString();
                }
            }
            set
            {
                int tni;
                if (int.TryParse(value, out tni))
                {
                    this._Minimum = tni;
                }
                else
                {
                    this._Minimum = null;
                }
            }
        }

        [XmlIgnore]
        [Column, Nullable]
        public int? Minimum
        {
            get { return _Minimum; }
            set { _Minimum = value; }
        }
    }

    [Table(Schema = "loader", Name = "sht_Alts")]
    public partial class sht_Alt
    {
        [PrimaryKey(1), NotNull]
        public Guid AltID { get; set; } // uniqueidentifier

        [PrimaryKey(2), NotNull]
        public short REGION { get; set; } // smallint

        [Column, NotNull]
        public Guid SheetFK { get; set; } // uniqueidentifier

        [Column, NotNull]
        public string Barcode { get; set; } // nchar(13)

        [Column, Nullable]
        public string ProtocolCode { get; set; } // varchar(50)

        [XmlIgnore]
        [NotColumn]
        private Guid? _ExpertFK;

        [XmlElement("ExpertFK")]
        [NotColumn]
        public string ExpertFKString
        {
            get
            {
                if (!_ExpertFK.HasValue)
                {
                    return null;
                }
                else
                {
                    return _ExpertFK.ToString();
                }
            }
            set
            {
                Guid guid;
                if (Guid.TryParse(value, out guid))
                {
                    this._ExpertFK = guid;
                }
                else
                {
                    this._ExpertFK = null;
                }
            }
        }

        [XmlIgnore]
        [Column, Nullable]
        public Guid? ExpertFK
        {
            get { return _ExpertFK; }
            set { _ExpertFK = value; }
        }

        [Column, NotNull]
        public int ExpertCode { get; set; } // int

        [XmlIgnore]
        [NotColumn]
        private short? _IsThird;

        [XmlElement("IsThird")]
        [NotColumn]
        public string IsThirdString
        {
            get
            {
                if (!_IsThird.HasValue)
                {
                    return null;
                }
                else
                {
                    return _IsThird.ToString();
                }
            }
            set
            {
                short val;
                if (short.TryParse(value, out val))
                {
                    this._IsThird = val;
                }
                else
                {
                    this._IsThird = null;
                }
            }
        }

        [XmlIgnore]
        [Column, Nullable]
        public short? IsThird
        {
            get { return _IsThird; }
            set { _IsThird = value; }
        }

        [XmlIgnore]
        [NotColumn]
        private short? _Alt;

        [XmlElement("Alt")]
        [NotColumn]
        public string AltString
        {
            get
            {
                if (!_Alt.HasValue)
                {
                    return null;
                }
                else
                {
                    return _Alt.ToString();
                }
            }
            set
            {
                short val;
                if (short.TryParse(value, out val))
                {
                    this._Alt = val;
                }
                else
                {
                    this._Alt = null;
                }
            }
        }

        [XmlIgnore]
        [Column, Nullable]
        public short? Alt
        {
            get { return _Alt; }
            set { _Alt = value; }
        }

        [XmlIgnore]
        [NotColumn]
        private short? _DeleteType;

        [XmlElement("DeleteType")]
        [NotColumn]
        public string DeleteTypeString
        {
            get
            {
                if (!_DeleteType.HasValue)
                {
                    return null;
                }
                else
                {
                    return _DeleteType.ToString();
                }
            }
            set
            {
                short val;
                if (short.TryParse(value, out val))
                {
                    this._DeleteType = val;
                }
                else
                {
                    this._DeleteType = null;
                }
            }
        }

        [XmlIgnore]
        [Column, Nullable]
        public short? DeleteType
        {
            get { return _DeleteType; }
            set { _DeleteType = value; }
        }

        [Column, NotNull]
        public short TaskNumber { get; set; } // smallint

        [Column, Nullable]
        public string Reserve01 { get; set; } // varchar(50)

        [Column, Nullable]
        public string Reserve02 { get; set; } // varchar(50)
    }

    [Table(Schema = "loader", Name = "sht_ExamFinish")]
    public partial class sht_ExamFinish
    {
        [PrimaryKey, NotNull]
        public int REGION { get; set; } // int

        [PrimaryKey, NotNull]
        public Guid ExamFinishID { get; set; } // uniqueidentifier

        [Column, NotNull]
        public int TestTypeCode { get; set; } // int

        [Column, NotNull]
        public int SubjectCode { get; set; } // int

        [Column, Nullable]
        public string ExamDate { get; set; } // varchar(100)

        [Column, Nullable]
        public string FinishTime { get; set; } // varchar(100)

        [Column, Nullable]
        public string FinishUserName { get; set; } // varchar(100)
    }

    [Table(Schema = "loader", Name = "sht_FinalMarks_C")]
    public partial class sht_FinalMarks_C
    {
        [Column, NotNull]
        public int REGION { get; set; } // int

        [PrimaryKey, NotNull]
        public Guid MarkID { get; set; } // uniqueidentifier

        [Column, NotNull]
        public Guid SheetFK { get; set; } // uniqueidentifier

        [Column, NotNull]
        public int TaskNumber { get; set; } // int

        [Column, Nullable]
        public string MarkValue { get; set; } // varchar(100)
    }

    [Table(Schema = "loader", Name = "sht_FinalMarks_D")]
    public partial class sht_FinalMarks_D
    {
        [Column, NotNull]
        public int REGION { get; set; } // int

        [PrimaryKey, NotNull]
        public Guid MarkID { get; set; } // uniqueidentifier

        [Column, NotNull]
        public Guid SheetFK { get; set; } // uniqueidentifier

        [Column, NotNull]
        public int TaskNumber { get; set; } // int

        [Column, Nullable]
        public string MarkValue { get; set; } // varchar(100)
    }

    [Table(Schema = "loader", Name = "sht_Marks_AB")]
    public partial class sht_Marks_AB
    {
        [Column, NotNull]
        public int REGION { get; set; } // int

        [PrimaryKey, NotNull]
        public Guid MarkID { get; set; } // uniqueidentifier

        [XmlIgnore]
        [NotColumn]
        private Guid? _SheetFK;

        [XmlElement("SheetFK")]
        [NotColumn]
        public string SheetFKString
        {
            get
            {
                if (!_SheetFK.HasValue)
                {
                    return null;
                }
                else
                {
                    return _SheetFK.ToString();
                }
            }
            set
            {
                Guid guid;
                if (Guid.TryParse(value, out guid))
                {
                    this._SheetFK = guid;
                }
                else
                {
                    this._SheetFK = null;
                }
            }
        }

        [XmlIgnore]
        [Column, Nullable]
        public Guid? SheetFK
        {
            get { return _SheetFK; }
            set { _SheetFK = value; }
        }

        [Column, NotNull]
        public int TaskTypeCode { get; set; } // int

        [Column, NotNull]
        public int TaskNumber { get; set; } // int

        [Column, Nullable]
        public string AnswerValue { get; set; } // varchar(100)

        [Column, Nullable]
        public string ReplaceValue { get; set; } // varchar(100)
    }

    [Table(Schema = "loader", Name = "sht_Marks_C")]
    public partial class sht_Marks_C
    {
        [Column, NotNull]
        public int REGION { get; set; } // int

        [PrimaryKey, NotNull]
        public Guid MarkID { get; set; } // uniqueidentifier

        [Column, NotNull]
        public Guid SheetFK { get; set; } // uniqueidentifier

        [Column, Nullable]
        public string ProtocolFile { get; set; } // varchar(100)

        [Column, Nullable]
        public string ProtocolCode { get; set; } // varchar(100)

        [Column, Nullable]
        public string ProtocolCRC { get; set; } // varchar(100)

        [Column, NotNull]
        public bool ThirdCheck { get; set; } // bit

        [Column, NotNull]
        public int RowNumber { get; set; } // int

        [Column, NotNull]
        public int TaskNumber { get; set; } // int

        [Column, Nullable]
        public string MarkValue { get; set; } // varchar(100)
    }

    [Table(Schema = "loader", Name = "sht_Marks_D")]
    public partial class sht_Marks_D
    {
        [Column, NotNull]
        public int REGION { get; set; } // int

        [PrimaryKey, NotNull]
        public Guid MarkID { get; set; } // uniqueidentifier

        [Column, NotNull]
        public Guid SheetFK { get; set; } // uniqueidentifier

        [Column, Nullable]
        public string ProtocolFile { get; set; } // varchar(100)

        [Column, Nullable]
        public string ProtocolCode { get; set; } // varchar(100)

        [Column, Nullable]
        public string ProtocolCRC { get; set; } // varchar(100)

        [Column, NotNull]
        public bool ThirdCheck { get; set; } // bit

        [Column, NotNull]
        public int RowNumber { get; set; } // int

        [Column, NotNull]
        public int TaskNumber { get; set; } // int

        [Column, Nullable]
        public string MarkValue { get; set; } // varchar(100)
    }

    [Table(Schema = "loader", Name = "sht_Packages")]
    public partial class sht_Package
    {
        [PrimaryKey(2), NotNull]
        public int REGION { get; set; } // int

        [PrimaryKey(1), NotNull]
        public Guid PackageID { get; set; } // uniqueidentifier

        [Column, Nullable]
        public string FileName { get; set; } // varchar(100)

        [Column, NotNull]
        public int RegionCode { get; set; } // int

        [Column, Nullable]
        public string DepartmentCode { get; set; } // varchar(100)

        [Column, NotNull]
        public int TestTypeCode { get; set; } // int

        [Column, NotNull]
        public int SubjectCode { get; set; } // int

        [Column, Nullable]
        public string ExamDate { get; set; } // varchar(100)

        [Column, NotNull]
        public int StationCode { get; set; } // int

        [Column, Nullable]
        public string AuditoriumCode { get; set; } // varchar(100)

        [Column, NotNull]
        public int Condition { get; set; } // int

        [XmlIgnore]
        [NotColumn]
        private DateTime? _CreateTime;

        [XmlElement("CreateTime")]
        [NotColumn]
        public string CreateTimeString
        {
            get
            {
                if (!_CreateTime.HasValue)
                {
                    return null;
                }
                else
                {
                    return _CreateTime.Value.ToString("o");
                }
            }
            set
            {
                this._CreateTime = DateTime.Parse(value);
            }
        }

        [XmlIgnore]
        [Column, Nullable]
        public DateTime? CreateTime
        {
            get { return _CreateTime; }
            set { _CreateTime = value; }
        }

        [XmlIgnore]
        [NotColumn]
        private DateTime? _UpdateTime;

        [XmlElement("UpdateTime")]
        [NotColumn]
        public string UpdateTimeString
        {
            get
            {
                if (!_UpdateTime.HasValue)
                {
                    return null;
                }
                else
                {
                    return _UpdateTime.Value.ToString("o");
                }
            }
            set
            {
                DateTime dt;
                if (DateTime.TryParse(value, null, DateTimeStyles.AdjustToUniversal, out dt))
                {
                    this._UpdateTime = dt;
                }
                else
                {
                    this._UpdateTime = null;
                }
            }
        }

        [XmlIgnore]
        [Column, Nullable]
        public DateTime? UpdateTime
        {
            get { return _UpdateTime; }
            set { _UpdateTime = value; }
        }

        [Column, NotNull]
        public int SheetsCount { get; set; } // int

        [Column, NotNull]
        public bool IsExported { get; set; } // bit

        [Column, Nullable]
        public string ProjectName { get; set; } // varchar(100)

        [Column, NotNull]
        public int ProjectBatchID { get; set; } // int

        [Column, Nullable]
        public string ProjectBatchName { get; set; } // varchar(100)
    }

    [Table(Schema = "loader", Name = "sht_Sheets_AB")]
    public partial class sht_Sheets_AB
    {
        [Column, NotNull]
        public int REGION { get; set; } // int

        [PrimaryKey, NotNull]
        public Guid SheetID { get; set; } // uniqueidentifier

        [XmlIgnore]
        [NotColumn]
        private Guid? _PackageFK;

        [XmlElement("PackageFK")]
        [NotColumn]
        public string PackageFKString
        {
            get
            {
                if (!_PackageFK.HasValue)
                {
                    return null;
                }
                else
                {
                    return _PackageFK.ToString();
                }
            }
            set
            {
                Guid guid;
                if (Guid.TryParse(value, out guid))
                {
                    this._PackageFK = guid;
                }
                else
                {
                    this._PackageFK = null;
                }
            }
        }

        [XmlIgnore]
        [Column, Nullable]
        public Guid? PackageFK
        {
            get { return _PackageFK; }
            set { _PackageFK = value; }
        }

        [Column, Nullable]
        public string FileName { get; set; } // varchar(100)

        [Column, NotNull]
        public int RegionCode { get; set; } // int

        [Column, Nullable]
        public string DepartmentCode { get; set; } // varchar(100)

        [Column, NotNull]
        public int TestTypeCode { get; set; } // int

        [Column, NotNull]
        public int SubjectCode { get; set; } // int

        [Column, Nullable]
        public string ExamDate { get; set; } // varchar(100)

        [Column, NotNull]
        public int StationCode { get; set; } // int

        [Column, Nullable]
        public string AuditoriumCode { get; set; } // varchar(100)

        [Column, Nullable]
        public string Barcode { get; set; } // varchar(100)

        [Column, Nullable]
        public string CRC { get; set; } // varchar(100)

        [Column, Nullable, XmlIgnore]
        public string Info { get; set; } // xml

        [Column, NotNull]
        public int ImageNumber { get; set; } // int

        [Column, NotNull]
        public int VariantCode { get; set; } // int

        [Column, NotNull]
        public bool HasSignature { get; set; } // bit

        [Column, NotNull]
        public int Condition { get; set; } // int

        [Column, NotNull]
        public int ProjectBatchID { get; set; } // int

        [Column, Nullable]
        public string Reserve01 { get; set; } // varchar(255)

        [Column, Nullable]
        public string Reserve02 { get; set; } // varchar(255)

        [Column, Nullable]
        public string Reserve03 { get; set; } // varchar(255)

        [Column, Nullable]
        public string Reserve04 { get; set; } // varchar(255)

        [Column, Nullable]
        public string Reserve05 { get; set; } // varchar(255)

        [Column, Nullable]
        public string Reserve06 { get; set; } // varchar(255)

        [Column, Nullable]
        public string Reserve07 { get; set; } // varchar(255)

        [Column, Nullable]
        public string Reserve08 { get; set; } // varchar(255)

        [Column, Nullable]
        public string Reserve09 { get; set; } // varchar(255)

        [Column, Nullable]
        public string Reserve10 { get; set; } // varchar(255)
    }

    [Table(Schema = "loader", Name = "sht_Sheets_C")]
    public partial class sht_Sheets_C
    {
        [PrimaryKey(1), NotNull]
        public int REGION { get; set; } // int

        [PrimaryKey(2), NotNull]
        public Guid SheetID { get; set; } // uniqueidentifier

        [Column, NotNull]
        public Guid PackageFK { get; set; } // uniqueidentifier

        [Column, Nullable]
        public string FileName { get; set; } // varchar(100)

        [Column, NotNull]
        public int RegionCode { get; set; } // int

        [Column, Nullable]
        public string DepartmentCode { get; set; } // varchar(100)

        [Column, NotNull]
        public int TestTypeCode { get; set; } // int

        [Column, NotNull]
        public int SubjectCode { get; set; } // int

        [Column, Nullable]
        public string ExamDate { get; set; } // varchar(100)

        [Column, NotNull]
        public int StationCode { get; set; } // int

        [Column, Nullable]
        public string AuditoriumCode { get; set; } // varchar(100)

        [Column, Nullable]
        public string Barcode { get; set; } // varchar(100)

        [Column, Nullable]
        public string CRC { get; set; } // varchar(1000)

        [Column, Nullable, XmlIgnore]
        public string Info { get; set; } // xml

        [Column, NotNull]
        public int SheetCode { get; set; } // int

        [Column, Nullable]
        public string ResponsibleCode { get; set; } // varchar(100)

        [Column, NotNull]
        public bool IsEmpty { get; set; } // bit

        [Column, NotNull]
        public int ImageNumber { get; set; } // int

        [Column, NotNull]
        public int VariantCode { get; set; } // int

        [Column, Nullable]
        public string ImagePaths { get; set; } // varchar(1000)

        [Column, Nullable]
        public string ProtocolCodes { get; set; } // varchar(1000)

        [Column, NotNull]
        public int Condition { get; set; } // int

        [Column, NotNull]
        public int ProjectBatchID { get; set; } // int

        [XmlIgnore]
        [NotColumn]
        private short? _DeleteType;

        [XmlElement("DeleteType")]
        [NotColumn]
        public string DeleteTypeString
        {
            get
            {
                if (!_DeleteType.HasValue)
                {
                    return null;
                }
                else
                {
                    return _DeleteType.ToString();
                }
            }
            set
            {
                short val;
                if (short.TryParse(value, out val))
                {
                    this._DeleteType = val;
                }
                else
                {
                    this._DeleteType = null;
                }
            }
        }

        [XmlIgnore]
        [Column, Nullable]
        public short? DeleteType
        {
            get { return _DeleteType; }
            set { _DeleteType = value; }
        }

        [Column, Nullable]
        public string Reserve01 { get; set; } // varchar(255)

        [Column, Nullable]
        public string Reserve02 { get; set; } // varchar(255)

        [Column, Nullable]
        public string Reserve03 { get; set; } // varchar(255)

        [Column, Nullable]
        public string Reserve04 { get; set; } // varchar(255)

        [Column, Nullable]
        public string Reserve05 { get; set; } // varchar(255)

        [Column, Nullable]
        public string Reserve06 { get; set; } // varchar(255)

        [Column, Nullable]
        public string Reserve07 { get; set; } // varchar(255)

        [Column, Nullable]
        public string Reserve08 { get; set; } // varchar(255)

        [Column, Nullable]
        public string Reserve09 { get; set; } // varchar(255)

        [Column, Nullable]
        public string Reserve10 { get; set; } // varchar(255)
    }

    [Table(Schema = "loader", Name = "sht_Sheets_D")]
    public partial class sht_Sheets_D
    {
        [PrimaryKey(1), NotNull]
        public int REGION { get; set; } // int

        [PrimaryKey(2), NotNull]
        public Guid SheetID { get; set; } // uniqueidentifier

        [Column, NotNull]
        public Guid PackageFK { get; set; } // uniqueidentifier

        [Column, Nullable]
        public string FileName { get; set; } // varchar(100)

        [Column, NotNull]
        public int RegionCode { get; set; } // int

        [Column, Nullable]
        public string DepartmentCode { get; set; } // varchar(100)

        [Column, NotNull]
        public int TestTypeCode { get; set; } // int

        [Column, NotNull]
        public int SubjectCode { get; set; } // int

        [Column, Nullable]
        public string ExamDate { get; set; } // varchar(100)

        [Column, NotNull]
        public int StationCode { get; set; } // int

        [Column, Nullable]
        public string AuditoriumCode { get; set; } // varchar(100)

        [Column, Nullable]
        public string Barcode { get; set; } // varchar(100)

        [Column, Nullable]
        public string CRC { get; set; } // varchar(1000)

        [Column, Nullable, XmlIgnore]
        public string Info { get; set; } // xml

        [Column, NotNull]
        public int SheetCode { get; set; } // int

        [Column, Nullable]
        public string ResponsibleCode { get; set; } // varchar(100)

        [Column, NotNull]
        public bool IsEmpty { get; set; } // bit

        [Column, NotNull]
        public int ImageNumber { get; set; } // int

        [Column, NotNull]
        public int VariantCode { get; set; } // int

        [Column, Nullable]
        public string ImagePaths { get; set; } // varchar(1000)

        [Column, Nullable]
        public string ProtocolCodes { get; set; } // varchar(1000)

        [Column, NotNull]
        public int Condition { get; set; } // int

        [Column, NotNull]
        public int ProjectBatchID { get; set; } // int

        [XmlIgnore]
        [NotColumn]
        private short? _DeleteType;

        [XmlElement("DeleteType")]
        [NotColumn]
        public string DeleteTypeString
        {
            get
            {
                if (!_DeleteType.HasValue)
                {
                    return null;
                }
                else
                {
                    return _DeleteType.ToString();
                }
            }
            set
            {
                short val;
                if (short.TryParse(value, out val))
                {
                    this._DeleteType = val;
                }
                else
                {
                    this._DeleteType = null;
                }
            }
        }

        [XmlIgnore]
        [Column, Nullable]
        public short? DeleteType
        {
            get { return _DeleteType; }
            set { _DeleteType = value; }
        }

        [Column, Nullable]
        public string Reserve01 { get; set; } // varchar(255)

        [Column, Nullable]
        public string Reserve02 { get; set; } // varchar(255)

        [Column, Nullable]
        public string Reserve03 { get; set; } // varchar(255)

        [Column, Nullable]
        public string Reserve04 { get; set; } // varchar(255)

        [Column, Nullable]
        public string Reserve05 { get; set; } // varchar(255)

        [Column, Nullable]
        public string Reserve06 { get; set; } // varchar(255)

        [Column, Nullable]
        public string Reserve07 { get; set; } // varchar(255)

        [Column, Nullable]
        public string Reserve08 { get; set; } // varchar(255)

        [Column, Nullable]
        public string Reserve09 { get; set; } // varchar(255)

        [Column, Nullable]
        public string Reserve10 { get; set; } // varchar(255)
    }

    [Table(Schema = "loader", Name = "sht_Sheets_R")]
    public partial class sht_Sheets_R
    {
        [PrimaryKey(2), NotNull]
        public int REGION { get; set; } // int

        [PrimaryKey(1), NotNull]
        public Guid SheetID { get; set; } // uniqueidentifier

        [Column, NotNull]
        public Guid PackageFK { get; set; } // uniqueidentifier

        [Column, Nullable]
        public string FileName { get; set; } // varchar(100)

        [Column, NotNull]
        public int RegionCode { get; set; } // int

        [Column, Nullable]
        public string DepartmentCode { get; set; } // varchar(100)

        [Column, NotNull]
        public int TestTypeCode { get; set; } // int

        [Column, NotNull]
        public int SubjectCode { get; set; } // int

        [Column, Nullable]
        public string ExamDate { get; set; } // varchar(100)

        [Column, NotNull]
        public int StationCode { get; set; } // int

        [Column, Nullable]
        public string AuditoriumCode { get; set; } // varchar(100)

        [Column, Nullable]
        public string Barcode { get; set; } // varchar(100)

        [Column, Nullable]
        public string CRC { get; set; } // varchar(100)

        [Column, Nullable, XmlIgnore]
        public string Info { get; set; } // xml

        [Column, NotNull]
        public Guid ParticipantID { get; set; } // uniqueidentifier

        [Column, NotNull]
        public int SchoolCode { get; set; } // int

        [Column, Nullable]
        public string Surname { get; set; } // varchar(100)

        [Column, Nullable]
        public string Name { get; set; } // varchar(100)

        [Column, Nullable]
        public string SecondName { get; set; } // varchar(100)

        [Column, Nullable]
        public string DocumentSeries { get; set; } // varchar(100)

        [Column, Nullable]
        public string DocumentNumber { get; set; } // varchar(100)

        [Column, Nullable]
        public string DocumentHash { get; set; } // varchar(100)

        [Column, NotNull]
        public int Sex { get; set; } // int

        [Column, NotNull]
        public int ImageNumber { get; set; } // int

        [Column, NotNull]
        public int VariantCode { get; set; } // int

        [Column, NotNull]
        public bool HasSignature { get; set; } // bit

        [Column, NotNull]
        public int Condition { get; set; } // int

        [Column, NotNull]
        public int ProjectBatchID { get; set; } // int

        [Column, Nullable]
        public string Reserve01 { get; set; } // varchar(255)

        [Column, Nullable]
        public string Reserve02 { get; set; } // varchar(255)

        [Column, Nullable]
        public string Reserve03 { get; set; } // varchar(255)

        [Column, Nullable]
        public string Reserve04 { get; set; } // varchar(255)

        [Column, Nullable]
        public string Reserve05 { get; set; } // varchar(255)

        [Column, Nullable]
        public string Reserve06 { get; set; } // varchar(255)

        [Column, Nullable]
        public string Reserve07 { get; set; } // varchar(255)

        [Column, Nullable]
        public string Reserve08 { get; set; } // varchar(255)

        [Column, Nullable]
        public string Reserve09 { get; set; } // varchar(255)

        [Column, Nullable]
        public string Reserve10 { get; set; } // varchar(255)
    }

    [Table(Schema = "dbo", Name = "dat_Exams")]
    public partial class dat_Exam
    {
        [PrimaryKey, NotNull]
        public int ExamGlobalID { get; set; } // int

        [Column, NotNull]
        public decimal SchemeVersionID { get; set; } //decimal

        [Column, NotNull]
        public int TestTypeCode { get; set; } // int

        [Column, NotNull]
        public int SubjectCode { get; set; } // int

        [Column, NotNull]
        public string ExamDate { get; set; } // varchar(100)

        [Column, NotNull]
        public int WaveCode { get; set; } // int

        [Column, NotNull]
        public int ExamType { get; set; } // int
    }

    [Table(Schema = "loader", Name = "ac_Corrections")]
    public partial class ac_Correction
    {
        [PrimaryKey(2), NotNull]
        public int REGION { get; set; } // int

        [PrimaryKey(1), NotNull]
        public Guid CorrectionID { get; set; } // uniqueidentifier

        [Column, NotNull]
        public Guid ParticipantFK { get; set; } // uniqueidentifier

        [Column, Nullable]
        public string OldSurname { get; set; } // varchar(100)

        [Column, Nullable]
        public string OldName { get; set; } // varchar(100)

        [Column, Nullable]
        public string OldSecondName { get; set; } // varchar(100)

        [Column, Nullable]
        public string OldDocumentSeries { get; set; } // varchar(100)

        [Column, Nullable]
        public string OldDocumentNumber { get; set; } // varchar(100)

        [Column, Nullable]
        public int OldDocumentTypeCode { get; set; } // int

        [Column, NotNull]
        public int OldSex { get; set; } // int

        [Column, Nullable]
        public string OldClass { get; set; } // varchar(50)

        [XmlIgnore]
        [NotColumn]
        private DateTime? _OldBirthDay;

        [XmlElement("OldBirthDay")]
        [NotColumn]
        public string OldBirthDayString
        {
            get
            {
                if (!_OldBirthDay.HasValue)
                {
                    return null;
                }
                else
                {
                    return _OldBirthDay.Value.ToString("o");
                }
            }
            set
            {
                DateTime dt;
                if (DateTime.TryParse(value, null, DateTimeStyles.AdjustToUniversal, out dt))
                {
                    this._OldBirthDay = dt;
                }
                else
                {
                    this._OldBirthDay = null;
                }
            }
        }

        [XmlIgnore]
        [Column, Nullable]
        public DateTime? OldBirthDay
        {
            get { return _OldBirthDay; }
            set { _OldBirthDay = value; }
        }

        [Column, NotNull]
        public Guid OldSchoolFK { get; set; } // uniqueidentifier

        [Column, Nullable]
        public string NewSurname { get; set; } // varchar(100)

        [Column, Nullable]
        public string NewName { get; set; } // varchar(100)

        [Column, Nullable]
        public string NewSecondName { get; set; } // varchar(100)

        [Column, NotNull]
        public string NewDocumentSeries { get; set; } // varchar(100)

        [Column, Nullable]
        public string NewDocumentNumber { get; set; } // varchar(100)

        [Column, Nullable]
        public int NewDocumentTypeCode { get; set; } // int

        [Column, Nullable]
        public string NewClass { get; set; } // varchar(50)

        [XmlIgnore]
        [NotColumn]
        private DateTime? _NewBirthDay;

        [XmlElement("NewBirthDay")]
        [NotColumn]
        public string NewBirthDayString
        {
            get
            {
                if (!_NewBirthDay.HasValue)
                {
                    return null;
                }
                else
                {
                    return _NewBirthDay.Value.ToString("o");
                }
            }
            set
            {
                DateTime dt;
                if (DateTime.TryParse(value, null, DateTimeStyles.AdjustToUniversal, out dt))
                {
                    this._NewBirthDay = dt;
                }
                else
                {
                    this._NewBirthDay = null;
                }
            }
        }

        [XmlIgnore]
        [Column, Nullable]
        public DateTime? NewBirthDay
        {
            get { return _NewBirthDay; }
            set { _NewBirthDay = value; }
        }

        [Column, NotNull]
        public int NewSex { get; set; } // int

        [Column, NotNull]
        public Guid NewSchoolFK { get; set; } // uniqueidentifier

        [XmlIgnore]
        [NotColumn]
        private DateTime? _CreateTime;

        [XmlElement("CreateTime")]
        [NotColumn]
        public string CreateTimeString
        {
            get
            {
                if (!_CreateTime.HasValue)
                {
                    return null;
                }
                else
                {
                    return _CreateTime.Value.ToString("o");
                }
            }
            set
            {
                DateTime dt;
                if (DateTime.TryParse(value, null, DateTimeStyles.AdjustToUniversal, out dt))
                {
                    this._CreateTime = dt;
                }
                else
                {
                    this._CreateTime = null;
                }
            }
        }

        [XmlIgnore]
        [Column, Nullable]
        public DateTime? CreateTime
        {
            get { return _CreateTime; }
            set { _CreateTime = value; }
        }

        [XmlIgnore]
        [NotColumn]
        private DateTime? _UpdateTime;

        [XmlElement("UpdateTime")]
        [NotColumn]
        public string UpdateTimeString
        {
            get
            {
                if (!_UpdateTime.HasValue)
                {
                    return null;
                }
                else
                {
                    return _UpdateTime.Value.ToString("o");
                }
            }
            set
            {
                DateTime dt;
                if (DateTime.TryParse(value, null, DateTimeStyles.AdjustToUniversal, out dt))
                {
                    this._UpdateTime = dt;
                }
                else
                {
                    this._UpdateTime = null;
                }
            }
        }

        [XmlIgnore]
        [Column, Nullable]
        public DateTime? UpdateTime
        {
            get { return _UpdateTime; }
            set { _UpdateTime = value; }
        }

        [Column, NotNull]
        public int CorrectionCondition { get; set; } // int

        [Column, Nullable]
        public string CorrectionComment { get; set; } // xml
    }

    [Table(Schema = "loader", Name = "rbd_ParticipantsExamsOnSchool")]
    public partial class rbd_ParticipantsExamsOnSchool
    {
        [PrimaryKey, NotNull]
        public Guid ParticipantsExamsOnSchoolID { get; set; } // Guid

        [Column, NotNull]
        public int REGION { get; set; } // int

        [PrimaryKey, NotNull]
        public Guid ParticipantsExamsID { get; set; } // Guid

        [PrimaryKey, NotNull]
        public Guid SchoolID { get; set; } // Guid

        [XmlIgnore]
        [NotColumn]
        private DateTime _CreateDate;

        [XmlElement("CreateDate")]
        [NotColumn]
        public string CreateDateString
        {
            get
            {
                return _CreateDate.ToString("o");
            }
            set
            {
                this._CreateDate = DateTime.Parse(value);
            }
        }

        [XmlIgnore]
        [Column, NotNull]
        public DateTime CreateDate
        {
            get { return _CreateDate; }
            set { _CreateDate = value; }
        }

        [XmlIgnore]
        [NotColumn]
        private DateTime _UpdateDate;

        [XmlElement("UpdateDate")]
        [NotColumn]
        public string UpdateDateString
        {
            get
            {
                return _UpdateDate.ToString("o");
            }
            set
            {
                this._UpdateDate = DateTime.Parse(value);
            }
        }

        [XmlIgnore]
        [Column, NotNull]
        public DateTime UpdateDate
        {
            get { return _UpdateDate; }
            set { _UpdateDate = value; }
        }

        [XmlIgnore]
        [NotColumn]
        private DateTime? _ImportCreateDate;

        [XmlElement("ImportCreateDate")]
        [NotColumn]
        public string ImportCreateDateString
        {
            get
            {
                if (!_ImportCreateDate.HasValue)
                {
                    return null;
                }
                else
                {
                    return _ImportCreateDate.Value.ToString("o");
                }
            }
            set
            {
                DateTime dt;
                if (DateTime.TryParse(value, null, DateTimeStyles.AdjustToUniversal, out dt))
                {
                    this._ImportCreateDate = dt;
                }
                else
                {
                    this._ImportCreateDate = null;
                }
            }
        }

        [XmlIgnore]
        [Column, Nullable]
        public DateTime? ImportCreateDate
        {
            get { return _ImportCreateDate; }
            set { _ImportCreateDate = value; }
        }

        [XmlIgnore]
        [NotColumn]
        private DateTime? _ImportUpdateDate;

        [XmlElement("ImportUpdateDate")]
        [NotColumn]
        public string ImportUpdateDateString
        {
            get
            {
                if (!_ImportUpdateDate.HasValue)
                {
                    return null;
                }
                else
                {
                    return _ImportUpdateDate.Value.ToString("o");
                }
            }
            set
            {
                DateTime dt;
                if (DateTime.TryParse(value, null, DateTimeStyles.AdjustToUniversal, out dt))
                {
                    this._ImportUpdateDate = dt;
                }
                else
                {
                    this._ImportUpdateDate = null;
                }
            }
        }

        [XmlIgnore]
        [Column, Nullable]
        public DateTime? ImportUpdateDate
        {
            get { return _ImportUpdateDate; }
            set { _ImportUpdateDate = value; }
        }

        [Column, NotNull]
        public bool IsDeleted { get; set; } // bit    
    }

    [Table(Schema = "loader", Name = "rbd_RegionFiles")]
    public partial class rbd_RegionFiles
    {
        [PrimaryKey, NotNull]
        public Guid FileID { get; set; } // Guid

        [Column, NotNull]
        public int REGION { get; set; } // int

        [Column, NotNull]
        public string FileName { get; set; } // varchar

        [Column, NotNull]
        public byte[] FileData { get; set; } // image

        [Column, NotNull]
        public int FileSize { get; set; } // int

        [XmlIgnore]
        [NotColumn]
        private DateTime _CreateDate;

        [XmlElement("CreateDate")]
        [NotColumn]
        public string CreateDateString
        {
            get
            {
                return _CreateDate.ToString("o");
            }
            set
            {
                this._CreateDate = DateTime.Parse(value);
            }
        }

        [XmlIgnore]
        [Column, NotNull]
        public DateTime CreateDate
        {
            get { return _CreateDate; }
            set { _CreateDate = value; }
        }

        [XmlIgnore]
        [NotColumn]
        private DateTime _UpdateDate;

        [XmlElement("UpdateDate")]
        [NotColumn]
        public string UpdateDateString
        {
            get
            {
                return _UpdateDate.ToString("o");
            }
            set
            {
                this._UpdateDate = DateTime.Parse(value);
            }
        }

        [XmlIgnore]
        [Column, NotNull]
        public DateTime UpdateDate
        {
            get { return _UpdateDate; }
            set { _UpdateDate = value; }
        }

        [XmlIgnore]
        [NotColumn]
        private DateTime? _ImportCreateDate;

        [XmlElement("ImportCreateDate")]
        [NotColumn]
        public string ImportCreateDateString
        {
            get
            {
                if (!_ImportCreateDate.HasValue)
                {
                    return null;
                }
                else
                {
                    return _ImportCreateDate.Value.ToString("o");
                }
            }
            set
            {
                DateTime dt;
                if (DateTime.TryParse(value, null, DateTimeStyles.AdjustToUniversal, out dt))
                {
                    this._ImportCreateDate = dt;
                }
                else
                {
                    this._ImportCreateDate = null;
                }
            }
        }

        [XmlIgnore]
        [Column, Nullable]
        public DateTime? ImportCreateDate
        {
            get { return _ImportCreateDate; }
            set { _ImportCreateDate = value; }
        }

        [XmlIgnore]
        [NotColumn]
        private DateTime? _ImportUpdateDate;

        [XmlElement("ImportUpdateDate")]
        [NotColumn]
        public string ImportUpdateDateString
        {
            get
            {
                if (!_ImportUpdateDate.HasValue)
                {
                    return null;
                }
                else
                {
                    return _ImportUpdateDate.Value.ToString("o");
                }
            }
            set
            {
                DateTime dt;
                if (DateTime.TryParse(value, null, DateTimeStyles.AdjustToUniversal, out dt))
                {
                    this._ImportUpdateDate = dt;
                }
                else
                {
                    this._ImportUpdateDate = null;
                }
            }
        }

        [XmlIgnore]
        [Column, Nullable]
        public DateTime? ImportUpdateDate
        {
            get { return _ImportUpdateDate; }
            set { _ImportUpdateDate = value; }
        }
    }

    [Table(Schema = "loader", Name = "rbd_SchoolParticipant")]
    public partial class rbd_SchoolParticipant
    {
        [Column, NotNull]
        public int REGION { get; set; } // int

        [PrimaryKey, NotNull]
        public Guid ID { get; set; } // Guid

        [Column, NotNull]
        public Guid SchoolID { get; set; } // Guid

        [Column, NotNull]
        public Guid ParticipantID { get; set; } // Guid

        [XmlIgnore]
        [NotColumn]
        private DateTime? _RegistrationDate;

        [XmlElement("RegistrationDate")]
        [NotColumn]
        public string RegistrationDateString
        {
            get
            {
                if (!_RegistrationDate.HasValue)
                {
                    return null;
                }
                else
                {
                    return _RegistrationDate.Value.ToString("o");
                }
            }
            set
            {
                DateTime dt;
                if (DateTime.TryParse(value, null, DateTimeStyles.AdjustToUniversal, out dt))
                {
                    this._RegistrationDate = dt;
                }
                else
                {
                    this._RegistrationDate = null;
                }
            }
        }

        [XmlIgnore]
        [Column, NotNull]
        public DateTime? RegistrationDate
        {
            get { return _RegistrationDate; }
            set { _RegistrationDate = value; }
        }

        [XmlIgnore]
        [NotColumn]
        private bool? _IsDeleted;

        [XmlElement("IsDeleted")]
        [NotColumn]
        public string IsDeletedString
        {
            get
            {
                if (!_IsDeleted.HasValue)
                {
                    return null;
                }
                else
                {
                    return _IsDeleted.ToString();
                }
            }
            set
            {
                bool val;
                if (bool.TryParse(value, out val))
                {
                    this._IsDeleted = val;
                }
                else
                {
                    this._IsDeleted = null;
                }
            }
        }

        [XmlIgnore]
        [Column, Nullable]
        public bool? IsDeleted
        {
            get { return _IsDeleted; }
            set { _IsDeleted = value; }
        }

    }

    [Table(Schema = "dbo", Name = "rt_Settings")]
    public partial class rt_Settings
    {
        [PrimaryKey(1), NotNull]
        public Guid SettingID { get; set; } // uniqueidentifier

        [PrimaryKey(2), NotNull]
        public int REGION { get; set; } // int

        [Column, NotNull]
        public string SettingCategory { get; set; } // varchar

        [Column, NotNull]
        public string SettingName { get; set; } // varchar

        [Column, NotNull]
        public string SettingValue { get; set; } // varchar

        [Column, Nullable]
        public string SettingComment { get; set; } // varchar
    }

    [Table(Schema = "dbo", Name = "rbdc_Years")]
    public partial class rbdc_Years
    {
        [PrimaryKey, NotNull]
        public int YearID { get; set; } // int

        [Column, NotNull]
        public string YearCode { get; set; } // varchar

        [Column, NotNull]
        public string YearName { get; set; } // varchar

        [Column, NotNull]
        public int SortBy { get; set; } // int

        [Column, NotNull]
        public bool IsActive { get; set; } // bit
    }
}